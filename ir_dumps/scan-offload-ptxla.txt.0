[ScheduleSyncTensorsGraph]
TensorsGraphInfo:
  sync (/workspaces/torch/pytorch/xla/torch_xla/torch_xla.py:69)
  main (/workspaces/torch/playground/test_llm_offload.py:75)
  <module> (/workspaces/torch/playground/test_llm_offload.py:136)

Root Hashes: (7b6de7d6087b550c076f7c4809f8874a)

## BEGIN_GRAPH
HloModule IrToHlo.31, entry_computation_layout={(s64[], s64[])->(s64[16,512]{1,0})}

ENTRY %IrToHlo.31 (p0.1: s64[], p1.6: s64[]) -> (s64[16,512]) {
  %constant.4 = s64[] constant(2531011)
  %constant.2 = s64[] constant(214013)
  %p0.1 = s64[] parameter(0), sharding={replicated}
  %multiply.3 = s64[] multiply(s64[] %constant.2, s64[] %p0.1)
  %add.5 = s64[] add(s64[] %constant.4, s64[] %multiply.3)
  %convert.8 = u64[] convert(s64[] %add.5)
  %reshape.10 = u64[1]{0} reshape(u64[] %convert.8)
  %constant.9 = u64[] constant(0)
  %reshape.11 = u64[1]{0} reshape(u64[] %constant.9)
  %concatenate.12 = u64[2]{0} concatenate(u64[1]{0} %reshape.10, u64[1]{0} %reshape.11), dimensions={0}
  %rng-bit-generator.13 = (u64[2]{0}, u64[16,512]{1,0}) rng-bit-generator(u64[2]{0} %concatenate.12), algorithm=rng_default
  %get-tuple-element.15 = u64[2]{0} get-tuple-element((u64[2]{0}, u64[16,512]{1,0}) %rng-bit-generator.13), index=0
  %constant.7 = s64[] constant(0)
  %broadcast.27 = s64[16,512]{1,0} broadcast(s64[] %constant.7), dimensions={}
  %get-tuple-element.14 = u64[16,512]{1,0} get-tuple-element((u64[2]{0}, u64[16,512]{1,0}) %rng-bit-generator.13), index=1
  %p1.6 = s64[] parameter(1), sharding={replicated}
  %bitcast-convert.17 = u64[] bitcast-convert(s64[] %p1.6)
  %bitcast-convert.16 = u64[] bitcast-convert(s64[] %constant.7)
  %subtract.18 = u64[] subtract(u64[] %bitcast-convert.17, u64[] %bitcast-convert.16)
  %broadcast.19 = u64[16,512]{1,0} broadcast(u64[] %subtract.18), dimensions={}
  %remainder.20 = u64[16,512]{1,0} remainder(u64[16,512]{1,0} %get-tuple-element.14, u64[16,512]{1,0} %broadcast.19)
  %constant.21 = u64[] constant(1)
  %broadcast.22 = u64[16,512]{1,0} broadcast(u64[] %constant.21), dimensions={}
  %shift-right-logical.23 = u64[16,512]{1,0} shift-right-logical(u64[16,512]{1,0} %remainder.20, u64[16,512]{1,0} %broadcast.22)
  %bitcast-convert.26 = s64[16,512]{1,0} bitcast-convert(u64[16,512]{1,0} %shift-right-logical.23)
  %add.28 = s64[16,512]{1,0} add(s64[16,512]{1,0} %broadcast.27, s64[16,512]{1,0} %bitcast-convert.26)
  %subtract.24 = u64[16,512]{1,0} subtract(u64[16,512]{1,0} %remainder.20, u64[16,512]{1,0} %shift-right-logical.23)
  %bitcast-convert.25 = s64[16,512]{1,0} bitcast-convert(u64[16,512]{1,0} %subtract.24)
  %add.29 = s64[16,512]{1,0} add(s64[16,512]{1,0} %add.28, s64[16,512]{1,0} %bitcast-convert.25)
  ROOT %tuple.30 = (s64[16,512]{1,0}) tuple(s64[16,512]{1,0} %add.29)
}


Graph Hash: e90bba9f4b40221a4cbafd282484fed0

## END_GRAPH


#OUTPUT_SHARDING_BEGIN

s64[16,512] {replicated}

#OUTPUT_SHARDING_END

[ScheduleSyncTensorsGraph]
Graph Name: train_step_fn
TensorsGraphInfo:
  sync (/workspaces/torch/pytorch/xla/torch_xla/torch_xla.py:69)
  _compile (/workspaces/torch/pytorch/xla/torch_xla/torch_xla.py:193)
  __exit__ (/usr/local/lib/python3.10/contextlib.py:142)
  inner (/usr/local/lib/python3.10/contextlib.py:78)
  main (/workspaces/torch/playground/test_llm_offload.py:88)
  <module> (/workspaces/torch/playground/test_llm_offload.py:136)

Root Hashes: (49bc54e83625714c67c1f27f6810902c, 7851ba93351aa7085e8f4aa22414f40f, 768dcc10b13d12d0f003dcc5554ee3c2, e4450d43e4d14e45e761a17cbc179acf, 7f4ba7358c38efe603a8cb866f87a9f9, 660a7bda22789c607b47fd8c0f076e29, 159c151b24023bed493249f591acb86a, fa953d90dd195e0d3b21f19516050e84, 1bb0cea1e715633f322090dcebb9d734, df53f2b250ab1fd1e5e722787e4eed60, 962cf8131b5a1c0364701bbd8423a85b, 11337c101608a31d0d8f034a10bb174a, 877bbdbf1dd6b764035fd679ef8065fd, 3dc82d983fb8dc65bfc4148a90df803a, 65bce4d348f22e562082ad18fd3400d6, c0138934d0f3fce7112006b82babf8dd, 366a3ef3fb1c796568115e7cc941dd8c, 907d87daf5f78107718ea64d6fbb95d2, be9534d66d177e45e253155424cbc2dd, fbc7ee80ecdc33853d7cf9d5edb8f37, 4673368fbc4f880c3d8041a2f1d2f9be, 1db9a96ceb9a0a099225dcfa57970a0, 33c44e753853563a30b598edfef3ca7d, 77e984b943624a3925ff47aa44d79bb3, f9356b26e3f185894c9c41564da79101, bc2bafc9bbc037177ddd68641dd30132, 90934ea3532625583f7c7cfe7c8cd74b, 73bcdfd903b7fd985548b5b6ea18e219, 7c6e7bb826416cd26389a302ad10cf92, 3b595b713260d9ed06b314d19af3ce8e, 8eda086cd732b0258fc77eed210d1fbe, a80839fe101d7c254bd36173e97e182a, 271329076c262696066d9cd385b79dd3, 87e56b88909108482882192331e0a2b6, e147415f7d126014a21df225e62ca9af, 5932590458faf8b623e9189aa43cae5e, 48d38f6cc394fecdbe393442db598774, 8498a5a4cc5e2718046a93d048833727, cf36ede8dbb31d70da0742f7f2f600e0, c4c25a1f03b9d5d72dcc47b01e0d6600, 4a52f97dd828a1a2ce1eb10ce16bbced, 566700683a4b7f653536cfdd1ab66e3a, d663370c76aec3e979fb69231ad4eb47, d69337fb81288e72d4652b7bb95c5dec, bbb59f8b91c07fd6b9c2bda7d2aef133, d37870153aa4d75e7b485180890950c5, c9f1e06382230826a6ea40892279016d, 474a06a44d9ff2a84642387549ee1187, bfaa607f023014afe94f392c575a2fa5, 6c323f04175908120230333afcda71f7, 3b5b6bf909d185457fc1fade342d9c7, c4ef87bca2f58b9d2718f64da033ca7e, bf1335685944e33c3f414e8703ffb38d, 98f6f6cd77e175000dda4bf4ca06499f, f590846bc57d2c5dbfbdf138b7565109, 738787c105d8b15e8a809e1f9b03c7af, f6749bc9f52b35785324d31afd4f03ce, 3a7049ec92be80be538333c9d188ddf9, f251547b14454a7c85e29ca2cfabcf0f, c72b8c52462858e5322ffdf72b0acf4b, 54e1e82048ec33b0918e16bdeb3257b4, 4f8bbcfe85b4335dbf23d2edbe561d9e, 5067b54573f404c89bc2138d290143b, bad87da12db4035af9046f748cbe447b, d8b98ef54fe170306b316c1df1f344cf, c8b9c0b67ee0c3172017ad989e0fb498, 1d55f86ca8cca196230116304d7621ce, 44ef6d6e80f0d3abb8585777835c9e86, 68a511021365408e8d0423de8602995a, 129ad080b914da87c6ba57ba7ff39c5e, 15fa8044e16b5c6c1938e6682dc81085, 2b5c939bdeb46519275c35e51778f74c, e381220d22143dee47ed9a0584d1c492, abe8bfbf2e91daebd38343573800d85f, d167de99c162c8d80ed4b6c720f13576, 6eaeb8034895b0b328e85fe0ab193a45, 9588461977a0b51fa6c3679d2abeddd8, ce4cba135da6cb635eaed8093150785f, 57ca910ffc58dbf875fa6ede247a077e, 71ba26388f1d312ef3962f729d5643b9, 134aa5d74ab8d4e245fd13ce5295ea0f, 5dfd0848bc6ac0b3bd7363f04f831848, db2af089e052e8c25798503627d6e4a7, 5907d8537c054bb68c9890dc45ee7127, 96b0348c00978a406c6b10b00105882d, 4eef209d856eec399b3264526b8ffcf8, 8db8975574878fbb54a6b4c8a72f4173, 2b09bd9bcf563a7194ec2c422d0c41d4, 68e3d6593a5c5d6b00e59afd950ba0e3, 3a9f1a59e4c5dc505bda30f91e24ead9, e2268dde1aa878f1ab6c54079b6b4092, eb0e57bd7976f4868cb47abd97343e94, ffe1ba145e84c609526e906d304a412c, b498c7a5f570eaa18754612e41f6de9d, 232383860b6c696b5fe475bf08659a4d, 12fd9767acdee5702bfdbc6404895341, 922c4d8032df18daa10ab5da3e9858da, 4163af2502375783130fb9c7efa91bf8, 6cf81275b9d185f05113336470862b62, ce45567142d3b5df5418fa9ee9c20380, e96e1ca1eded640e601df5dd6ce1ec31, bc3f1f2a04280e216642a18877c58073, 87bf83083429a6cb43f3d71db789108, ebb19b36ce84e61751909395d3cee8c4, c4abf1844959530cd421283c3163630a, f2ed45f49571a75a0a076e2c481f0bdc, d2457e3f1358bc8d62d67f759a410147, 8e2494148c69de4a39ec89f943bb99d7, 841f2eb43da21819e2a21dd375fa8645, aaefb55f3f6b81c4d66806e357ee12e0, d56cd5b7be0c2bc7f7007bc0bbc3b12b, 1e73aac9efa9eba77bbcfceb2eebc0fe, de83e6607bed75fd4ccbda25c5e976ca, 1b8d362cb8c9aff449dadd8a2dac16d8, 67d91eb6c3f95937937f6a16a37948, b262d6d39623260510ac1119de7f01ca, 4264eba6180776c0d25a999eb0583f15, 9f7ed1371e559afb310c31ab481a88fd, a90ff26726410a1ff790d89ba650a7a9, 55a1be0d9359b502f32dd38bea8804c4, 31fd8e0b1e71da69ef04d6bb6965b929, aa8b0bf538763e2262484fa107211d04, d81a286a3456b46a1ad775bf182a1ae4, 1be473e434d2d06fc77ae5deaaee3657, dccfcdf96840a5eaddbcd4b8657160c6, 589282f3afd2243a1a8ee8889165fa8c, 73ff638c16aac2609e688b743e9c89cb, 7c24700b1a02668799bf178f2194c3bd, f612542ad0c860a74fe5dc9a0902cdaa, d72663c08eddbacbd8b8e98c939bed06, 3637eaeddc07e5ff7e844f7b0cd513e5, 7aa460919c103fd83fc20110a15971d5, 2448452317a6f77bd554d4113adcf26c, 5449e3a01035bab1726834248afab007, 54d4ab5a7d225fa96cc4f09f998c61ef, 8d8d5ea39cb644b85413dad06d629c6f, 6d20b3edb9c749913e808f8c4032d58a, 249c284010a3434a910e5778ffb6bd28, 8647dfe7f8a8db3fbc8a861104bd335, 1b854c2f80ad7b3f0cb3c01d2a9d042b, e343df49724b7ead019e4bac583366e2, e647558d7fc33ccef33a3c18df175b9b, 11cf008d58f2929d50efab6c9458801a, f7079309d6efb2efe255a566e0bc5359, c9801a9be606c6b063233e7726fbc607, 273c902f0d57a860c7050ba77f91734d, 17b1a2c78cd553d49828e554523f30e8, 9befad95e609fe083022adc5181f7f1d, 9a4b45d05c704dfbfaf178547960813c, 724698b3c484c59c13ddbeb72f56c22b, fe5f25c21079f58fdda1affe58f020de, f8489f1f88dbc490952e232747276347, dd333315d50eea0e090971b4ee124e8c, d1ad555b955dce0876ca889c17e0e077, 7e412a94e5758faed4491a87b613d83d, 61bd302b19735a0d8a564254a47f494, 8a4c5f4826906110435e622fbcc7651b, 3e626d0c2632ddbc7bfc2f46361e2ad2, 96fb53b759ba92cd95b57003edca198e, 40a5b2eb6aa86fb198ff86d48c4f9e33, 288e72b29de8a23a2a4ffdb2e1a67ca2, 6f6919f0d5b1016145fc4efb5457989d, b3df5236d521ea592cde099c88927397, 9cb93a983dc65e600d6e480c6c0b5808, ac141413667a3294d578e8b6135c0365, 3c2fb161565701ec29a962f7b790e30, 10d3940158ea4f7a9f55a5c03494f00f, 7a2d89467502b5d683bd56d76bf69c73, ddf18898b31affaafa3008ed1407f76e, f4e9cd5dbacc1533652bbc6102b93765, f8e29e5e69499c71b58af567dad348cc, ea5d7cc84254ed098c0ac100a536c1d1, a7f7216fb7088b6086d62fb0a5f8edd9, 1d88fd7517edf0ce73d77465ab3466b, afa1303ad6aa8d62b643a2f0634f67c0, 447982c258a704aae2a00fb480fb7d93, d076e0a1c4b41d6e51d23bf074d64433, a850b4e41a8a0e8773f039169f5a3265, 7b2489d07a77a81961f64ac39f83588b, d86a5d7927c10a76edf966adb17e9552, 8d31dd40786b91c68d0cbb5e7570abbd, 5404a527b8695f32b5600278b12f330e, f4101a7d2b7ff51655457e9c083619f6, 116e031fa154eda28c56eb0a1a4a9c59, dc495478ecd5e2a551ab7472db64eb14, 3f47b1eeceaf8c487790fcc1aeca4f4f, 9a5df7b2a1042e65a20769f269571c0f, 580380188224c4501bc4954b8d8259f3, db16fbe83093bcf05461bcd7045cbbcb, 83a17e7b8746ef99c7dd78202d8d7979, 11f6545167bf29b5d98c0922d465e677, 7f4a3bd4dd620eb7d0aacba26770ca1, 1859f2c759c011fed542d508eba87d16, 4dea27091daf9b395b8d2b0859965ed8, d15f40ca3a50ba7211942756018bd290, 8444a509f17af056af923ea71fe425c, b7bc161ce9da87197a24b347e61a5131, 74c7d70b7dd11f8019b0bc3d4c1ebbe5, 4b5a0806a5f93a17a622f586b5e87bae, 48f8d9244e2205997689c16f67109de0, 7cfcb8d15b3c378183a337a4abfc935, 4579a1a36da3fd87f71ab1a7c224e855, 188687573ab70a4541db85f0c6e44de7, 351e6d34da1bc960cb21f85f7b7807b0, b7af07660eb7bad85f52f6ac167d51e4, 2e0696c7669d2b0137911d71ba96948a, c18e63e35ac82e4b379f6ad4e186a3d6, 1274928142bfa02222d80053b9e40816, 7f2cf22ca827e3e693b675999cafa1c5, 1c2ac13a98ff917559a6b24e675da44f, 5ded7b412c711c363fe5e30b6c45786e, d81168ca0cdb074d23fb122f1e9a91f0, fe6686f28b6aa45081e5a6320f554651, 642e1290498c97a8ae9ec1abceb0a98d, aae9b37d25e08158981750dd1ebf4edc, 33607d14c5f567f4951f377c0e7a9b01, c1ab12bd4fe30fbae9ce98eb2266fe0d, 11ce09682a8ec007508760d133ee2df3, 3ae94159c6c09889b9fb90d9c6a7f814, 649a5c4b6978e34eef11ab1f67d1900d, 7bd0889452392b014cc61d636eee3c20, b2cbfecccbdd6efa2c4cff7854db0127, 9b1d3ea4a20fa24fd1c899ce9e5804c4, eade620c8656c9f017817733cb3a849f, 646ead77d99f0a7aadf87326e8965917, 7c5d0833f6a092171c3a8854893b38e4, 5e469c9fdf01ef8e3b8df4b557f58340, 5f96a41a27521563cf466039e931f20d, 5dc6c276b32e53eb9e168ceca45ea3c2, f6c4933b1bde8e181cf0bab69e24e9e7, 2c969c7b1f3e3e20b88d0743d97ad03c, 4d634ac66dd3f9a5d20490014f9297dc, 22468bc1d911d2f92b7a5bcf3106ede1, 93f753ac4697a2ea918daf2d504d4f71, 414aeded37d8fbcd2f582817a438057c, 60276ea874ec3a89702c54b8af92e414, 87a5e3abef84d1ec19650b9acc56ca43, 98684be36166c84cd7ad6007d88e633e, b7d459be28461395f9802143e481ba63, 136ee66eaf49f774a8c7aafe1b212455, db4fb95db144e966c5b5979294b24286, 23dc40c0d7e8e91ab18d8f101e1ddcb7, df7c22c43d3dce9eef869bb8dc068484, e4a9a531cd7d97080d1fdfc468377ed5, a624e25264e6c576204c999c19806ba5, 813bcee828006bcab81a752830fb4407, a8562936a197eda6a70ab543bacd2807, 28591cbe9dab0450f9885628fc629782, a73766f43721613a7fc2b37e7f57a267, bec92491a634f7287d44c0085ca9d7f4, 938bba3f1cae413a8f766d00bf36071c, 4a0f72c4cd36667f82331bc02d2bc338, f4a81b5afbd3602cbb0304f02659a85c, 8a6d78cf1cdb334338465c78ab75b63f, 7fe91b44da316a70e139b3466a172ea, 37d68225f81ce68b7dd56ca6203120ab, a4f95cd34e5d00fd920ef47a392ae310, 261e3e2bba595e3e11db13181df34106, 7eb4bdcdad404b4f0f675795ac0d2c5c, 9e7dd8f8c518f552136f535b742a771, 73590a6a3efb4b2c66ae4d1fdb7a92cb, 6722e282e97165fc63021f5e14dde76a, 1f1727881db754432e2be812d8b2c0c0, bf8ee3dc02155a1fd695ec8ac64fb4ca, cc1ca4e1c66018e453fa483fc77a631c, c1575f41cb9f3fcdf7d1d9a3b9d08a65, 2f2da3dafd0fc5e32f328897beb5ec2f, 60f2480d8c77a3d8cb4f93e21b233eb7, cf0d1d2fa0d483fbe58389466b11a2e3, 4f611707ebb43c81e1465d802695bb02, 73aa2c1507815bb54b9a1cc22d2e7752, a4c86ef607ab43b277fde5bdcc600dc9, 9f2ccbfcf2d645353a20c5f8f61b22fd, 9fc3ae962745fe463e808a8172b7655, f831eec70007645015b47c082548951a, 9abab7983bb28a1e58cc57466f003ec2, 7230988a1c12a652c9e5ca1961a667f9, b1812a80a5e0303417dee42f3820fcf3, 5756b4eee465025ace639011b5d021d0, 3a1301e21ee3be9762fe8db4d0fc4982, 61c83e7a913d764ef27bd1284fa2226e, dfd2167d10d5f26a9ec66380c5e678a1, c5e6dd4d88d59e1d268e48ab1619776c, 35d49edf0fa3141eb9d8ce573cdf513c, cfb268502070605d9978722b5e14f776, 549381626c7927b39f542976d380bb51, 688cd74e537118bae12e9781cb60dfd3, ee303b9642370bf24815fd2be0e7fb25, 72c98e936331d42da22311f59673760f, e8bdc28c213cede861382d223f34f711, c07da167d77d3d93ee4e3b9cec2c0d6e, 6ebbbffaaf376371385f2e645427a6ef, 4e234345f89e1f3ae215069a79ff9ea0, c84c3a4789d8370ea77c25cdfcb04f43, 16b64752ee8894639d5d695480ad3f04, f32ab3d66c4e66bc72e3ff0a26557cd4, 437490483b9a7607a6d87b772001f805, f71c3a0c26cba680e0e4df8c9e29cb51, 2906a719030cfe1d28526fc6214000a4, 5ec1706b618a8a6def60c24ba333c7ac, ff89c4bc94d9be630f5f82f4e3ca3c50, 62bf3d97b99ae339712fca85e4b6d9ea, 6d40ce6b06aab91cbfd133c7edf5f0c2, e349b3bf0177c0ea2bbdbe399f31dc43, 920506c9be1f9c95d921a910e4d7461b, 9ca06135b073289fc511d95c9352abff, e96bb454e3d4fd9c9b4ca18d2c5eb735, 2a52a523ae09f8b8be528878d46ff909, 663cb98ffb6389e2474e289f2376133c, cda7844d9bb20bc220dc0ce735bfca7f, 1fad52d16386718765731d6c17e2b9b3, dc79f67b045d6f6451717c0008daeb26, f04b1d32889e78828b27d7c22da3d93c, e7feef96f0c7e15db3d0280bc7406770, d7a952d266c85bc981399065bc8ea18e, aa0d568065a69059c726b3df3df2abf, 89bc6eeb28e9561e463dac589035402e, 8f7c192d1307cbdfca4ba51974370aa3, 7afb2b23c4cf87684246b50f9924b28, 8fb1e9d562cd9f732439e38cae0a3efb, da679f28336113cf9f87f31b2f00d14e, 9c07806a09f60731cddfe067a1adc7b3, 1dc32839fa5c1b931c43e26141e82673, d6b58ea0d95e4054be39eb9f11e02039, 2b35db78cc40326435e6d3e3a0d8c8c5, fe635f15cb4924524f0963353f2b90a8, a7b8aa387b4bb1628f8037b143914bb3, 2c9483f46983aaaff1e8f320456b3e4f, 5f0bbe0f47afb32638c519b38c269a79, 7e80287074ba2267acd81627b737d382, aa3e65565825836d90e132a1954edbbb, 529d6fb431bd4590f731e84d976bbc61, be5a9ccce93d4afc7eff7a853b495f45, 925295c2d79a8c844a9b639dbcda15f9, c042e0ad9a54025cd0640f9a943eb605, 5077dfaccff6b4e58a2a95bd96936afc, 7da4822b2e37db47a70f883ccdc15c0d, 907ab2396c24b471d12b8ad502d46ba9, ec2075e9cb43b7ac72270a49e9be61c6, 9bbcc55db9fe05366144e9d8cb1fc03, b071db048266ab15728d68247d3908c3, 291966b3ef5fb35a121ede3a4a3fd3dc, 1fa380522c0d17a634de3ca34eeaad55, 5067d217bf25ccf6a7e7a4c6a66a0ed7, 4f46eb4490d1eb098ed17e2e2805d948, d9bb6f692b9c9e2443f794688ef69ec8, d1dacd1bce1c7f485c39448360ffc634, 61a185b0d4dc19188095fc302b257068, e0d01dec08e00b5fa4d0ffed973cad6e, 20d59e5c56d50db9b07e7bebbcd0ac10, c61bf477d57be56a19895d8822c2d1c8, 80464fc6ee30741897ced797cd744e58, 5d2286a14f613201538489b7063fba71, db82d29d5e277a3f6bcbfcaef47ef3f4, b217f0fd7b29a27b6b94d9bf0b6e7fae, 73edb9d7014f4b0f4989e7792ab4222d, 32ad3b30fb18ec64c8dcb6bdeaada2a2, 580b3bcc90426f768fc16e4195ea37ab, 413c31ca8cc4b6f83122abccb65ed39f, a8ab059d1837663a57893727376ac4ac, cba7d247b332e8a648ceaff24d8f826, cabd7dedf5256607be2de61956e44a5a, a726283a4c68b37424eae2f11141f275, 2a0096e43aaa9c4760cff32bac9f47a1, 67a4dbe887324f648119a2334035f17e, b8b1239a34c603ba22645372c9f03f99, 34aafb1cb1bcee87cd3ea4dfaf4c2ad2, 15d64b0bd1e7c516f6c2d9fa2f3df7a4, de2f9a1bf38c61e3223552cc0fe94c87, b45c993faa3365d318d289694c7b86c8, 4113eb3800678b14baba6e6a3adb7960, a7179cc8822c4b05ea5f98df804d0617, ec6e40174a7916d8d39ab254cfe49e36, 6dc9d8357dde14cfb744fbf664141ed5, 87bff764af7674d274edc61fc0e47c18, 26c966b0548f8dd57c0e5701e8219601, 133978422945f7cd7d5c99fb62059d55, 68e68736f2c31d32572cb9b3e252214a, 8f803b5cd240f661a59618151ece385e, ea010897a8cc03861faf6b3fb8904643, e9c9852c46b0a775ca0b40962e78022e, 3025a4cb8e7834736ea52f424e353206, 5f0dbca5785069657b2ac4bf40cc2f85, 109e68e0b8692358c7accc793e447162, 26cc6a6d5c2892240f898cc5bac298ab, f3692f04cac484bbfedd80255525b800, b61467ab62aa7110d25fcb46a1b8587e, 122a7578bc127334c2dd0c19ef86f5bf, f399762b21544559d127b5d81e04e8d7, 8f47b08c96ea5ec99b6e9b6038bbddca, c48f182ad2f99d3147bebd7fe079f8ca, 31d97ece40254d02daa7a49e51c0b207, 6292ff69eec5e3e7736b10d64d022578, d59d532eb935c005679dc3e6f8ff52af, cef1f73f0b6614ab18c211c72a2c6708, 29218cf9fb857650d2def28896231eb1, 5e3ef856c3a06d77794ebb04bdba5200, 68fe60c6af2b57c66a8382f8c2488382, 5cf42ebe8d013fdb4e075ca20cbfd6e4, c9e9a980dc01e37a891bd6f47274a1de, e15e5c02a3c061f598c89e3d5877741e, b55975d2d9156e5c8034fa64a76f3690, d7d12cf62af9b5f726051ccdf03c5b1b, abd9f3eec60ef7d29b8940ecf704177a, b1510385c9bd591aedc3cd35d84ab866, 85bf6435af28d5da6072d5e381aeaa42, 5925f34ddd89d50efcecc00a288201ae, ca2361af5e0097c6ef913d579c0c3de3, d810b08a7d6d19434951cfcb81b11a5f, b822e9547de9fe8ac8ed389e8d3a4455, 4a44e06de6d717967b750ebc7b0314a9, b4512e1b26b86723c56ac76dc53247b0, d9b2138159d196e13d965e7b3615aab7, 4309351d4bf3c1b7ba3d0093ea3f6ab0, 67438e28134e4f9a2516f2dc74590372, 857d1029f2f21b5317eba1564153bc53, a0a7b7a569df07d858cf6daad7d25032, 1ca794d03ce5b0935afcf804b32bf206, 972e3c662b9961875941b1777f80cd02, c8abb96789e268ae51943dd4c17a38f8, fb4aaed99ba8bcb112f5576935347901, 56e81bb208f0f7220e1d71033cc27d5a, ee3224c835991074a1f10da6e925d2c6, 530be1192a10f6c746dfbf9c0bb045cb, bb8768dbf6296a729303e1f359ac1efd, 516e2146efe807bcbd8939048db367db, bd685bfd7fa57038fda051c599062984, 79ca998328e29afbe6b7df57cde8ed40, a8c27c71a7fef7ff43b861330caa0ba6, 5c03a4d33dd1545f123a2797b0f5a09, 1894da94501cc9b0f4bf4a11104c7a08, f2d96a72961ef1dad353cc576b11acf9, fe34b74c1197dc596bee746cdafe2245, b1fb51131a3025da4e96e332ed63c0ed, 5a0a6205a353975fffec177234bdd33a, d2b61f1376879275659346e5cdd83a13, b35fb54ed1388a2a27add01ef0c8ea29, e9ae39fe8e15f463d6eb91b81442d671, 89dd2cdf643028fb348c4bf3bae0d860, d2f7320c0835a8afd80bc5b530a5816f, 2863466a0c773dd4de1fabed6a0cd234, b0585723844f158bc144614a42685b4e, 29f219d49956f830ad0a1172e14f283d, c676139ed635cbceba572de6f7290a8d, a9c35c1a49f58a224e248d6417a32dff, 44406701ab23f8af2b5dd15646441756, 3022898e383f32f48ee140a44427dd42, 90e3851b4fc54d291b89d5d732b4ed0b, a9c9a1b160e587eeee5b216e41d5366b, 1ef8a3f0b2c9558ff6103366f10106ff, 3b4af4b16ba3d79583c6bc97dfe210a7, 411565ac51837a5228ecdcbff390c455, 519d9a1815ae4bf047d7f05fef74f958, eec1fb1d5dc5d4c9b501765a3eeda531, 867cac263cfdeaa0832248c12deeb744, b5b079c2547adc352da5b6db0e68ab7b, d86d216211b3daaf3be2e75f5b13fe98, d7920458368b31cfdee5dafc92e10539, c5463d71989a1aed8dba03374892e117, 317a2df2cccbe96435050535646dfa16, 2294a3865a28efac436ee15fc69f1d02, a61b28c36d50bb107f3630239dccd146, 766989a9a768a1170c3362f15c692aa6, b4bd6d7210d83fd242832dbd5c239e4, 170020d2cd373be542e05fc0e16425cc, 7c1f6e693ccbe4e768668379deed1c8a, ad6f6a4316c3f5790e4dc319144be503, 4ed1c766d1ffa572728ded2ec1b6aae2, da8e614d92640399c89236ada6d198d2, 132a318162a7fdbc1bed3ad42a39b66a, 5b0ff4f16f4a7136dd54fd08b73c2d83, c4af6be47f495f334d73f2f0666a5f99, e570aa3c6ccd3f0f9075c3389f81c768, 65fa1f39100a1af90f77b9e15fd0bdc4, bd33edddc7dfa9058390b3a0859da9ca, 4ea02a5a169ec38387d7a8613c741bbc, 587723bb5f0eb4d6d44bdd6bb19ca220, 8c3630a2418a8f5472614b472a68ab8b, 1c906bbcc4c401a4c0a839ff20ad7e9b, 6cd5a28713ed30c574a982b5b8da1493, 1f3bdcb3a7e27bcf43807106d1f16da6, 5cf4064fed4cc125bc2b7d6d8c5e2194, da55ce52973ef6be79b7ad261aa26d3e, a091e1a60c218f407778bea42627fd06, 2c2fc6bfe660d0664c3f70ab94bd5e28, 7b0ff88966a3c44784c858ef302a8ce8, 36359b0444b94bf4fdda58fb9a083d3a, 349314578001623267fa2f4845618869, c7b6c67626045c66b346ec63527ce9f6, 88bf6257ad2361541ba71e6aad077580, f42c4d1df6187f5c320216b5ee75b71c, ace317424c9c082b953d76143d637a90, 1d4e6fbe062b2fe2097572ad7aa9f449, d63eb5abb33c78e41d8fcfb06fe2e8ac, 1ee4c494f513a7411f99be3de1ed28e7, 6d62ac855a08a2beac2f2c355203c343, be3c43801dab5bdb9dc40049a97712c4, d62f14fadb8b5e7c85fa626dfe41bbc6, b6cd69932dbd736542c7e139b51424ef, d186f51e49c5c800942dc5739f230b5, 2a17c4c8cab346a4460c1da869acb302, 30325e1718638d05e84fa54a0e8c3fd6, 4b2b7794960087339a26084f0b513c02, 1a010490511a822519345ebf8bc96ba9, 62531896dccad175df02db717aec36be, a7ae58caeced79e8d2087bc72b7d38ce, 50a35dbc36b83bc71028be307836777e, 7cb0841ed0aead460f8744b35b1cbc05, c4ec57925e7d030e016a14046b4853fb, 77085f06a321d23f9fa243bf318ff72f, f7c4461d5a6c4511d3bf32c29366e959, 9da6551ccba39c550341ebe06ca21ba3, 25b7ebb958f6e890b82d3462e871740c, 20ee8f85d8a8b8e6b025495e3135c551, 19c57e7df943c4f4b0813480a1c4f937, b05e3483c555e5fd3651631e2148f63, 977b764d78d97a182a8a04c1393ffb9f, eff2e43b2b94f2401327176a35c2d660, 9db064bd20c8b2d2daf2a2b0faa5f1bd, b0f0f6c745f78c3aa316a98c014c72c8, ee71da5c91398b2a9f5d056b01d8520, 95267f002b2084023d670624fbcccf01, 7e7b1b335bb7cc62ee83d3a3d91f6f46, c0808501474c4d752294c7093aed7b71, 61420c7c2724c7e6f27f2e6dc212cb38, 7fefa38843229dea0d1d4145cdaee966, 330e98d2cdc8bb151e7810dcb0cecdf0, bc0065e6da8eef13866cf970aab97217, d90ba703f2d9520d362041c625bc1c44, eda970abfa3a591d616b8da7772ddd9, e2e955da4065dda781cf9c1e36748c13, e2f4414f2b2c93c61f9fed7516a93b57, 434194a071f584f763e92b3bcfa733f1, cea3d1572df0b08b62bfd8c4387d9da4, 7895da6bf0465a3d3c4cb97f1873d313, 4777a706727015164b67647366c0fb7, 31ec3e68631b4a25eb73f2e5125e2413, dafacdce70739801604cb5d604a40baa, 43e170b35e05885e6f8f44569e1ddc51, 871a7014552767a38dd15875309d28f7, f6c2d8c7d8edfd2bb64f199e021090b6, e2f0389794a99aafc346ef49b879c41f, 61406e88a0fb8c34d2807df236d3fd6f, b33e82a3076efb81966a0dae4e38e608, fb91e1bcfa5add4374448d21a629bf2, 2efdf27235eff8bf4f5a49b31815bb96, 78d7fe6d5c218b33c90efe6eff79563a, 1cc3e879b1cda5eb0ffdc1de2e9bf099, ac7251a8a32f125076f2a2b682ab9636, b04e3cccc7d3dc0a40b2f099711eb861, 3947cbc5a253dd32cd054f8eef137c33, 53c7298c3ad6adc13c7f66059247684e, 95df46d991397fa3fb666e6f10be620a, fdee7e9905272682261745e664734ab6, 8487d36f2ac894468d2adea6a1dadfc5, 422883e3966f70929260508c571ace34, abb2c90f2134fd1064b6bc25562d55c0)

## BEGIN_GRAPH
HloModule IrToHlo.3918, entry_computation_layout={(f32[], f32[], f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=5*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=10*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=15*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=20*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=25*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=30*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=35*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=40*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=45*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=50*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=55*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=60*/f32[1024]{0}, f32[1024]{0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=65*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=70*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=75*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=80*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=85*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=90*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=95*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=100*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=105*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=110*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=115*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=120*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=125*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=130*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=135*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=140*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=145*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=150*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=155*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=160*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=165*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=170*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=175*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=180*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=185*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=190*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=195*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=200*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=205*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=210*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=215*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=220*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=225*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=230*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=235*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=240*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=245*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=250*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=255*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=260*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=265*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=270*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, s64[16,512]{1,0}, f32[8192,1024]{1,0}, f32[1024]{0}, /*index=275*/f32[8192,1024]{1,0}, f32[], f32[], f32[], s64[], /*index=280*/f32[])->(f32[1024,8192]{1,0}, f32[8192,1024]{0,1}, f32[1,1,1024]{2,1,0}, f32[1024]{0}, f32[30,1024,1024]{2,1,0}, /*index=5*/f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=10*/f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=15*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=20*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=25*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=30*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=35*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=40*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=45*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=50*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=55*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=60*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=65*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=70*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=75*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=80*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=85*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=90*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=95*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=100*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=105*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=110*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=115*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=120*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=125*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=130*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=135*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=140*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=145*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=150*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=155*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=160*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=165*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=170*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=175*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=180*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=185*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=190*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=195*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=200*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=205*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=210*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=215*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=220*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=225*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=230*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=235*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=240*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=245*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=250*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=255*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=260*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=265*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=270*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=275*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=280*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[8192,1024]{1,0}, f32[8192,1024]{1,0}, /*index=285*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=290*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=295*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=300*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=305*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=310*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=315*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=320*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=325*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=330*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=335*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=340*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=345*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=350*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=355*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=360*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=365*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=370*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=375*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=380*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=385*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=390*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=395*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=400*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=405*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=410*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=415*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=420*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=425*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=430*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=435*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=440*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=445*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=450*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=455*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=460*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=465*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=470*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=475*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=480*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=485*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=490*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=495*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=500*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=505*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=510*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=515*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=520*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=525*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=530*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=535*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=540*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=545*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=550*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=555*/f32[1024]{0}, f32[8192,1024]{1,0})}

%AddComputation.718 (x.719: f32[], y.720: f32[]) -> f32[] {
  %x.719 = f32[] parameter(0)
  %y.720 = f32[] parameter(1)
  ROOT %add.721 = f32[] add(f32[] %x.719, f32[] %y.720)
}

%MaxComputation.722 (x.723: f32[], y.724: f32[]) -> f32[] {
  %x.723 = f32[] parameter(0)
  %y.724 = f32[] parameter(1)
  ROOT %maximum.725 = f32[] maximum(f32[] %x.723, f32[] %y.724)
}

%AddComputation.726 (x.727: f32[], y.728: f32[]) -> f32[] {
  %x.727 = f32[] parameter(0)
  %y.728 = f32[] parameter(1)
  ROOT %add.729 = f32[] add(f32[] %x.727, f32[] %y.728)
}

%AddComputation.730 (x.731: f32[], y.732: f32[]) -> f32[] {
  %x.731 = f32[] parameter(0)
  %y.732 = f32[] parameter(1)
  ROOT %add.733 = f32[] add(f32[] %x.731, f32[] %y.732)
}

%FnComputation.734 (p0.736: f32[1024,4096], p1.738: f32[4096,1024], p2.741: f32[], p3.744: f32[1024,1024], p4.746: f32[512,1024], p5.750: f32[16,512,1024], p6.774: f32[1024], p7.795: f32[], p8.796: f32[512,1024], p9.816: f32[1024,1024], p10.881: f32[1024], p11.887: f32[4096,1024]) -> (f32[16,512,1024], f32[16,512,1024], f32[1024], f32[1024], f32[16,512,1], /*index=5*/f32[16,512,1024], f32[1024,1024], f32[8192,1024], f32[1024,512], f32[8192,1024], /*index=10*/f32[1024,512], f32[8192,1024], f32[128,512,128], f32[128,128,512], f32[16,8,512,512], /*index=15*/f32[128,512,512], f32[128,512,128], f32[1024,1024], f32[8192,1024], f32[16,512,1024], /*index=20*/f32[16,512,1], f32[16,512,1024], f32[1024,4096], f32[8192,1024], f32[16,512,4096], /*index=25*/f32[1024,4096], f32[8192,1024], f32[16,512,4096], f32[16,512,4096], f32[4096,1024], /*index=30*/f32[8192,4096]) {
  %p5.750 = f32[16,512,1024]{2,1,0} parameter(5)
  %p6.774 = f32[1024]{0} parameter(6)
  %broadcast.775 = f32[16,512,1024]{2,1,0} broadcast(f32[1024]{0} %p6.774), dimensions={2}
  %constant.749 = f32[] constant(2)
  %broadcast.751 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.749), dimensions={}
  %power.752 = f32[16,512,1024]{2,1,0} power(f32[16,512,1024]{2,1,0} %p5.750, f32[16,512,1024]{2,1,0} %broadcast.751)
  %constant.753 = f32[] constant(0)
  %reduce.755 = f32[16,512]{1,0} reduce(f32[16,512,1024]{2,1,0} %power.752, f32[] %constant.753), dimensions={2}, to_apply=%AddComputation.718
  %constant.754 = s32[] constant(1024)
  %constant.756 = s32[] constant(0)
  %compare.761 = pred[] compare(s32[] %constant.754, s32[] %constant.756), direction=NE
  %constant.757 = f32[] constant(1)
  %convert.759 = f32[] convert(s32[] %constant.754)
  %divide.760 = f32[] divide(f32[] %constant.757, f32[] %convert.759)
  %constant.758 = f32[] constant(nan)
  %select.762 = f32[] select(pred[] %compare.761, f32[] %divide.760, f32[] %constant.758)
  %broadcast.763 = f32[16,512]{1,0} broadcast(f32[] %select.762), dimensions={}
  %multiply.764 = f32[16,512]{1,0} multiply(f32[16,512]{1,0} %reduce.755, f32[16,512]{1,0} %broadcast.763)
  %reshape.765 = f32[16,512,1]{2,1,0} reshape(f32[16,512]{1,0} %multiply.764)
  %convert.766 = f32[16,512,1]{2,1,0} convert(f32[16,512,1]{2,1,0} %reshape.765)
  %p2.741 = f32[] parameter(2)
  %constant.748 = f32[] constant(1)
  %multiply.767 = f32[] multiply(f32[] %p2.741, f32[] %constant.748)
  %broadcast.768 = f32[16,512,1]{2,1,0} broadcast(f32[] %multiply.767), dimensions={}
  %add.769 = f32[16,512,1]{2,1,0} add(f32[16,512,1]{2,1,0} %convert.766, f32[16,512,1]{2,1,0} %broadcast.768)
  %rsqrt.770 = f32[16,512,1]{2,1,0} rsqrt(f32[16,512,1]{2,1,0} %add.769)
  %reshape.771 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %rsqrt.770)
  %broadcast.772 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.771), dimensions={0,1}
  %multiply.773 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %p5.750, f32[16,512,1024]{2,1,0} %broadcast.772)
  %multiply.776 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %broadcast.775, f32[16,512,1024]{2,1,0} %multiply.773)
  %reshape.818 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %multiply.776)
  %p9.816 = f32[1024,1024]{1,0} parameter(9)
  %transpose.817 = f32[1024,1024]{0,1} transpose(f32[1024,1024]{1,0} %p9.816), dimensions={1,0}
  %dot.819 = f32[8192,1024]{1,0} dot(f32[8192,1024]{1,0} %reshape.818, f32[1024,1024]{0,1} %transpose.817), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.820 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.819)
  %reshape.821 = f32[16,512,8,128]{3,2,1,0} reshape(f32[16,512,1024]{2,1,0} %reshape.820)
  %transpose.822 = f32[16,8,512,128]{3,1,2,0} transpose(f32[16,512,8,128]{3,2,1,0} %reshape.821), dimensions={0,2,1,3}
  %reshape.823 = f32[16,8,512,128,1]{4,3,2,1,0} reshape(f32[16,8,512,128]{3,1,2,0} %transpose.822)
  %transpose.824 = f32[16,8,512,1,128]{3,4,2,1,0} transpose(f32[16,8,512,128,1]{4,3,2,1,0} %reshape.823), dimensions={0,1,2,4,3}
  %transpose.825 = f32[16,8,512,128,1]{4,3,2,1,0} transpose(f32[16,8,512,1,128]{3,4,2,1,0} %transpose.824), dimensions={0,1,2,4,3}
  %reshape.826 = f32[128,512,128]{2,1,0} reshape(f32[16,8,512,128,1]{4,3,2,1,0} %transpose.825)
  %reshape.798 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %multiply.776)
  %p8.796 = f32[512,1024]{1,0} parameter(8)
  %transpose.797 = f32[1024,512]{0,1} transpose(f32[512,1024]{1,0} %p8.796), dimensions={1,0}
  %dot.799 = f32[8192,512]{1,0} dot(f32[8192,1024]{1,0} %reshape.798, f32[1024,512]{0,1} %transpose.797), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.800 = f32[16,512,512]{2,1,0} reshape(f32[8192,512]{1,0} %dot.799)
  %reshape.801 = f32[16,512,4,128]{3,2,1,0} reshape(f32[16,512,512]{2,1,0} %reshape.800)
  %transpose.802 = f32[16,4,512,128]{3,1,2,0} transpose(f32[16,512,4,128]{3,2,1,0} %reshape.801), dimensions={0,2,1,3}
  %slice.803 = f32[16,4,512,128]{3,2,1,0} slice(f32[16,4,512,128]{3,1,2,0} %transpose.802), slice={[0:16], [0:4], [0:512], [0:128]}
  %slice.804 = f32[16,4,512,128]{3,2,1,0} slice(f32[16,4,512,128]{3,2,1,0} %slice.803), slice={[0:16], [0:4], [0:512], [0:128]}
  %reshape.805 = f32[16,4,1,512,128]{4,3,2,1,0} reshape(f32[16,4,512,128]{3,2,1,0} %slice.804)
  %slice.806 = f32[16,4,1,512,128]{4,3,2,1,0} slice(f32[16,4,1,512,128]{4,3,2,1,0} %reshape.805), slice={[0:16], [0:4], [0:1], [0:512], [0:128]}
  %slice.807 = f32[16,4,1,512,128]{4,3,2,1,0} slice(f32[16,4,1,512,128]{4,3,2,1,0} %slice.806), slice={[0:16], [0:4], [0:1], [0:512], [0:128]}
  %broadcast.808 = f32[16,4,1,512,128]{4,3,2,1,0} broadcast(f32[16,4,1,512,128]{4,3,2,1,0} %slice.807), dimensions={0,1,2,3,4}
  %reshape.809 = f32[16,4,512,128]{3,2,1,0} reshape(f32[16,4,1,512,128]{4,3,2,1,0} %broadcast.808)
  %broadcast.810 = f32[16,4,2,512,128]{4,3,2,1,0} broadcast(f32[16,4,512,128]{3,2,1,0} %reshape.809), dimensions={0,1,3,4}
  %reshape.811 = f32[16,8,512,128]{3,2,1,0} reshape(f32[16,4,2,512,128]{4,3,2,1,0} %broadcast.810)
  %reshape.812 = f32[16,8,512,128,1]{4,3,2,1,0} reshape(f32[16,8,512,128]{3,2,1,0} %reshape.811)
  %transpose.813 = f32[16,8,1,512,128]{2,4,3,1,0} transpose(f32[16,8,512,128,1]{4,3,2,1,0} %reshape.812), dimensions={0,1,4,2,3}
  %transpose.814 = f32[16,8,128,512,1]{4,2,3,1,0} transpose(f32[16,8,1,512,128]{2,4,3,1,0} %transpose.813), dimensions={0,1,4,3,2}
  %reshape.815 = f32[128,128,512]{2,1,0} reshape(f32[16,8,128,512,1]{4,2,3,1,0} %transpose.814)
  %dot.827 = f32[128,512,512]{2,1,0} dot(f32[128,512,128]{2,1,0} %reshape.826, f32[128,128,512]{2,1,0} %reshape.815), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.828 = f32[16,8,512,1,512]{4,3,2,1,0} reshape(f32[128,512,512]{2,1,0} %dot.827)
  %transpose.829 = f32[16,8,512,512,1]{3,4,2,1,0} transpose(f32[16,8,512,1,512]{4,3,2,1,0} %reshape.828), dimensions={0,1,2,4,3}
  %reshape.830 = f32[16,8,512,512]{3,2,1,0} reshape(f32[16,8,512,512,1]{3,4,2,1,0} %transpose.829)
  %p7.795 = f32[] parameter(7)
  %broadcast.831 = f32[16,8,512,512]{3,2,1,0} broadcast(f32[] %p7.795), dimensions={}
  %divide.832 = f32[16,8,512,512]{3,2,1,0} divide(f32[16,8,512,512]{3,2,1,0} %reshape.830, f32[16,8,512,512]{3,2,1,0} %broadcast.831)
  %constant.833 = f32[] constant(-inf)
  %reduce.834 = f32[16,8,512]{2,1,0} reduce(f32[16,8,512,512]{3,2,1,0} %divide.832, f32[] %constant.833), dimensions={3}, to_apply=%MaxComputation.722
  %broadcast.835 = f32[16,8,512,512]{3,2,1,0} broadcast(f32[16,8,512]{2,1,0} %reduce.834), dimensions={0,1,2}
  %subtract.836 = f32[16,8,512,512]{3,2,1,0} subtract(f32[16,8,512,512]{3,2,1,0} %divide.832, f32[16,8,512,512]{3,2,1,0} %broadcast.835)
  %exponential.837 = f32[16,8,512,512]{3,2,1,0} exponential(f32[16,8,512,512]{3,2,1,0} %subtract.836)
  %constant.838 = f32[] constant(0)
  %reduce.839 = f32[16,8,512]{2,1,0} reduce(f32[16,8,512,512]{3,2,1,0} %exponential.837, f32[] %constant.838), dimensions={3}, to_apply=%AddComputation.726
  %broadcast.840 = f32[16,8,512,512]{3,2,1,0} broadcast(f32[16,8,512]{2,1,0} %reduce.839), dimensions={0,1,2}
  %divide.841 = f32[16,8,512,512]{3,2,1,0} divide(f32[16,8,512,512]{3,2,1,0} %exponential.837, f32[16,8,512,512]{3,2,1,0} %broadcast.840)
  %reshape.842 = f32[16,8,512,512,1]{4,3,2,1,0} reshape(f32[16,8,512,512]{3,2,1,0} %divide.841)
  %transpose.843 = f32[16,8,512,1,512]{3,4,2,1,0} transpose(f32[16,8,512,512,1]{4,3,2,1,0} %reshape.842), dimensions={0,1,2,4,3}
  %transpose.844 = f32[16,8,512,512,1]{4,3,2,1,0} transpose(f32[16,8,512,1,512]{3,4,2,1,0} %transpose.843), dimensions={0,1,2,4,3}
  %reshape.845 = f32[128,512,512]{2,1,0} reshape(f32[16,8,512,512,1]{4,3,2,1,0} %transpose.844)
  %reshape.777 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %multiply.776)
  %p4.746 = f32[512,1024]{1,0} parameter(4)
  %transpose.747 = f32[1024,512]{0,1} transpose(f32[512,1024]{1,0} %p4.746), dimensions={1,0}
  %dot.778 = f32[8192,512]{1,0} dot(f32[8192,1024]{1,0} %reshape.777, f32[1024,512]{0,1} %transpose.747), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.779 = f32[16,512,512]{2,1,0} reshape(f32[8192,512]{1,0} %dot.778)
  %reshape.780 = f32[16,512,4,128]{3,2,1,0} reshape(f32[16,512,512]{2,1,0} %reshape.779)
  %transpose.781 = f32[16,4,512,128]{3,1,2,0} transpose(f32[16,512,4,128]{3,2,1,0} %reshape.780), dimensions={0,2,1,3}
  %slice.782 = f32[16,4,512,128]{3,2,1,0} slice(f32[16,4,512,128]{3,1,2,0} %transpose.781), slice={[0:16], [0:4], [0:512], [0:128]}
  %slice.783 = f32[16,4,512,128]{3,2,1,0} slice(f32[16,4,512,128]{3,2,1,0} %slice.782), slice={[0:16], [0:4], [0:512], [0:128]}
  %reshape.784 = f32[16,4,1,512,128]{4,3,2,1,0} reshape(f32[16,4,512,128]{3,2,1,0} %slice.783)
  %slice.785 = f32[16,4,1,512,128]{4,3,2,1,0} slice(f32[16,4,1,512,128]{4,3,2,1,0} %reshape.784), slice={[0:16], [0:4], [0:1], [0:512], [0:128]}
  %slice.786 = f32[16,4,1,512,128]{4,3,2,1,0} slice(f32[16,4,1,512,128]{4,3,2,1,0} %slice.785), slice={[0:16], [0:4], [0:1], [0:512], [0:128]}
  %broadcast.787 = f32[16,4,1,512,128]{4,3,2,1,0} broadcast(f32[16,4,1,512,128]{4,3,2,1,0} %slice.786), dimensions={0,1,2,3,4}
  %reshape.788 = f32[16,4,512,128]{3,2,1,0} reshape(f32[16,4,1,512,128]{4,3,2,1,0} %broadcast.787)
  %broadcast.789 = f32[16,4,2,512,128]{4,3,2,1,0} broadcast(f32[16,4,512,128]{3,2,1,0} %reshape.788), dimensions={0,1,3,4}
  %reshape.790 = f32[16,8,512,128]{3,2,1,0} reshape(f32[16,4,2,512,128]{4,3,2,1,0} %broadcast.789)
  %reshape.791 = f32[16,8,512,128,1]{4,3,2,1,0} reshape(f32[16,8,512,128]{3,2,1,0} %reshape.790)
  %transpose.792 = f32[16,8,1,128,512]{2,3,4,1,0} transpose(f32[16,8,512,128,1]{4,3,2,1,0} %reshape.791), dimensions={0,1,4,3,2}
  %transpose.793 = f32[16,8,512,128,1]{4,3,2,1,0} transpose(f32[16,8,1,128,512]{2,3,4,1,0} %transpose.792), dimensions={0,1,4,3,2}
  %reshape.794 = f32[128,512,128]{2,1,0} reshape(f32[16,8,512,128,1]{4,3,2,1,0} %transpose.793)
  %dot.846 = f32[128,512,128]{2,1,0} dot(f32[128,512,512]{2,1,0} %reshape.845, f32[128,512,128]{2,1,0} %reshape.794), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.847 = f32[16,8,512,1,128]{4,3,2,1,0} reshape(f32[128,512,128]{2,1,0} %dot.846)
  %transpose.848 = f32[16,8,512,128,1]{3,4,2,1,0} transpose(f32[16,8,512,1,128]{4,3,2,1,0} %reshape.847), dimensions={0,1,2,4,3}
  %reshape.849 = f32[16,8,512,128]{3,2,1,0} reshape(f32[16,8,512,128,1]{3,4,2,1,0} %transpose.848)
  %transpose.850 = f32[16,512,8,128]{3,1,2,0} transpose(f32[16,8,512,128]{3,2,1,0} %reshape.849), dimensions={0,2,1,3}
  %reshape.851 = f32[16,512,1024]{2,1,0} reshape(f32[16,512,8,128]{3,1,2,0} %transpose.850)
  %reshape.852 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %reshape.851)
  %p3.744 = f32[1024,1024]{1,0} parameter(3)
  %transpose.745 = f32[1024,1024]{0,1} transpose(f32[1024,1024]{1,0} %p3.744), dimensions={1,0}
  %dot.853 = f32[8192,1024]{1,0} dot(f32[8192,1024]{1,0} %reshape.852, f32[1024,1024]{0,1} %transpose.745), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.854 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.853)
  %constant.743 = f32[] constant(1)
  %broadcast.855 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.743), dimensions={}
  %multiply.856 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.854, f32[16,512,1024]{2,1,0} %broadcast.855)
  %add.857 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %p5.750, f32[16,512,1024]{2,1,0} %multiply.856)
  %p10.881 = f32[1024]{0} parameter(10)
  %broadcast.882 = f32[16,512,1024]{2,1,0} broadcast(f32[1024]{0} %p10.881), dimensions={2}
  %constant.742 = f32[] constant(2)
  %broadcast.858 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.742), dimensions={}
  %power.859 = f32[16,512,1024]{2,1,0} power(f32[16,512,1024]{2,1,0} %add.857, f32[16,512,1024]{2,1,0} %broadcast.858)
  %constant.860 = f32[] constant(0)
  %reduce.862 = f32[16,512]{1,0} reduce(f32[16,512,1024]{2,1,0} %power.859, f32[] %constant.860), dimensions={2}, to_apply=%AddComputation.730
  %constant.861 = s32[] constant(1024)
  %constant.863 = s32[] constant(0)
  %compare.868 = pred[] compare(s32[] %constant.861, s32[] %constant.863), direction=NE
  %constant.864 = f32[] constant(1)
  %convert.866 = f32[] convert(s32[] %constant.861)
  %divide.867 = f32[] divide(f32[] %constant.864, f32[] %convert.866)
  %constant.865 = f32[] constant(nan)
  %select.869 = f32[] select(pred[] %compare.868, f32[] %divide.867, f32[] %constant.865)
  %broadcast.870 = f32[16,512]{1,0} broadcast(f32[] %select.869), dimensions={}
  %multiply.871 = f32[16,512]{1,0} multiply(f32[16,512]{1,0} %reduce.862, f32[16,512]{1,0} %broadcast.870)
  %reshape.872 = f32[16,512,1]{2,1,0} reshape(f32[16,512]{1,0} %multiply.871)
  %convert.873 = f32[16,512,1]{2,1,0} convert(f32[16,512,1]{2,1,0} %reshape.872)
  %constant.740 = f32[] constant(1)
  %multiply.874 = f32[] multiply(f32[] %p2.741, f32[] %constant.740)
  %broadcast.875 = f32[16,512,1]{2,1,0} broadcast(f32[] %multiply.874), dimensions={}
  %add.876 = f32[16,512,1]{2,1,0} add(f32[16,512,1]{2,1,0} %convert.873, f32[16,512,1]{2,1,0} %broadcast.875)
  %rsqrt.877 = f32[16,512,1]{2,1,0} rsqrt(f32[16,512,1]{2,1,0} %add.876)
  %reshape.878 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %rsqrt.877)
  %broadcast.879 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.878), dimensions={0,1}
  %multiply.880 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %add.857, f32[16,512,1024]{2,1,0} %broadcast.879)
  %multiply.883 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %broadcast.882, f32[16,512,1024]{2,1,0} %multiply.880)
  %reshape.889 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %multiply.883)
  %p11.887 = f32[4096,1024]{1,0} parameter(11)
  %transpose.888 = f32[1024,4096]{0,1} transpose(f32[4096,1024]{1,0} %p11.887), dimensions={1,0}
  %dot.890 = f32[8192,4096]{1,0} dot(f32[8192,1024]{1,0} %reshape.889, f32[1024,4096]{0,1} %transpose.888), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.891 = f32[16,512,4096]{2,1,0} reshape(f32[8192,4096]{1,0} %dot.890)
  %logistic.892 = f32[16,512,4096]{2,1,0} logistic(f32[16,512,4096]{2,1,0} %reshape.891)
  %multiply.893 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %reshape.891, f32[16,512,4096]{2,1,0} %logistic.892)
  %reshape.884 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %multiply.883)
  %p1.738 = f32[4096,1024]{1,0} parameter(1)
  %transpose.739 = f32[1024,4096]{0,1} transpose(f32[4096,1024]{1,0} %p1.738), dimensions={1,0}
  %dot.885 = f32[8192,4096]{1,0} dot(f32[8192,1024]{1,0} %reshape.884, f32[1024,4096]{0,1} %transpose.739), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.886 = f32[16,512,4096]{2,1,0} reshape(f32[8192,4096]{1,0} %dot.885)
  %multiply.894 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %multiply.893, f32[16,512,4096]{2,1,0} %reshape.886)
  %reshape.895 = f32[8192,4096]{1,0} reshape(f32[16,512,4096]{2,1,0} %multiply.894)
  %p0.736 = f32[1024,4096]{1,0} parameter(0)
  %transpose.737 = f32[4096,1024]{0,1} transpose(f32[1024,4096]{1,0} %p0.736), dimensions={1,0}
  %dot.896 = f32[8192,1024]{1,0} dot(f32[8192,4096]{1,0} %reshape.895, f32[4096,1024]{0,1} %transpose.737), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.897 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.896)
  %constant.735 = f32[] constant(1)
  %broadcast.898 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.735), dimensions={}
  %multiply.899 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.897, f32[16,512,1024]{2,1,0} %broadcast.898)
  %add.900 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %add.857, f32[16,512,1024]{2,1,0} %multiply.899)
  ROOT %tuple.901 = (f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) tuple(f32[16,512,1024]{2,1,0} %add.900, f32[16,512,1024]{2,1,0} %p5.750, f32[1024]{0} %p6.774, f32[1024]{0} %p10.881, f32[16,512,1]{2,1,0} %rsqrt.770, /*index=5*/f32[16,512,1024]{2,1,0} %multiply.773, f32[1024,1024]{0,1} %transpose.817, f32[8192,1024]{1,0} %reshape.818, f32[1024,512]{0,1} %transpose.797, f32[8192,1024]{1,0} %reshape.798, /*index=10*/f32[1024,512]{0,1} %transpose.747, f32[8192,1024]{1,0} %reshape.777, f32[128,512,128]{2,1,0} %reshape.826, f32[128,128,512]{2,1,0} %reshape.815, f32[16,8,512,512]{3,2,1,0} %divide.841, /*index=15*/f32[128,512,512]{2,1,0} %reshape.845, f32[128,512,128]{2,1,0} %reshape.794, f32[1024,1024]{0,1} %transpose.745, f32[8192,1024]{1,0} %reshape.852, f32[16,512,1024]{2,1,0} %add.857, /*index=20*/f32[16,512,1]{2,1,0} %rsqrt.877, f32[16,512,1024]{2,1,0} %multiply.880, f32[1024,4096]{0,1} %transpose.739, f32[8192,1024]{1,0} %reshape.884, f32[16,512,4096]{2,1,0} %reshape.886, /*index=25*/f32[1024,4096]{0,1} %transpose.888, f32[8192,1024]{1,0} %reshape.889, f32[16,512,4096]{2,1,0} %reshape.891, f32[16,512,4096]{2,1,0} %multiply.893, f32[4096,1024]{0,1} %transpose.737, /*index=30*/f32[8192,4096]{1,0} %reshape.895)
}

%Body.902 (p0.903: (s64[], f32[16,512,1024], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=5*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=10*/f32[30,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], f32[30,16,512,1], /*index=15*/f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], /*index=20*/f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], f32[30,16,8,512,512], /*index=25*/f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], f32[30,16,512,1024], /*index=30*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], /*index=35*/f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], f32[30,4096,1024], /*index=40*/f32[30,8192,4096], f32[], f32[])) -> (s64[], f32[16,512,1024], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=5*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=10*/f32[30,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], f32[30,16,512,1], /*index=15*/f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], /*index=20*/f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], f32[30,16,8,512,512], /*index=25*/f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], f32[30,16,512,1024], /*index=30*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], /*index=35*/f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], f32[30,4096,1024], /*index=40*/f32[30,8192,4096], f32[], f32[]) {
  %p0.903 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) parameter(0)
  %get-tuple-element.904 = s64[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=0
  %constant.1235 = s64[] constant(1)
  %add.1236 = s64[] add(s64[] %get-tuple-element.904, s64[] %constant.1235)
  %get-tuple-element.912 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=8
  %constant.983 = s64[] constant(0)
  %broadcast.984 = s64[] broadcast(s64[] %constant.983), dimensions={}
  %constant.985 = s64[] constant(0)
  %broadcast.986 = s64[] broadcast(s64[] %constant.985), dimensions={}
  %dynamic-slice.987 = f32[1,1024,4096]{2,1,0} dynamic-slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.912, s64[] %get-tuple-element.904, s64[] %broadcast.984, s64[] %broadcast.986), dynamic_slice_sizes={1,1024,4096}
  %reshape.988 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %dynamic-slice.987)
  %get-tuple-element.911 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=7
  %constant.977 = s64[] constant(0)
  %broadcast.978 = s64[] broadcast(s64[] %constant.977), dimensions={}
  %constant.979 = s64[] constant(0)
  %broadcast.980 = s64[] broadcast(s64[] %constant.979), dimensions={}
  %dynamic-slice.981 = f32[1,4096,1024]{2,1,0} dynamic-slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.911, s64[] %get-tuple-element.904, s64[] %broadcast.978, s64[] %broadcast.980), dynamic_slice_sizes={1,4096,1024}
  %reshape.982 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %dynamic-slice.981)
  %get-tuple-element.946 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=42
  %get-tuple-element.909 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=5
  %constant.965 = s64[] constant(0)
  %broadcast.966 = s64[] broadcast(s64[] %constant.965), dimensions={}
  %constant.967 = s64[] constant(0)
  %broadcast.968 = s64[] broadcast(s64[] %constant.967), dimensions={}
  %dynamic-slice.969 = f32[1,1024,1024]{2,1,0} dynamic-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.909, s64[] %get-tuple-element.904, s64[] %broadcast.966, s64[] %broadcast.968), dynamic_slice_sizes={1,1024,1024}
  %reshape.970 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %dynamic-slice.969)
  %get-tuple-element.908 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=4
  %constant.959 = s64[] constant(0)
  %broadcast.960 = s64[] broadcast(s64[] %constant.959), dimensions={}
  %constant.961 = s64[] constant(0)
  %broadcast.962 = s64[] broadcast(s64[] %constant.961), dimensions={}
  %dynamic-slice.963 = f32[1,512,1024]{2,1,0} dynamic-slice(f32[30,512,1024]{2,1,0} %get-tuple-element.908, s64[] %get-tuple-element.904, s64[] %broadcast.960, s64[] %broadcast.962), dynamic_slice_sizes={1,512,1024}
  %reshape.964 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %dynamic-slice.963)
  %get-tuple-element.905 = f32[16,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=1
  %get-tuple-element.913 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=9
  %constant.989 = s64[] constant(0)
  %broadcast.990 = s64[] broadcast(s64[] %constant.989), dimensions={}
  %dynamic-slice.991 = f32[1,1024]{1,0} dynamic-slice(f32[30,1024]{1,0} %get-tuple-element.913, s64[] %get-tuple-element.904, s64[] %broadcast.990), dynamic_slice_sizes={1,1024}
  %reshape.992 = f32[1024]{0} reshape(f32[1,1024]{1,0} %dynamic-slice.991)
  %get-tuple-element.945 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=41
  %get-tuple-element.907 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=3
  %constant.953 = s64[] constant(0)
  %broadcast.954 = s64[] broadcast(s64[] %constant.953), dimensions={}
  %constant.955 = s64[] constant(0)
  %broadcast.956 = s64[] broadcast(s64[] %constant.955), dimensions={}
  %dynamic-slice.957 = f32[1,512,1024]{2,1,0} dynamic-slice(f32[30,512,1024]{2,1,0} %get-tuple-element.907, s64[] %get-tuple-element.904, s64[] %broadcast.954, s64[] %broadcast.956), dynamic_slice_sizes={1,512,1024}
  %reshape.958 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %dynamic-slice.957)
  %get-tuple-element.906 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=2
  %constant.947 = s64[] constant(0)
  %broadcast.948 = s64[] broadcast(s64[] %constant.947), dimensions={}
  %constant.949 = s64[] constant(0)
  %broadcast.950 = s64[] broadcast(s64[] %constant.949), dimensions={}
  %dynamic-slice.951 = f32[1,1024,1024]{2,1,0} dynamic-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.906, s64[] %get-tuple-element.904, s64[] %broadcast.948, s64[] %broadcast.950), dynamic_slice_sizes={1,1024,1024}
  %reshape.952 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %dynamic-slice.951)
  %get-tuple-element.914 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=10
  %constant.993 = s64[] constant(0)
  %broadcast.994 = s64[] broadcast(s64[] %constant.993), dimensions={}
  %dynamic-slice.995 = f32[1,1024]{1,0} dynamic-slice(f32[30,1024]{1,0} %get-tuple-element.914, s64[] %get-tuple-element.904, s64[] %broadcast.994), dynamic_slice_sizes={1,1024}
  %reshape.996 = f32[1024]{0} reshape(f32[1,1024]{1,0} %dynamic-slice.995)
  %get-tuple-element.910 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=6
  %constant.971 = s64[] constant(0)
  %broadcast.972 = s64[] broadcast(s64[] %constant.971), dimensions={}
  %constant.973 = s64[] constant(0)
  %broadcast.974 = s64[] broadcast(s64[] %constant.973), dimensions={}
  %dynamic-slice.975 = f32[1,4096,1024]{2,1,0} dynamic-slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.910, s64[] %get-tuple-element.904, s64[] %broadcast.972, s64[] %broadcast.974), dynamic_slice_sizes={1,4096,1024}
  %reshape.976 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %dynamic-slice.975)
  %call.997 = (f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) call(f32[1024,4096]{1,0} %reshape.988, f32[4096,1024]{1,0} %reshape.982, f32[] %get-tuple-element.946, f32[1024,1024]{1,0} %reshape.970, f32[512,1024]{1,0} %reshape.964, /*index=5*/f32[16,512,1024]{2,1,0} %get-tuple-element.905, f32[1024]{0} %reshape.992, f32[] %get-tuple-element.945, f32[512,1024]{1,0} %reshape.958, f32[1024,1024]{1,0} %reshape.952, /*index=10*/f32[1024]{0} %reshape.996, f32[4096,1024]{1,0} %reshape.976), to_apply=%FnComputation.734
  %get-tuple-element.998 = f32[16,512,1024]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=0
  %get-tuple-element.915 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=11
  %get-tuple-element.999 = f32[16,512,1024]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=1
  %broadcast.1000 = f32[1,16,512,1024]{3,2,1,0} broadcast(f32[16,512,1024]{2,1,0} %get-tuple-element.999), dimensions={1,2,3}
  %constant.1001 = s64[] constant(0)
  %broadcast.1002 = s64[] broadcast(s64[] %constant.1001), dimensions={}
  %constant.1003 = s64[] constant(0)
  %broadcast.1004 = s64[] broadcast(s64[] %constant.1003), dimensions={}
  %constant.1005 = s64[] constant(0)
  %broadcast.1006 = s64[] broadcast(s64[] %constant.1005), dimensions={}
  %dynamic-update-slice.1007 = f32[30,16,512,1024]{3,2,1,0} dynamic-update-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.915, f32[1,16,512,1024]{3,2,1,0} %broadcast.1000, s64[] %get-tuple-element.904, s64[] %broadcast.1002, s64[] %broadcast.1004, /*index=5*/s64[] %broadcast.1006)
  %get-tuple-element.916 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=12
  %get-tuple-element.1008 = f32[1024]{0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=2
  %broadcast.1009 = f32[1,1024]{1,0} broadcast(f32[1024]{0} %get-tuple-element.1008), dimensions={1}
  %constant.1010 = s64[] constant(0)
  %broadcast.1011 = s64[] broadcast(s64[] %constant.1010), dimensions={}
  %dynamic-update-slice.1012 = f32[30,1024]{1,0} dynamic-update-slice(f32[30,1024]{1,0} %get-tuple-element.916, f32[1,1024]{1,0} %broadcast.1009, s64[] %get-tuple-element.904, s64[] %broadcast.1011)
  %get-tuple-element.917 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=13
  %get-tuple-element.1013 = f32[1024]{0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=3
  %broadcast.1014 = f32[1,1024]{1,0} broadcast(f32[1024]{0} %get-tuple-element.1013), dimensions={1}
  %constant.1015 = s64[] constant(0)
  %broadcast.1016 = s64[] broadcast(s64[] %constant.1015), dimensions={}
  %dynamic-update-slice.1017 = f32[30,1024]{1,0} dynamic-update-slice(f32[30,1024]{1,0} %get-tuple-element.917, f32[1,1024]{1,0} %broadcast.1014, s64[] %get-tuple-element.904, s64[] %broadcast.1016)
  %get-tuple-element.918 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=14
  %get-tuple-element.1018 = f32[16,512,1]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=4
  %broadcast.1019 = f32[1,16,512,1]{3,2,1,0} broadcast(f32[16,512,1]{2,1,0} %get-tuple-element.1018), dimensions={1,2,3}
  %constant.1020 = s64[] constant(0)
  %broadcast.1021 = s64[] broadcast(s64[] %constant.1020), dimensions={}
  %constant.1022 = s64[] constant(0)
  %broadcast.1023 = s64[] broadcast(s64[] %constant.1022), dimensions={}
  %constant.1024 = s64[] constant(0)
  %broadcast.1025 = s64[] broadcast(s64[] %constant.1024), dimensions={}
  %dynamic-update-slice.1026 = f32[30,16,512,1]{3,2,1,0} dynamic-update-slice(f32[30,16,512,1]{3,2,1,0} %get-tuple-element.918, f32[1,16,512,1]{3,2,1,0} %broadcast.1019, s64[] %get-tuple-element.904, s64[] %broadcast.1021, s64[] %broadcast.1023, /*index=5*/s64[] %broadcast.1025)
  %get-tuple-element.919 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=15
  %get-tuple-element.1027 = f32[16,512,1024]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=5
  %broadcast.1028 = f32[1,16,512,1024]{3,2,1,0} broadcast(f32[16,512,1024]{2,1,0} %get-tuple-element.1027), dimensions={1,2,3}
  %constant.1029 = s64[] constant(0)
  %broadcast.1030 = s64[] broadcast(s64[] %constant.1029), dimensions={}
  %constant.1031 = s64[] constant(0)
  %broadcast.1032 = s64[] broadcast(s64[] %constant.1031), dimensions={}
  %constant.1033 = s64[] constant(0)
  %broadcast.1034 = s64[] broadcast(s64[] %constant.1033), dimensions={}
  %dynamic-update-slice.1035 = f32[30,16,512,1024]{3,2,1,0} dynamic-update-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.919, f32[1,16,512,1024]{3,2,1,0} %broadcast.1028, s64[] %get-tuple-element.904, s64[] %broadcast.1030, s64[] %broadcast.1032, /*index=5*/s64[] %broadcast.1034)
  %get-tuple-element.920 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=16
  %get-tuple-element.1036 = f32[1024,1024]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=6
  %broadcast.1037 = f32[1,1024,1024]{2,1,0} broadcast(f32[1024,1024]{0,1} %get-tuple-element.1036), dimensions={1,2}
  %constant.1038 = s64[] constant(0)
  %broadcast.1039 = s64[] broadcast(s64[] %constant.1038), dimensions={}
  %constant.1040 = s64[] constant(0)
  %broadcast.1041 = s64[] broadcast(s64[] %constant.1040), dimensions={}
  %dynamic-update-slice.1042 = f32[30,1024,1024]{2,1,0} dynamic-update-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.920, f32[1,1024,1024]{2,1,0} %broadcast.1037, s64[] %get-tuple-element.904, s64[] %broadcast.1039, s64[] %broadcast.1041)
  %get-tuple-element.921 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=17
  %get-tuple-element.1043 = f32[8192,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=7
  %broadcast.1044 = f32[1,8192,1024]{2,1,0} broadcast(f32[8192,1024]{1,0} %get-tuple-element.1043), dimensions={1,2}
  %constant.1045 = s64[] constant(0)
  %broadcast.1046 = s64[] broadcast(s64[] %constant.1045), dimensions={}
  %constant.1047 = s64[] constant(0)
  %broadcast.1048 = s64[] broadcast(s64[] %constant.1047), dimensions={}
  %dynamic-update-slice.1049 = f32[30,8192,1024]{2,1,0} dynamic-update-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.921, f32[1,8192,1024]{2,1,0} %broadcast.1044, s64[] %get-tuple-element.904, s64[] %broadcast.1046, s64[] %broadcast.1048)
  %get-tuple-element.922 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=18
  %get-tuple-element.1050 = f32[1024,512]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=8
  %broadcast.1051 = f32[1,1024,512]{2,1,0} broadcast(f32[1024,512]{0,1} %get-tuple-element.1050), dimensions={1,2}
  %constant.1052 = s64[] constant(0)
  %broadcast.1053 = s64[] broadcast(s64[] %constant.1052), dimensions={}
  %constant.1054 = s64[] constant(0)
  %broadcast.1055 = s64[] broadcast(s64[] %constant.1054), dimensions={}
  %dynamic-update-slice.1056 = f32[30,1024,512]{2,1,0} dynamic-update-slice(f32[30,1024,512]{2,1,0} %get-tuple-element.922, f32[1,1024,512]{2,1,0} %broadcast.1051, s64[] %get-tuple-element.904, s64[] %broadcast.1053, s64[] %broadcast.1055)
  %get-tuple-element.923 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=19
  %get-tuple-element.1057 = f32[8192,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=9
  %broadcast.1058 = f32[1,8192,1024]{2,1,0} broadcast(f32[8192,1024]{1,0} %get-tuple-element.1057), dimensions={1,2}
  %constant.1059 = s64[] constant(0)
  %broadcast.1060 = s64[] broadcast(s64[] %constant.1059), dimensions={}
  %constant.1061 = s64[] constant(0)
  %broadcast.1062 = s64[] broadcast(s64[] %constant.1061), dimensions={}
  %dynamic-update-slice.1063 = f32[30,8192,1024]{2,1,0} dynamic-update-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.923, f32[1,8192,1024]{2,1,0} %broadcast.1058, s64[] %get-tuple-element.904, s64[] %broadcast.1060, s64[] %broadcast.1062)
  %get-tuple-element.924 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=20
  %get-tuple-element.1064 = f32[1024,512]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=10
  %broadcast.1065 = f32[1,1024,512]{2,1,0} broadcast(f32[1024,512]{0,1} %get-tuple-element.1064), dimensions={1,2}
  %constant.1066 = s64[] constant(0)
  %broadcast.1067 = s64[] broadcast(s64[] %constant.1066), dimensions={}
  %constant.1068 = s64[] constant(0)
  %broadcast.1069 = s64[] broadcast(s64[] %constant.1068), dimensions={}
  %dynamic-update-slice.1070 = f32[30,1024,512]{2,1,0} dynamic-update-slice(f32[30,1024,512]{2,1,0} %get-tuple-element.924, f32[1,1024,512]{2,1,0} %broadcast.1065, s64[] %get-tuple-element.904, s64[] %broadcast.1067, s64[] %broadcast.1069)
  %get-tuple-element.925 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=21
  %get-tuple-element.1071 = f32[8192,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=11
  %broadcast.1072 = f32[1,8192,1024]{2,1,0} broadcast(f32[8192,1024]{1,0} %get-tuple-element.1071), dimensions={1,2}
  %constant.1073 = s64[] constant(0)
  %broadcast.1074 = s64[] broadcast(s64[] %constant.1073), dimensions={}
  %constant.1075 = s64[] constant(0)
  %broadcast.1076 = s64[] broadcast(s64[] %constant.1075), dimensions={}
  %dynamic-update-slice.1077 = f32[30,8192,1024]{2,1,0} dynamic-update-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.925, f32[1,8192,1024]{2,1,0} %broadcast.1072, s64[] %get-tuple-element.904, s64[] %broadcast.1074, s64[] %broadcast.1076)
  %get-tuple-element.926 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=22
  %get-tuple-element.1078 = f32[128,512,128]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=12
  %broadcast.1079 = f32[1,128,512,128]{3,2,1,0} broadcast(f32[128,512,128]{2,1,0} %get-tuple-element.1078), dimensions={1,2,3}
  %constant.1080 = s64[] constant(0)
  %broadcast.1081 = s64[] broadcast(s64[] %constant.1080), dimensions={}
  %constant.1082 = s64[] constant(0)
  %broadcast.1083 = s64[] broadcast(s64[] %constant.1082), dimensions={}
  %constant.1084 = s64[] constant(0)
  %broadcast.1085 = s64[] broadcast(s64[] %constant.1084), dimensions={}
  %dynamic-update-slice.1086 = f32[30,128,512,128]{3,2,1,0} dynamic-update-slice(f32[30,128,512,128]{3,2,1,0} %get-tuple-element.926, f32[1,128,512,128]{3,2,1,0} %broadcast.1079, s64[] %get-tuple-element.904, s64[] %broadcast.1081, s64[] %broadcast.1083, /*index=5*/s64[] %broadcast.1085)
  %get-tuple-element.927 = f32[30,128,128,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=23
  %get-tuple-element.1087 = f32[128,128,512]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=13
  %broadcast.1088 = f32[1,128,128,512]{3,2,1,0} broadcast(f32[128,128,512]{2,1,0} %get-tuple-element.1087), dimensions={1,2,3}
  %constant.1089 = s64[] constant(0)
  %broadcast.1090 = s64[] broadcast(s64[] %constant.1089), dimensions={}
  %constant.1091 = s64[] constant(0)
  %broadcast.1092 = s64[] broadcast(s64[] %constant.1091), dimensions={}
  %constant.1093 = s64[] constant(0)
  %broadcast.1094 = s64[] broadcast(s64[] %constant.1093), dimensions={}
  %dynamic-update-slice.1095 = f32[30,128,128,512]{3,2,1,0} dynamic-update-slice(f32[30,128,128,512]{3,2,1,0} %get-tuple-element.927, f32[1,128,128,512]{3,2,1,0} %broadcast.1088, s64[] %get-tuple-element.904, s64[] %broadcast.1090, s64[] %broadcast.1092, /*index=5*/s64[] %broadcast.1094)
  %get-tuple-element.928 = f32[30,16,8,512,512]{4,3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=24
  %get-tuple-element.1096 = f32[16,8,512,512]{3,2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=14
  %broadcast.1097 = f32[1,16,8,512,512]{4,3,2,1,0} broadcast(f32[16,8,512,512]{3,2,1,0} %get-tuple-element.1096), dimensions={1,2,3,4}
  %constant.1098 = s64[] constant(0)
  %broadcast.1099 = s64[] broadcast(s64[] %constant.1098), dimensions={}
  %constant.1100 = s64[] constant(0)
  %broadcast.1101 = s64[] broadcast(s64[] %constant.1100), dimensions={}
  %constant.1102 = s64[] constant(0)
  %broadcast.1103 = s64[] broadcast(s64[] %constant.1102), dimensions={}
  %constant.1104 = s64[] constant(0)
  %broadcast.1105 = s64[] broadcast(s64[] %constant.1104), dimensions={}
  %dynamic-update-slice.1106 = f32[30,16,8,512,512]{4,3,2,1,0} dynamic-update-slice(f32[30,16,8,512,512]{4,3,2,1,0} %get-tuple-element.928, f32[1,16,8,512,512]{4,3,2,1,0} %broadcast.1097, s64[] %get-tuple-element.904, s64[] %broadcast.1099, s64[] %broadcast.1101, /*index=5*/s64[] %broadcast.1103, s64[] %broadcast.1105)
  %get-tuple-element.929 = f32[30,128,512,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=25
  %get-tuple-element.1107 = f32[128,512,512]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=15
  %broadcast.1108 = f32[1,128,512,512]{3,2,1,0} broadcast(f32[128,512,512]{2,1,0} %get-tuple-element.1107), dimensions={1,2,3}
  %constant.1109 = s64[] constant(0)
  %broadcast.1110 = s64[] broadcast(s64[] %constant.1109), dimensions={}
  %constant.1111 = s64[] constant(0)
  %broadcast.1112 = s64[] broadcast(s64[] %constant.1111), dimensions={}
  %constant.1113 = s64[] constant(0)
  %broadcast.1114 = s64[] broadcast(s64[] %constant.1113), dimensions={}
  %dynamic-update-slice.1115 = f32[30,128,512,512]{3,2,1,0} dynamic-update-slice(f32[30,128,512,512]{3,2,1,0} %get-tuple-element.929, f32[1,128,512,512]{3,2,1,0} %broadcast.1108, s64[] %get-tuple-element.904, s64[] %broadcast.1110, s64[] %broadcast.1112, /*index=5*/s64[] %broadcast.1114)
  %get-tuple-element.930 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=26
  %get-tuple-element.1116 = f32[128,512,128]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=16
  %broadcast.1117 = f32[1,128,512,128]{3,2,1,0} broadcast(f32[128,512,128]{2,1,0} %get-tuple-element.1116), dimensions={1,2,3}
  %constant.1118 = s64[] constant(0)
  %broadcast.1119 = s64[] broadcast(s64[] %constant.1118), dimensions={}
  %constant.1120 = s64[] constant(0)
  %broadcast.1121 = s64[] broadcast(s64[] %constant.1120), dimensions={}
  %constant.1122 = s64[] constant(0)
  %broadcast.1123 = s64[] broadcast(s64[] %constant.1122), dimensions={}
  %dynamic-update-slice.1124 = f32[30,128,512,128]{3,2,1,0} dynamic-update-slice(f32[30,128,512,128]{3,2,1,0} %get-tuple-element.930, f32[1,128,512,128]{3,2,1,0} %broadcast.1117, s64[] %get-tuple-element.904, s64[] %broadcast.1119, s64[] %broadcast.1121, /*index=5*/s64[] %broadcast.1123)
  %get-tuple-element.931 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=27
  %get-tuple-element.1125 = f32[1024,1024]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=17
  %broadcast.1126 = f32[1,1024,1024]{2,1,0} broadcast(f32[1024,1024]{0,1} %get-tuple-element.1125), dimensions={1,2}
  %constant.1127 = s64[] constant(0)
  %broadcast.1128 = s64[] broadcast(s64[] %constant.1127), dimensions={}
  %constant.1129 = s64[] constant(0)
  %broadcast.1130 = s64[] broadcast(s64[] %constant.1129), dimensions={}
  %dynamic-update-slice.1131 = f32[30,1024,1024]{2,1,0} dynamic-update-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.931, f32[1,1024,1024]{2,1,0} %broadcast.1126, s64[] %get-tuple-element.904, s64[] %broadcast.1128, s64[] %broadcast.1130)
  %get-tuple-element.932 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=28
  %get-tuple-element.1132 = f32[8192,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=18
  %broadcast.1133 = f32[1,8192,1024]{2,1,0} broadcast(f32[8192,1024]{1,0} %get-tuple-element.1132), dimensions={1,2}
  %constant.1134 = s64[] constant(0)
  %broadcast.1135 = s64[] broadcast(s64[] %constant.1134), dimensions={}
  %constant.1136 = s64[] constant(0)
  %broadcast.1137 = s64[] broadcast(s64[] %constant.1136), dimensions={}
  %dynamic-update-slice.1138 = f32[30,8192,1024]{2,1,0} dynamic-update-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.932, f32[1,8192,1024]{2,1,0} %broadcast.1133, s64[] %get-tuple-element.904, s64[] %broadcast.1135, s64[] %broadcast.1137)
  %get-tuple-element.933 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=29
  %get-tuple-element.1139 = f32[16,512,1024]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=19
  %broadcast.1140 = f32[1,16,512,1024]{3,2,1,0} broadcast(f32[16,512,1024]{2,1,0} %get-tuple-element.1139), dimensions={1,2,3}
  %constant.1141 = s64[] constant(0)
  %broadcast.1142 = s64[] broadcast(s64[] %constant.1141), dimensions={}
  %constant.1143 = s64[] constant(0)
  %broadcast.1144 = s64[] broadcast(s64[] %constant.1143), dimensions={}
  %constant.1145 = s64[] constant(0)
  %broadcast.1146 = s64[] broadcast(s64[] %constant.1145), dimensions={}
  %dynamic-update-slice.1147 = f32[30,16,512,1024]{3,2,1,0} dynamic-update-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.933, f32[1,16,512,1024]{3,2,1,0} %broadcast.1140, s64[] %get-tuple-element.904, s64[] %broadcast.1142, s64[] %broadcast.1144, /*index=5*/s64[] %broadcast.1146)
  %get-tuple-element.934 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=30
  %get-tuple-element.1148 = f32[16,512,1]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=20
  %broadcast.1149 = f32[1,16,512,1]{3,2,1,0} broadcast(f32[16,512,1]{2,1,0} %get-tuple-element.1148), dimensions={1,2,3}
  %constant.1150 = s64[] constant(0)
  %broadcast.1151 = s64[] broadcast(s64[] %constant.1150), dimensions={}
  %constant.1152 = s64[] constant(0)
  %broadcast.1153 = s64[] broadcast(s64[] %constant.1152), dimensions={}
  %constant.1154 = s64[] constant(0)
  %broadcast.1155 = s64[] broadcast(s64[] %constant.1154), dimensions={}
  %dynamic-update-slice.1156 = f32[30,16,512,1]{3,2,1,0} dynamic-update-slice(f32[30,16,512,1]{3,2,1,0} %get-tuple-element.934, f32[1,16,512,1]{3,2,1,0} %broadcast.1149, s64[] %get-tuple-element.904, s64[] %broadcast.1151, s64[] %broadcast.1153, /*index=5*/s64[] %broadcast.1155)
  %get-tuple-element.935 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=31
  %get-tuple-element.1157 = f32[16,512,1024]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=21
  %broadcast.1158 = f32[1,16,512,1024]{3,2,1,0} broadcast(f32[16,512,1024]{2,1,0} %get-tuple-element.1157), dimensions={1,2,3}
  %constant.1159 = s64[] constant(0)
  %broadcast.1160 = s64[] broadcast(s64[] %constant.1159), dimensions={}
  %constant.1161 = s64[] constant(0)
  %broadcast.1162 = s64[] broadcast(s64[] %constant.1161), dimensions={}
  %constant.1163 = s64[] constant(0)
  %broadcast.1164 = s64[] broadcast(s64[] %constant.1163), dimensions={}
  %dynamic-update-slice.1165 = f32[30,16,512,1024]{3,2,1,0} dynamic-update-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.935, f32[1,16,512,1024]{3,2,1,0} %broadcast.1158, s64[] %get-tuple-element.904, s64[] %broadcast.1160, s64[] %broadcast.1162, /*index=5*/s64[] %broadcast.1164)
  %get-tuple-element.936 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=32
  %get-tuple-element.1166 = f32[1024,4096]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=22
  %broadcast.1167 = f32[1,1024,4096]{2,1,0} broadcast(f32[1024,4096]{0,1} %get-tuple-element.1166), dimensions={1,2}
  %constant.1168 = s64[] constant(0)
  %broadcast.1169 = s64[] broadcast(s64[] %constant.1168), dimensions={}
  %constant.1170 = s64[] constant(0)
  %broadcast.1171 = s64[] broadcast(s64[] %constant.1170), dimensions={}
  %dynamic-update-slice.1172 = f32[30,1024,4096]{2,1,0} dynamic-update-slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.936, f32[1,1024,4096]{2,1,0} %broadcast.1167, s64[] %get-tuple-element.904, s64[] %broadcast.1169, s64[] %broadcast.1171)
  %get-tuple-element.937 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=33
  %get-tuple-element.1173 = f32[8192,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=23
  %broadcast.1174 = f32[1,8192,1024]{2,1,0} broadcast(f32[8192,1024]{1,0} %get-tuple-element.1173), dimensions={1,2}
  %constant.1175 = s64[] constant(0)
  %broadcast.1176 = s64[] broadcast(s64[] %constant.1175), dimensions={}
  %constant.1177 = s64[] constant(0)
  %broadcast.1178 = s64[] broadcast(s64[] %constant.1177), dimensions={}
  %dynamic-update-slice.1179 = f32[30,8192,1024]{2,1,0} dynamic-update-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.937, f32[1,8192,1024]{2,1,0} %broadcast.1174, s64[] %get-tuple-element.904, s64[] %broadcast.1176, s64[] %broadcast.1178)
  %get-tuple-element.938 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=34
  %get-tuple-element.1180 = f32[16,512,4096]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=24
  %broadcast.1181 = f32[1,16,512,4096]{3,2,1,0} broadcast(f32[16,512,4096]{2,1,0} %get-tuple-element.1180), dimensions={1,2,3}
  %constant.1182 = s64[] constant(0)
  %broadcast.1183 = s64[] broadcast(s64[] %constant.1182), dimensions={}
  %constant.1184 = s64[] constant(0)
  %broadcast.1185 = s64[] broadcast(s64[] %constant.1184), dimensions={}
  %constant.1186 = s64[] constant(0)
  %broadcast.1187 = s64[] broadcast(s64[] %constant.1186), dimensions={}
  %dynamic-update-slice.1188 = f32[30,16,512,4096]{3,2,1,0} dynamic-update-slice(f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.938, f32[1,16,512,4096]{3,2,1,0} %broadcast.1181, s64[] %get-tuple-element.904, s64[] %broadcast.1183, s64[] %broadcast.1185, /*index=5*/s64[] %broadcast.1187)
  %get-tuple-element.939 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=35
  %get-tuple-element.1189 = f32[1024,4096]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=25
  %broadcast.1190 = f32[1,1024,4096]{2,1,0} broadcast(f32[1024,4096]{0,1} %get-tuple-element.1189), dimensions={1,2}
  %constant.1191 = s64[] constant(0)
  %broadcast.1192 = s64[] broadcast(s64[] %constant.1191), dimensions={}
  %constant.1193 = s64[] constant(0)
  %broadcast.1194 = s64[] broadcast(s64[] %constant.1193), dimensions={}
  %dynamic-update-slice.1195 = f32[30,1024,4096]{2,1,0} dynamic-update-slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.939, f32[1,1024,4096]{2,1,0} %broadcast.1190, s64[] %get-tuple-element.904, s64[] %broadcast.1192, s64[] %broadcast.1194)
  %get-tuple-element.940 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=36
  %get-tuple-element.1196 = f32[8192,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=26
  %broadcast.1197 = f32[1,8192,1024]{2,1,0} broadcast(f32[8192,1024]{1,0} %get-tuple-element.1196), dimensions={1,2}
  %constant.1198 = s64[] constant(0)
  %broadcast.1199 = s64[] broadcast(s64[] %constant.1198), dimensions={}
  %constant.1200 = s64[] constant(0)
  %broadcast.1201 = s64[] broadcast(s64[] %constant.1200), dimensions={}
  %dynamic-update-slice.1202 = f32[30,8192,1024]{2,1,0} dynamic-update-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.940, f32[1,8192,1024]{2,1,0} %broadcast.1197, s64[] %get-tuple-element.904, s64[] %broadcast.1199, s64[] %broadcast.1201)
  %get-tuple-element.941 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=37
  %get-tuple-element.1203 = f32[16,512,4096]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=27
  %broadcast.1204 = f32[1,16,512,4096]{3,2,1,0} broadcast(f32[16,512,4096]{2,1,0} %get-tuple-element.1203), dimensions={1,2,3}
  %constant.1205 = s64[] constant(0)
  %broadcast.1206 = s64[] broadcast(s64[] %constant.1205), dimensions={}
  %constant.1207 = s64[] constant(0)
  %broadcast.1208 = s64[] broadcast(s64[] %constant.1207), dimensions={}
  %constant.1209 = s64[] constant(0)
  %broadcast.1210 = s64[] broadcast(s64[] %constant.1209), dimensions={}
  %dynamic-update-slice.1211 = f32[30,16,512,4096]{3,2,1,0} dynamic-update-slice(f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.941, f32[1,16,512,4096]{3,2,1,0} %broadcast.1204, s64[] %get-tuple-element.904, s64[] %broadcast.1206, s64[] %broadcast.1208, /*index=5*/s64[] %broadcast.1210)
  %get-tuple-element.942 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=38
  %get-tuple-element.1212 = f32[16,512,4096]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=28
  %broadcast.1213 = f32[1,16,512,4096]{3,2,1,0} broadcast(f32[16,512,4096]{2,1,0} %get-tuple-element.1212), dimensions={1,2,3}
  %constant.1214 = s64[] constant(0)
  %broadcast.1215 = s64[] broadcast(s64[] %constant.1214), dimensions={}
  %constant.1216 = s64[] constant(0)
  %broadcast.1217 = s64[] broadcast(s64[] %constant.1216), dimensions={}
  %constant.1218 = s64[] constant(0)
  %broadcast.1219 = s64[] broadcast(s64[] %constant.1218), dimensions={}
  %dynamic-update-slice.1220 = f32[30,16,512,4096]{3,2,1,0} dynamic-update-slice(f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.942, f32[1,16,512,4096]{3,2,1,0} %broadcast.1213, s64[] %get-tuple-element.904, s64[] %broadcast.1215, s64[] %broadcast.1217, /*index=5*/s64[] %broadcast.1219)
  %get-tuple-element.943 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=39
  %get-tuple-element.1221 = f32[4096,1024]{0,1} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=29
  %broadcast.1222 = f32[1,4096,1024]{2,1,0} broadcast(f32[4096,1024]{0,1} %get-tuple-element.1221), dimensions={1,2}
  %constant.1223 = s64[] constant(0)
  %broadcast.1224 = s64[] broadcast(s64[] %constant.1223), dimensions={}
  %constant.1225 = s64[] constant(0)
  %broadcast.1226 = s64[] broadcast(s64[] %constant.1225), dimensions={}
  %dynamic-update-slice.1227 = f32[30,4096,1024]{2,1,0} dynamic-update-slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.943, f32[1,4096,1024]{2,1,0} %broadcast.1222, s64[] %get-tuple-element.904, s64[] %broadcast.1224, s64[] %broadcast.1226)
  %get-tuple-element.944 = f32[30,8192,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.903), index=40
  %get-tuple-element.1228 = f32[8192,4096]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024]{0}, f32[1024]{0}, f32[16,512,1]{2,1,0}, /*index=5*/f32[16,512,1024]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[1024,512]{0,1}, f32[8192,1024]{1,0}, /*index=10*/f32[1024,512]{0,1}, f32[8192,1024]{1,0}, f32[128,512,128]{2,1,0}, f32[128,128,512]{2,1,0}, f32[16,8,512,512]{3,2,1,0}, /*index=15*/f32[128,512,512]{2,1,0}, f32[128,512,128]{2,1,0}, f32[1024,1024]{0,1}, f32[8192,1024]{1,0}, f32[16,512,1024]{2,1,0}, /*index=20*/f32[16,512,1]{2,1,0}, f32[16,512,1024]{2,1,0}, f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, /*index=25*/f32[1024,4096]{0,1}, f32[8192,1024]{1,0}, f32[16,512,4096]{2,1,0}, f32[16,512,4096]{2,1,0}, f32[4096,1024]{0,1}, /*index=30*/f32[8192,4096]{1,0}) %call.997), index=30
  %broadcast.1229 = f32[1,8192,4096]{2,1,0} broadcast(f32[8192,4096]{1,0} %get-tuple-element.1228), dimensions={1,2}
  %constant.1230 = s64[] constant(0)
  %broadcast.1231 = s64[] broadcast(s64[] %constant.1230), dimensions={}
  %constant.1232 = s64[] constant(0)
  %broadcast.1233 = s64[] broadcast(s64[] %constant.1232), dimensions={}
  %dynamic-update-slice.1234 = f32[30,8192,4096]{2,1,0} dynamic-update-slice(f32[30,8192,4096]{2,1,0} %get-tuple-element.944, f32[1,8192,4096]{2,1,0} %broadcast.1229, s64[] %get-tuple-element.904, s64[] %broadcast.1231, s64[] %broadcast.1233)
  ROOT %tuple.1237 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) tuple(s64[] %add.1236, f32[16,512,1024]{2,1,0} %get-tuple-element.998, f32[30,1024,1024]{2,1,0} %get-tuple-element.906, f32[30,512,1024]{2,1,0} %get-tuple-element.907, f32[30,512,1024]{2,1,0} %get-tuple-element.908, /*index=5*/f32[30,1024,1024]{2,1,0} %get-tuple-element.909, f32[30,4096,1024]{2,1,0} %get-tuple-element.910, f32[30,4096,1024]{2,1,0} %get-tuple-element.911, f32[30,1024,4096]{2,1,0} %get-tuple-element.912, f32[30,1024]{1,0} %get-tuple-element.913, /*index=10*/f32[30,1024]{1,0} %get-tuple-element.914, f32[30,16,512,1024]{3,2,1,0} %dynamic-update-slice.1007, f32[30,1024]{1,0} %dynamic-update-slice.1012, f32[30,1024]{1,0} %dynamic-update-slice.1017, f32[30,16,512,1]{3,2,1,0} %dynamic-update-slice.1026, /*index=15*/f32[30,16,512,1024]{3,2,1,0} %dynamic-update-slice.1035, f32[30,1024,1024]{2,1,0} %dynamic-update-slice.1042, f32[30,8192,1024]{2,1,0} %dynamic-update-slice.1049, f32[30,1024,512]{2,1,0} %dynamic-update-slice.1056, f32[30,8192,1024]{2,1,0} %dynamic-update-slice.1063, /*index=20*/f32[30,1024,512]{2,1,0} %dynamic-update-slice.1070, f32[30,8192,1024]{2,1,0} %dynamic-update-slice.1077, f32[30,128,512,128]{3,2,1,0} %dynamic-update-slice.1086, f32[30,128,128,512]{3,2,1,0} %dynamic-update-slice.1095, f32[30,16,8,512,512]{4,3,2,1,0} %dynamic-update-slice.1106, /*index=25*/f32[30,128,512,512]{3,2,1,0} %dynamic-update-slice.1115, f32[30,128,512,128]{3,2,1,0} %dynamic-update-slice.1124, f32[30,1024,1024]{2,1,0} %dynamic-update-slice.1131, f32[30,8192,1024]{2,1,0} %dynamic-update-slice.1138, f32[30,16,512,1024]{3,2,1,0} %dynamic-update-slice.1147, /*index=30*/f32[30,16,512,1]{3,2,1,0} %dynamic-update-slice.1156, f32[30,16,512,1024]{3,2,1,0} %dynamic-update-slice.1165, f32[30,1024,4096]{2,1,0} %dynamic-update-slice.1172, f32[30,8192,1024]{2,1,0} %dynamic-update-slice.1179, f32[30,16,512,4096]{3,2,1,0} %dynamic-update-slice.1188, /*index=35*/f32[30,1024,4096]{2,1,0} %dynamic-update-slice.1195, f32[30,8192,1024]{2,1,0} %dynamic-update-slice.1202, f32[30,16,512,4096]{3,2,1,0} %dynamic-update-slice.1211, f32[30,16,512,4096]{3,2,1,0} %dynamic-update-slice.1220, f32[30,4096,1024]{2,1,0} %dynamic-update-slice.1227, /*index=40*/f32[30,8192,4096]{2,1,0} %dynamic-update-slice.1234, f32[] %get-tuple-element.945, f32[] %get-tuple-element.946)
}

%Condition.1238 (p0.1239: (s64[], f32[16,512,1024], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=5*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=10*/f32[30,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], f32[30,16,512,1], /*index=15*/f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], /*index=20*/f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], f32[30,16,8,512,512], /*index=25*/f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], f32[30,16,512,1024], /*index=30*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], /*index=35*/f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], f32[30,4096,1024], /*index=40*/f32[30,8192,4096], f32[], f32[])) -> pred[] {
  %p0.1239 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) parameter(0)
  %get-tuple-element.1241 = f32[16,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=1
  %get-tuple-element.1242 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=2
  %get-tuple-element.1243 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=3
  %get-tuple-element.1244 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=4
  %get-tuple-element.1245 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=5
  %get-tuple-element.1246 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=6
  %get-tuple-element.1247 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=7
  %get-tuple-element.1248 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=8
  %get-tuple-element.1249 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=9
  %get-tuple-element.1250 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=10
  %get-tuple-element.1251 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=11
  %get-tuple-element.1252 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=12
  %get-tuple-element.1253 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=13
  %get-tuple-element.1254 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=14
  %get-tuple-element.1255 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=15
  %get-tuple-element.1256 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=16
  %get-tuple-element.1257 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=17
  %get-tuple-element.1258 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=18
  %get-tuple-element.1259 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=19
  %get-tuple-element.1260 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=20
  %get-tuple-element.1261 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=21
  %get-tuple-element.1262 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=22
  %get-tuple-element.1263 = f32[30,128,128,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=23
  %get-tuple-element.1264 = f32[30,16,8,512,512]{4,3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=24
  %get-tuple-element.1265 = f32[30,128,512,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=25
  %get-tuple-element.1266 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=26
  %get-tuple-element.1267 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=27
  %get-tuple-element.1268 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=28
  %get-tuple-element.1269 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=29
  %get-tuple-element.1270 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=30
  %get-tuple-element.1271 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=31
  %get-tuple-element.1272 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=32
  %get-tuple-element.1273 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=33
  %get-tuple-element.1274 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=34
  %get-tuple-element.1275 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=35
  %get-tuple-element.1276 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=36
  %get-tuple-element.1277 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=37
  %get-tuple-element.1278 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=38
  %get-tuple-element.1279 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=39
  %get-tuple-element.1280 = f32[30,8192,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=40
  %get-tuple-element.1281 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=41
  %get-tuple-element.1282 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=42
  %get-tuple-element.1240 = s64[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %p0.1239), index=0
  %constant.1283 = s64[] constant(30)
  ROOT %compare.1284 = pred[] compare(s64[] %get-tuple-element.1240, s64[] %constant.1283), direction=LT
}

%scan.1285 (p0.1286: s64[], p1.1287: f32[16,512,1024], p2.1288: f32[30,1024,1024], p3.1289: f32[30,512,1024], p4.1290: f32[30,512,1024], p5.1291: f32[30,1024,1024], p6.1292: f32[30,4096,1024], p7.1293: f32[30,4096,1024], p8.1294: f32[30,1024,4096], p9.1295: f32[30,1024], p10.1296: f32[30,1024], p11.1297: f32[30,16,512,1024], p12.1298: f32[30,1024], p13.1299: f32[30,1024], p14.1300: f32[30,16,512,1], p15.1301: f32[30,16,512,1024], p16.1302: f32[30,1024,1024], p17.1303: f32[30,8192,1024], p18.1304: f32[30,1024,512], p19.1305: f32[30,8192,1024], p20.1306: f32[30,1024,512], p21.1307: f32[30,8192,1024], p22.1308: f32[30,128,512,128], p23.1309: f32[30,128,128,512], p24.1310: f32[30,16,8,512,512], p25.1311: f32[30,128,512,512], p26.1312: f32[30,128,512,128], p27.1313: f32[30,1024,1024], p28.1314: f32[30,8192,1024], p29.1315: f32[30,16,512,1024], p30.1316: f32[30,16,512,1], p31.1317: f32[30,16,512,1024], p32.1318: f32[30,1024,4096], p33.1319: f32[30,8192,1024], p34.1320: f32[30,16,512,4096], p35.1321: f32[30,1024,4096], p36.1322: f32[30,8192,1024], p37.1323: f32[30,16,512,4096], p38.1324: f32[30,16,512,4096], p39.1325: f32[30,4096,1024], p40.1326: f32[30,8192,4096], p41.1327: f32[], p42.1328: f32[]) -> (s64[], f32[16,512,1024], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=5*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=10*/f32[30,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], f32[30,16,512,1], /*index=15*/f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], /*index=20*/f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], f32[30,16,8,512,512], /*index=25*/f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], f32[30,16,512,1024], /*index=30*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], /*index=35*/f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], f32[30,4096,1024], /*index=40*/f32[30,8192,4096], f32[], f32[]) {
  %p0.1286 = s64[] parameter(0)
  %p1.1287 = f32[16,512,1024]{2,1,0} parameter(1)
  %p2.1288 = f32[30,1024,1024]{2,1,0} parameter(2)
  %p3.1289 = f32[30,512,1024]{2,1,0} parameter(3)
  %p4.1290 = f32[30,512,1024]{2,1,0} parameter(4)
  %p5.1291 = f32[30,1024,1024]{2,1,0} parameter(5)
  %p6.1292 = f32[30,4096,1024]{2,1,0} parameter(6)
  %p7.1293 = f32[30,4096,1024]{2,1,0} parameter(7)
  %p8.1294 = f32[30,1024,4096]{2,1,0} parameter(8)
  %p9.1295 = f32[30,1024]{1,0} parameter(9)
  %p10.1296 = f32[30,1024]{1,0} parameter(10)
  %p11.1297 = f32[30,16,512,1024]{3,2,1,0} parameter(11)
  %p12.1298 = f32[30,1024]{1,0} parameter(12)
  %p13.1299 = f32[30,1024]{1,0} parameter(13)
  %p14.1300 = f32[30,16,512,1]{3,2,1,0} parameter(14)
  %p15.1301 = f32[30,16,512,1024]{3,2,1,0} parameter(15)
  %p16.1302 = f32[30,1024,1024]{2,1,0} parameter(16)
  %p17.1303 = f32[30,8192,1024]{2,1,0} parameter(17)
  %p18.1304 = f32[30,1024,512]{2,1,0} parameter(18)
  %p19.1305 = f32[30,8192,1024]{2,1,0} parameter(19)
  %p20.1306 = f32[30,1024,512]{2,1,0} parameter(20)
  %p21.1307 = f32[30,8192,1024]{2,1,0} parameter(21)
  %p22.1308 = f32[30,128,512,128]{3,2,1,0} parameter(22)
  %p23.1309 = f32[30,128,128,512]{3,2,1,0} parameter(23)
  %p24.1310 = f32[30,16,8,512,512]{4,3,2,1,0} parameter(24)
  %p25.1311 = f32[30,128,512,512]{3,2,1,0} parameter(25)
  %p26.1312 = f32[30,128,512,128]{3,2,1,0} parameter(26)
  %p27.1313 = f32[30,1024,1024]{2,1,0} parameter(27)
  %p28.1314 = f32[30,8192,1024]{2,1,0} parameter(28)
  %p29.1315 = f32[30,16,512,1024]{3,2,1,0} parameter(29)
  %p30.1316 = f32[30,16,512,1]{3,2,1,0} parameter(30)
  %p31.1317 = f32[30,16,512,1024]{3,2,1,0} parameter(31)
  %p32.1318 = f32[30,1024,4096]{2,1,0} parameter(32)
  %p33.1319 = f32[30,8192,1024]{2,1,0} parameter(33)
  %p34.1320 = f32[30,16,512,4096]{3,2,1,0} parameter(34)
  %p35.1321 = f32[30,1024,4096]{2,1,0} parameter(35)
  %p36.1322 = f32[30,8192,1024]{2,1,0} parameter(36)
  %p37.1323 = f32[30,16,512,4096]{3,2,1,0} parameter(37)
  %p38.1324 = f32[30,16,512,4096]{3,2,1,0} parameter(38)
  %p39.1325 = f32[30,4096,1024]{2,1,0} parameter(39)
  %p40.1326 = f32[30,8192,4096]{2,1,0} parameter(40)
  %p41.1327 = f32[] parameter(41)
  %p42.1328 = f32[] parameter(42)
  %tuple.1329 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) tuple(s64[] %p0.1286, f32[16,512,1024]{2,1,0} %p1.1287, f32[30,1024,1024]{2,1,0} %p2.1288, f32[30,512,1024]{2,1,0} %p3.1289, f32[30,512,1024]{2,1,0} %p4.1290, /*index=5*/f32[30,1024,1024]{2,1,0} %p5.1291, f32[30,4096,1024]{2,1,0} %p6.1292, f32[30,4096,1024]{2,1,0} %p7.1293, f32[30,1024,4096]{2,1,0} %p8.1294, f32[30,1024]{1,0} %p9.1295, /*index=10*/f32[30,1024]{1,0} %p10.1296, f32[30,16,512,1024]{3,2,1,0} %p11.1297, f32[30,1024]{1,0} %p12.1298, f32[30,1024]{1,0} %p13.1299, f32[30,16,512,1]{3,2,1,0} %p14.1300, /*index=15*/f32[30,16,512,1024]{3,2,1,0} %p15.1301, f32[30,1024,1024]{2,1,0} %p16.1302, f32[30,8192,1024]{2,1,0} %p17.1303, f32[30,1024,512]{2,1,0} %p18.1304, f32[30,8192,1024]{2,1,0} %p19.1305, /*index=20*/f32[30,1024,512]{2,1,0} %p20.1306, f32[30,8192,1024]{2,1,0} %p21.1307, f32[30,128,512,128]{3,2,1,0} %p22.1308, f32[30,128,128,512]{3,2,1,0} %p23.1309, f32[30,16,8,512,512]{4,3,2,1,0} %p24.1310, /*index=25*/f32[30,128,512,512]{3,2,1,0} %p25.1311, f32[30,128,512,128]{3,2,1,0} %p26.1312, f32[30,1024,1024]{2,1,0} %p27.1313, f32[30,8192,1024]{2,1,0} %p28.1314, f32[30,16,512,1024]{3,2,1,0} %p29.1315, /*index=30*/f32[30,16,512,1]{3,2,1,0} %p30.1316, f32[30,16,512,1024]{3,2,1,0} %p31.1317, f32[30,1024,4096]{2,1,0} %p32.1318, f32[30,8192,1024]{2,1,0} %p33.1319, f32[30,16,512,4096]{3,2,1,0} %p34.1320, /*index=35*/f32[30,1024,4096]{2,1,0} %p35.1321, f32[30,8192,1024]{2,1,0} %p36.1322, f32[30,16,512,4096]{3,2,1,0} %p37.1323, f32[30,16,512,4096]{3,2,1,0} %p38.1324, f32[30,4096,1024]{2,1,0} %p39.1325, /*index=40*/f32[30,8192,4096]{2,1,0} %p40.1326, f32[] %p41.1327, f32[] %p42.1328)
  ROOT %while.1330 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) while((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %tuple.1329), condition=%Condition.1238, body=%Body.902
}

%AddComputation.1379 (x.1380: f32[], y.1381: f32[]) -> f32[] {
  %x.1380 = f32[] parameter(0)
  %y.1381 = f32[] parameter(1)
  ROOT %add.1382 = f32[] add(f32[] %x.1380, f32[] %y.1381)
}

%AddComputation.1417 (x.1418: f32[], y.1419: f32[]) -> f32[] {
  %x.1418 = f32[] parameter(0)
  %y.1419 = f32[] parameter(1)
  ROOT %add.1420 = f32[] add(f32[] %x.1418, f32[] %y.1419)
}

%AddComputation.1486 (x.1487: f32[], y.1488: f32[]) -> f32[] {
  %x.1487 = f32[] parameter(0)
  %y.1488 = f32[] parameter(1)
  ROOT %add.1489 = f32[] add(f32[] %x.1487, f32[] %y.1488)
}

%AddComputation.1508 (x.1509: f32[], y.1510: f32[]) -> f32[] {
  %x.1509 = f32[] parameter(0)
  %y.1510 = f32[] parameter(1)
  ROOT %add.1511 = f32[] add(f32[] %x.1509, f32[] %y.1510)
}

%AddComputation.1512 (x.1513: f32[], y.1514: f32[]) -> f32[] {
  %x.1513 = f32[] parameter(0)
  %y.1514 = f32[] parameter(1)
  ROOT %add.1515 = f32[] add(f32[] %x.1513, f32[] %y.1514)
}

%AddComputation.1516 (x.1517: f32[], y.1518: f32[]) -> f32[] {
  %x.1517 = f32[] parameter(0)
  %y.1518 = f32[] parameter(1)
  ROOT %add.1519 = f32[] add(f32[] %x.1517, f32[] %y.1518)
}

%AddComputation.1520 (x.1521: f32[], y.1522: f32[]) -> f32[] {
  %x.1521 = f32[] parameter(0)
  %y.1522 = f32[] parameter(1)
  ROOT %add.1523 = f32[] add(f32[] %x.1521, f32[] %y.1522)
}

%AddComputation.1524 (x.1525: f32[], y.1526: f32[]) -> f32[] {
  %x.1525 = f32[] parameter(0)
  %y.1526 = f32[] parameter(1)
  ROOT %add.1527 = f32[] add(f32[] %x.1525, f32[] %y.1526)
}

%AddComputation.1528 (x.1529: f32[], y.1530: f32[]) -> f32[] {
  %x.1529 = f32[] parameter(0)
  %y.1530 = f32[] parameter(1)
  ROOT %add.1531 = f32[] add(f32[] %x.1529, f32[] %y.1530)
}

%AddComputation.1532 (x.1533: f32[], y.1534: f32[]) -> f32[] {
  %x.1533 = f32[] parameter(0)
  %y.1534 = f32[] parameter(1)
  ROOT %add.1535 = f32[] add(f32[] %x.1533, f32[] %y.1534)
}

%FnComputation.1536 (p0.1538: f32[], p1.1540: f32[16,512,1024], p2.1545: f32[], p3.1547: f32[16,512,1], p4.1550: f32[], p5.1551: f32[1024], p6.1553: f32[1024,1024], p7.1555: f32[128,128,512], p8.1557: f32[], p9.1558: f32[16,8,512,512], p10.1559: f32[128,512,128], p11.1561: f32[1024,1024], p12.1565: f32[16,512,1024], p13.1571: f32[16,512,1], p14.1574: f32[1024], p15.1576: f32[1024,4096], p16.1578: f32[16,512,4096], p17.1579: f32[4096,1024], p18.1581: f32[16,512,1024], p19.1589: f32[1024,4096], p20.1594: f32[16,512,4096], p21.1609: f32[16,512,4096], p22.1679: f32[1024,512], p23.1681: f32[128,512,128], p24.1719: f32[1024,512], p25.1721: f32[128,512,512], p26.1791: f32[8192,1024], p27.1796: f32[8192,1024], p28.1801: f32[8192,1024], p29.1806: f32[8192,1024], p30.1811: f32[8192,1024], p31.1816: f32[8192,1024], p32.1821: f32[8192,4096], p33.1826: f32[16,512,1024], p34.1833: f32[16,512,1024]) -> (f32[16,512,1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=5*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024]) {
  %constant.1622 = s32[] constant(1024)
  %constant.1690 = s32[] constant(2)
  %constant.1693 = f32[] constant(0)
  %reshape.1694 = f32[1,1,1,1,1]{4,3,2,1,0} reshape(f32[] %constant.1693)
  %broadcast.1695 = f32[1,1,1,1,1]{4,3,2,1,0} broadcast(f32[1,1,1,1,1]{4,3,2,1,0} %reshape.1694), dimensions={0,1,2,3,4}
  %reshape.1696 = f32[1]{0} reshape(f32[1,1,1,1,1]{4,3,2,1,0} %broadcast.1695)
  %broadcast.1697 = f32[16,4,1,512,128]{4,3,2,1,0} broadcast(f32[1]{0} %reshape.1696), dimensions={2}
  %constant.1698 = f32[] constant(0)
  %reshape.1699 = f32[1,1,1,1,1]{4,3,2,1,0} reshape(f32[] %constant.1698)
  %broadcast.1700 = f32[1,1,1,1,1]{4,3,2,1,0} broadcast(f32[1,1,1,1,1]{4,3,2,1,0} %reshape.1699), dimensions={0,1,2,3,4}
  %reshape.1701 = f32[1]{0} reshape(f32[1,1,1,1,1]{4,3,2,1,0} %broadcast.1700)
  %broadcast.1702 = f32[16,4,1,512,128]{4,3,2,1,0} broadcast(f32[1]{0} %reshape.1701), dimensions={2}
  %constant.1704 = f32[] constant(0)
  %reshape.1705 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.1704)
  %broadcast.1706 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.1705), dimensions={0,1,2,3}
  %reshape.1707 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.1706)
  %broadcast.1708 = f32[16,4,512,128]{3,2,1,0} broadcast(f32[] %reshape.1707), dimensions={}
  %constant.1709 = f32[] constant(0)
  %reshape.1710 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.1709)
  %broadcast.1711 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.1710), dimensions={0,1,2,3}
  %reshape.1712 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.1711)
  %broadcast.1713 = f32[16,4,512,128]{3,2,1,0} broadcast(f32[] %reshape.1712), dimensions={}
  %constant.1730 = s32[] constant(2)
  %constant.1733 = f32[] constant(0)
  %reshape.1734 = f32[1,1,1,1,1]{4,3,2,1,0} reshape(f32[] %constant.1733)
  %broadcast.1735 = f32[1,1,1,1,1]{4,3,2,1,0} broadcast(f32[1,1,1,1,1]{4,3,2,1,0} %reshape.1734), dimensions={0,1,2,3,4}
  %reshape.1736 = f32[1]{0} reshape(f32[1,1,1,1,1]{4,3,2,1,0} %broadcast.1735)
  %broadcast.1737 = f32[16,4,1,512,128]{4,3,2,1,0} broadcast(f32[1]{0} %reshape.1736), dimensions={2}
  %constant.1738 = f32[] constant(0)
  %reshape.1739 = f32[1,1,1,1,1]{4,3,2,1,0} reshape(f32[] %constant.1738)
  %broadcast.1740 = f32[1,1,1,1,1]{4,3,2,1,0} broadcast(f32[1,1,1,1,1]{4,3,2,1,0} %reshape.1739), dimensions={0,1,2,3,4}
  %reshape.1741 = f32[1]{0} reshape(f32[1,1,1,1,1]{4,3,2,1,0} %broadcast.1740)
  %broadcast.1742 = f32[16,4,1,512,128]{4,3,2,1,0} broadcast(f32[1]{0} %reshape.1741), dimensions={2}
  %constant.1744 = f32[] constant(0)
  %reshape.1745 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.1744)
  %broadcast.1746 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.1745), dimensions={0,1,2,3}
  %reshape.1747 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.1746)
  %broadcast.1748 = f32[16,4,512,128]{3,2,1,0} broadcast(f32[] %reshape.1747), dimensions={}
  %constant.1749 = f32[] constant(0)
  %reshape.1750 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.1749)
  %broadcast.1751 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.1750), dimensions={0,1,2,3}
  %reshape.1752 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.1751)
  %broadcast.1753 = f32[16,4,512,128]{3,2,1,0} broadcast(f32[] %reshape.1752), dimensions={}
  %constant.1769 = s32[] constant(1024)
  %constant.1829 = s32[] constant(8192)
  %constant.1836 = s32[] constant(8192)
  %p18.1581 = f32[16,512,1024]{2,1,0} parameter(18)
  %reshape.1582 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %p18.1581)
  %p17.1579 = f32[4096,1024]{1,0} parameter(17)
  %transpose.1580 = f32[1024,4096]{0,1} transpose(f32[4096,1024]{1,0} %p17.1579), dimensions={1,0}
  %dot.1583 = f32[8192,4096]{1,0} dot(f32[8192,1024]{1,0} %reshape.1582, f32[1024,4096]{0,1} %transpose.1580), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1584 = f32[16,512,4096]{2,1,0} reshape(f32[8192,4096]{1,0} %dot.1583)
  %p21.1609 = f32[16,512,4096]{2,1,0} parameter(21)
  %multiply.1610 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %reshape.1584, f32[16,512,4096]{2,1,0} %p21.1609)
  %p20.1594 = f32[16,512,4096]{2,1,0} parameter(20)
  %logistic.1595 = f32[16,512,4096]{2,1,0} logistic(f32[16,512,4096]{2,1,0} %p20.1594)
  %constant.1596 = f32[] constant(1)
  %reshape.1597 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1596)
  %broadcast.1598 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1597), dimensions={0,1,2}
  %reshape.1599 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1598)
  %broadcast.1600 = f32[16,512,4096]{2,1,0} broadcast(f32[] %reshape.1599), dimensions={}
  %constant.1593 = f32[] constant(1)
  %broadcast.1601 = f32[16,512,4096]{2,1,0} broadcast(f32[] %constant.1593), dimensions={}
  %multiply.1602 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %logistic.1595, f32[16,512,4096]{2,1,0} %broadcast.1601)
  %subtract.1603 = f32[16,512,4096]{2,1,0} subtract(f32[16,512,4096]{2,1,0} %broadcast.1600, f32[16,512,4096]{2,1,0} %multiply.1602)
  %multiply.1604 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %p20.1594, f32[16,512,4096]{2,1,0} %subtract.1603)
  %constant.1592 = f32[] constant(1)
  %constant.1591 = f32[] constant(1)
  %multiply.1605 = f32[] multiply(f32[] %constant.1592, f32[] %constant.1591)
  %broadcast.1606 = f32[16,512,4096]{2,1,0} broadcast(f32[] %multiply.1605), dimensions={}
  %add.1607 = f32[16,512,4096]{2,1,0} add(f32[16,512,4096]{2,1,0} %multiply.1604, f32[16,512,4096]{2,1,0} %broadcast.1606)
  %multiply.1608 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %logistic.1595, f32[16,512,4096]{2,1,0} %add.1607)
  %multiply.1611 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %multiply.1610, f32[16,512,4096]{2,1,0} %multiply.1608)
  %reshape.1612 = f32[8192,4096]{1,0} reshape(f32[16,512,4096]{2,1,0} %multiply.1611)
  %p19.1589 = f32[1024,4096]{1,0} parameter(19)
  %transpose.1590 = f32[4096,1024]{0,1} transpose(f32[1024,4096]{1,0} %p19.1589), dimensions={1,0}
  %dot.1613 = f32[8192,1024]{1,0} dot(f32[8192,4096]{1,0} %reshape.1612, f32[4096,1024]{0,1} %transpose.1590), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1614 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1613)
  %p16.1578 = f32[16,512,4096]{2,1,0} parameter(16)
  %multiply.1585 = f32[16,512,4096]{2,1,0} multiply(f32[16,512,4096]{2,1,0} %reshape.1584, f32[16,512,4096]{2,1,0} %p16.1578)
  %reshape.1586 = f32[8192,4096]{1,0} reshape(f32[16,512,4096]{2,1,0} %multiply.1585)
  %p15.1576 = f32[1024,4096]{1,0} parameter(15)
  %transpose.1577 = f32[4096,1024]{0,1} transpose(f32[1024,4096]{1,0} %p15.1576), dimensions={1,0}
  %dot.1587 = f32[8192,1024]{1,0} dot(f32[8192,4096]{1,0} %reshape.1586, f32[4096,1024]{0,1} %transpose.1577), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1588 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1587)
  %constant.1575 = f32[] constant(1)
  %broadcast.1615 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1575), dimensions={}
  %multiply.1616 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.1588, f32[16,512,1024]{2,1,0} %broadcast.1615)
  %add.1617 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %reshape.1614, f32[16,512,1024]{2,1,0} %multiply.1616)
  %p14.1574 = f32[1024]{0} parameter(14)
  %broadcast.1618 = f32[16,512,1024]{2,1,0} broadcast(f32[1024]{0} %p14.1574), dimensions={2}
  %multiply.1619 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %add.1617, f32[16,512,1024]{2,1,0} %broadcast.1618)
  %p13.1571 = f32[16,512,1]{1,0,2} parameter(13)
  %reshape.1635 = f32[16,512]{1,0} reshape(f32[16,512,1]{1,0,2} %p13.1571)
  %broadcast.1636 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1635), dimensions={0,1}
  %multiply.1637 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1619, f32[16,512,1024]{2,1,0} %broadcast.1636)
  %constant.1634 = f32[] constant(1)
  %broadcast.1638 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1634), dimensions={}
  %multiply.1639 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1637, f32[16,512,1024]{2,1,0} %broadcast.1638)
  %add.1640 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %p18.1581, f32[16,512,1024]{2,1,0} %multiply.1639)
  %p12.1565 = f32[16,512,1024]{2,1,0} parameter(12)
  %multiply.1620 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1619, f32[16,512,1024]{2,1,0} %p12.1565)
  %constant.1621 = f32[] constant(0)
  %reduce.1623 = f32[16,512]{1,0} reduce(f32[16,512,1024]{2,1,0} %multiply.1620, f32[] %constant.1621), dimensions={2}, to_apply=%AddComputation.1508
  %reshape.1624 = f32[16,512,1]{2,1,0} reshape(f32[16,512]{1,0} %reduce.1623)
  %p4.1550 = f32[] parameter(4)
  %broadcast.1625 = f32[16,512,1]{2,1,0} broadcast(f32[] %p4.1550), dimensions={}
  %multiply.1626 = f32[16,512,1]{2,1,0} multiply(f32[16,512,1]{2,1,0} %reshape.1624, f32[16,512,1]{2,1,0} %broadcast.1625)
  %constant.1570 = f32[] constant(3)
  %broadcast.1572 = f32[16,512,1]{2,1,0} broadcast(f32[] %constant.1570), dimensions={}
  %power.1573 = f32[16,512,1]{2,1,0} power(f32[16,512,1]{1,0,2} %p13.1571, f32[16,512,1]{2,1,0} %broadcast.1572)
  %multiply.1627 = f32[16,512,1]{2,1,0} multiply(f32[16,512,1]{2,1,0} %multiply.1626, f32[16,512,1]{2,1,0} %power.1573)
  %broadcast.1628 = f32[16,512,1]{2,1,0} broadcast(f32[16,512,1]{2,1,0} %multiply.1627), dimensions={0,1,2}
  %reshape.1629 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %broadcast.1628)
  %broadcast.1630 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1629), dimensions={0,1}
  %p2.1545 = f32[] parameter(2)
  %broadcast.1631 = f32[16,512,1024]{2,1,0} broadcast(f32[] %p2.1545), dimensions={}
  %divide.1632 = f32[16,512,1024]{2,1,0} divide(f32[16,512,1024]{2,1,0} %broadcast.1630, f32[16,512,1024]{2,1,0} %broadcast.1631)
  %constant.1564 = f32[] constant(1)
  %broadcast.1566 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1564), dimensions={}
  %power.1567 = f32[16,512,1024]{2,1,0} power(f32[16,512,1024]{2,1,0} %p12.1565, f32[16,512,1024]{2,1,0} %broadcast.1566)
  %p0.1538 = f32[] parameter(0)
  %broadcast.1568 = f32[16,512,1024]{2,1,0} broadcast(f32[] %p0.1538), dimensions={}
  %multiply.1569 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %power.1567, f32[16,512,1024]{2,1,0} %broadcast.1568)
  %multiply.1633 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %divide.1632, f32[16,512,1024]{2,1,0} %multiply.1569)
  %constant.1563 = f32[] constant(1)
  %broadcast.1641 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1563), dimensions={}
  %multiply.1642 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1633, f32[16,512,1024]{2,1,0} %broadcast.1641)
  %add.1643 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %add.1640, f32[16,512,1024]{2,1,0} %multiply.1642)
  %p25.1721 = f32[128,512,512]{2,1,0} parameter(25)
  %transpose.1722 = f32[128,512,512]{1,2,0} transpose(f32[128,512,512]{2,1,0} %p25.1721), dimensions={0,2,1}
  %reshape.1644 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %add.1643)
  %p11.1561 = f32[1024,1024]{1,0} parameter(11)
  %transpose.1562 = f32[1024,1024]{0,1} transpose(f32[1024,1024]{1,0} %p11.1561), dimensions={1,0}
  %dot.1645 = f32[8192,1024]{1,0} dot(f32[8192,1024]{1,0} %reshape.1644, f32[1024,1024]{0,1} %transpose.1562), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1646 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1645)
  %reshape.1647 = f32[16,512,8,128]{3,2,1,0} reshape(f32[16,512,1024]{2,1,0} %reshape.1646)
  %transpose.1648 = f32[16,8,512,128]{3,1,2,0} transpose(f32[16,512,8,128]{3,2,1,0} %reshape.1647), dimensions={0,2,1,3}
  %reshape.1649 = f32[16,8,512,128,1]{4,3,2,1,0} reshape(f32[16,8,512,128]{3,1,2,0} %transpose.1648)
  %transpose.1650 = f32[16,8,512,1,128]{3,4,2,1,0} transpose(f32[16,8,512,128,1]{4,3,2,1,0} %reshape.1649), dimensions={0,1,2,4,3}
  %reshape.1651 = f32[128,512,128]{2,1,0} reshape(f32[16,8,512,1,128]{3,4,2,1,0} %transpose.1650)
  %dot.1723 = f32[128,512,128]{2,1,0} dot(f32[128,512,512]{1,2,0} %transpose.1722, f32[128,512,128]{2,1,0} %reshape.1651), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.1724 = f32[16,8,512,128,1]{4,3,2,1,0} reshape(f32[128,512,128]{2,1,0} %dot.1723)
  %transpose.1725 = f32[16,8,1,128,512]{2,3,4,1,0} transpose(f32[16,8,512,128,1]{4,3,2,1,0} %reshape.1724), dimensions={0,1,4,3,2}
  %transpose.1726 = f32[16,8,512,128,1]{4,3,2,1,0} transpose(f32[16,8,1,128,512]{2,3,4,1,0} %transpose.1725), dimensions={0,1,4,3,2}
  %reshape.1727 = f32[16,8,512,128]{3,2,1,0} reshape(f32[16,8,512,128,1]{4,3,2,1,0} %transpose.1726)
  %reshape.1728 = f32[16,4,2,512,128]{4,3,2,1,0} reshape(f32[16,8,512,128]{3,2,1,0} %reshape.1727)
  %constant.1729 = f32[] constant(0)
  %reduce.1731 = f32[16,4,512,128]{3,2,1,0} reduce(f32[16,4,2,512,128]{4,3,2,1,0} %reshape.1728, f32[] %constant.1729), dimensions={2}, to_apply=%AddComputation.1520
  %reshape.1732 = f32[16,4,1,512,128]{4,3,2,1,0} reshape(f32[16,4,512,128]{3,2,1,0} %reduce.1731)
  %reshape.1743 = f32[16,4,512,128]{3,2,1,0} reshape(f32[16,4,1,512,128]{4,3,2,1,0} %reshape.1732)
  %transpose.1754 = f32[16,512,4,128]{3,1,2,0} transpose(f32[16,4,512,128]{3,2,1,0} %reshape.1743), dimensions={0,2,1,3}
  %reshape.1755 = f32[16,512,512]{2,1,0} reshape(f32[16,512,4,128]{3,1,2,0} %transpose.1754)
  %reshape.1756 = f32[8192,512]{1,0} reshape(f32[16,512,512]{2,1,0} %reshape.1755)
  %p24.1719 = f32[1024,512]{1,0} parameter(24)
  %transpose.1720 = f32[512,1024]{0,1} transpose(f32[1024,512]{1,0} %p24.1719), dimensions={1,0}
  %dot.1757 = f32[8192,1024]{1,0} dot(f32[8192,512]{1,0} %reshape.1756, f32[512,1024]{0,1} %transpose.1720), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1758 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1757)
  %p23.1681 = f32[128,512,128]{2,1,0} parameter(23)
  %transpose.1682 = f32[128,128,512]{1,2,0} transpose(f32[128,512,128]{2,1,0} %p23.1681), dimensions={0,2,1}
  %p9.1558 = f32[16,8,512,512]{3,2,1,0} parameter(9)
  %p10.1559 = f32[128,512,128]{2,1,0} parameter(10)
  %transpose.1560 = f32[128,128,512]{1,2,0} transpose(f32[128,512,128]{2,1,0} %p10.1559), dimensions={0,2,1}
  %dot.1652 = f32[128,512,512]{2,1,0} dot(f32[128,512,128]{2,1,0} %reshape.1651, f32[128,128,512]{1,2,0} %transpose.1560), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.1653 = f32[16,8,512,512,1]{4,3,2,1,0} reshape(f32[128,512,512]{2,1,0} %dot.1652)
  %transpose.1654 = f32[16,8,512,1,512]{3,4,2,1,0} transpose(f32[16,8,512,512,1]{4,3,2,1,0} %reshape.1653), dimensions={0,1,2,4,3}
  %transpose.1655 = f32[16,8,512,512,1]{4,3,2,1,0} transpose(f32[16,8,512,1,512]{3,4,2,1,0} %transpose.1654), dimensions={0,1,2,4,3}
  %reshape.1656 = f32[16,8,512,512]{3,2,1,0} reshape(f32[16,8,512,512,1]{4,3,2,1,0} %transpose.1655)
  %multiply.1657 = f32[16,8,512,512]{3,2,1,0} multiply(f32[16,8,512,512]{3,2,1,0} %reshape.1656, f32[16,8,512,512]{3,2,1,0} %p9.1558)
  %constant.1658 = f32[] constant(0)
  %reduce.1659 = f32[16,8,512]{2,1,0} reduce(f32[16,8,512,512]{3,2,1,0} %multiply.1657, f32[] %constant.1658), dimensions={3}, to_apply=%AddComputation.1512
  %broadcast.1660 = f32[16,8,512,512]{3,2,1,0} broadcast(f32[16,8,512]{2,1,0} %reduce.1659), dimensions={0,1,2}
  %subtract.1661 = f32[16,8,512,512]{3,2,1,0} subtract(f32[16,8,512,512]{3,2,1,0} %reshape.1656, f32[16,8,512,512]{3,2,1,0} %broadcast.1660)
  %multiply.1662 = f32[16,8,512,512]{3,2,1,0} multiply(f32[16,8,512,512]{3,2,1,0} %p9.1558, f32[16,8,512,512]{3,2,1,0} %subtract.1661)
  %p8.1557 = f32[] parameter(8)
  %broadcast.1663 = f32[16,8,512,512]{3,2,1,0} broadcast(f32[] %p8.1557), dimensions={}
  %divide.1664 = f32[16,8,512,512]{3,2,1,0} divide(f32[16,8,512,512]{3,2,1,0} %multiply.1662, f32[16,8,512,512]{3,2,1,0} %broadcast.1663)
  %reshape.1665 = f32[16,8,512,512,1]{4,3,2,1,0} reshape(f32[16,8,512,512]{3,2,1,0} %divide.1664)
  %transpose.1666 = f32[16,8,512,1,512]{3,4,2,1,0} transpose(f32[16,8,512,512,1]{4,3,2,1,0} %reshape.1665), dimensions={0,1,2,4,3}
  %reshape.1667 = f32[128,512,512]{2,1,0} reshape(f32[16,8,512,1,512]{3,4,2,1,0} %transpose.1666)
  %dot.1683 = f32[128,128,512]{2,1,0} dot(f32[128,128,512]{1,2,0} %transpose.1682, f32[128,512,512]{2,1,0} %reshape.1667), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.1684 = f32[16,8,128,512,1]{4,3,2,1,0} reshape(f32[128,128,512]{2,1,0} %dot.1683)
  %transpose.1685 = f32[16,8,1,512,128]{2,3,4,1,0} transpose(f32[16,8,128,512,1]{4,3,2,1,0} %reshape.1684), dimensions={0,1,4,3,2}
  %transpose.1686 = f32[16,8,512,128,1]{4,2,3,1,0} transpose(f32[16,8,1,512,128]{2,3,4,1,0} %transpose.1685), dimensions={0,1,3,4,2}
  %reshape.1687 = f32[16,8,512,128]{3,2,1,0} reshape(f32[16,8,512,128,1]{4,2,3,1,0} %transpose.1686)
  %reshape.1688 = f32[16,4,2,512,128]{4,3,2,1,0} reshape(f32[16,8,512,128]{3,2,1,0} %reshape.1687)
  %constant.1689 = f32[] constant(0)
  %reduce.1691 = f32[16,4,512,128]{3,2,1,0} reduce(f32[16,4,2,512,128]{4,3,2,1,0} %reshape.1688, f32[] %constant.1689), dimensions={2}, to_apply=%AddComputation.1516
  %reshape.1692 = f32[16,4,1,512,128]{4,3,2,1,0} reshape(f32[16,4,512,128]{3,2,1,0} %reduce.1691)
  %reshape.1703 = f32[16,4,512,128]{3,2,1,0} reshape(f32[16,4,1,512,128]{4,3,2,1,0} %reshape.1692)
  %transpose.1714 = f32[16,512,4,128]{3,1,2,0} transpose(f32[16,4,512,128]{3,2,1,0} %reshape.1703), dimensions={0,2,1,3}
  %reshape.1715 = f32[16,512,512]{2,1,0} reshape(f32[16,512,4,128]{3,1,2,0} %transpose.1714)
  %reshape.1716 = f32[8192,512]{1,0} reshape(f32[16,512,512]{2,1,0} %reshape.1715)
  %p22.1679 = f32[1024,512]{1,0} parameter(22)
  %transpose.1680 = f32[512,1024]{0,1} transpose(f32[1024,512]{1,0} %p22.1679), dimensions={1,0}
  %dot.1717 = f32[8192,1024]{1,0} dot(f32[8192,512]{1,0} %reshape.1716, f32[512,1024]{0,1} %transpose.1680), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1718 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1717)
  %constant.1678 = f32[] constant(1)
  %broadcast.1759 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1678), dimensions={}
  %multiply.1760 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.1718, f32[16,512,1024]{2,1,0} %broadcast.1759)
  %add.1761 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %reshape.1758, f32[16,512,1024]{2,1,0} %multiply.1760)
  %p7.1555 = f32[128,128,512]{2,1,0} parameter(7)
  %transpose.1556 = f32[128,512,128]{1,2,0} transpose(f32[128,128,512]{2,1,0} %p7.1555), dimensions={0,2,1}
  %dot.1668 = f32[128,512,128]{2,1,0} dot(f32[128,512,512]{2,1,0} %reshape.1667, f32[128,512,128]{1,2,0} %transpose.1556), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.1669 = f32[16,8,512,128,1]{4,3,2,1,0} reshape(f32[128,512,128]{2,1,0} %dot.1668)
  %transpose.1670 = f32[16,8,512,1,128]{3,4,2,1,0} transpose(f32[16,8,512,128,1]{4,3,2,1,0} %reshape.1669), dimensions={0,1,2,4,3}
  %transpose.1671 = f32[16,8,512,128,1]{4,3,2,1,0} transpose(f32[16,8,512,1,128]{3,4,2,1,0} %transpose.1670), dimensions={0,1,2,4,3}
  %reshape.1672 = f32[16,8,512,128]{3,2,1,0} reshape(f32[16,8,512,128,1]{4,3,2,1,0} %transpose.1671)
  %transpose.1673 = f32[16,512,8,128]{3,1,2,0} transpose(f32[16,8,512,128]{3,2,1,0} %reshape.1672), dimensions={0,2,1,3}
  %reshape.1674 = f32[16,512,1024]{2,1,0} reshape(f32[16,512,8,128]{3,1,2,0} %transpose.1673)
  %reshape.1675 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %reshape.1674)
  %p6.1553 = f32[1024,1024]{1,0} parameter(6)
  %transpose.1554 = f32[1024,1024]{0,1} transpose(f32[1024,1024]{1,0} %p6.1553), dimensions={1,0}
  %dot.1676 = f32[8192,1024]{1,0} dot(f32[8192,1024]{1,0} %reshape.1675, f32[1024,1024]{0,1} %transpose.1554), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1677 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1676)
  %constant.1552 = f32[] constant(1)
  %broadcast.1762 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1552), dimensions={}
  %multiply.1763 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.1677, f32[16,512,1024]{2,1,0} %broadcast.1762)
  %add.1764 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %add.1761, f32[16,512,1024]{2,1,0} %multiply.1763)
  %p5.1551 = f32[1024]{0} parameter(5)
  %broadcast.1765 = f32[16,512,1024]{2,1,0} broadcast(f32[1024]{0} %p5.1551), dimensions={2}
  %multiply.1766 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %add.1764, f32[16,512,1024]{2,1,0} %broadcast.1765)
  %p3.1547 = f32[16,512,1]{1,0,2} parameter(3)
  %reshape.1782 = f32[16,512]{1,0} reshape(f32[16,512,1]{1,0,2} %p3.1547)
  %broadcast.1783 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1782), dimensions={0,1}
  %multiply.1784 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1766, f32[16,512,1024]{2,1,0} %broadcast.1783)
  %constant.1781 = f32[] constant(1)
  %broadcast.1785 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1781), dimensions={}
  %multiply.1786 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1784, f32[16,512,1024]{2,1,0} %broadcast.1785)
  %add.1787 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %add.1643, f32[16,512,1024]{2,1,0} %multiply.1786)
  %p1.1540 = f32[16,512,1024]{2,1,0} parameter(1)
  %multiply.1767 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1766, f32[16,512,1024]{2,1,0} %p1.1540)
  %constant.1768 = f32[] constant(0)
  %reduce.1770 = f32[16,512]{1,0} reduce(f32[16,512,1024]{2,1,0} %multiply.1767, f32[] %constant.1768), dimensions={2}, to_apply=%AddComputation.1524
  %reshape.1771 = f32[16,512,1]{2,1,0} reshape(f32[16,512]{1,0} %reduce.1770)
  %broadcast.1772 = f32[16,512,1]{2,1,0} broadcast(f32[] %p4.1550), dimensions={}
  %multiply.1773 = f32[16,512,1]{2,1,0} multiply(f32[16,512,1]{2,1,0} %reshape.1771, f32[16,512,1]{2,1,0} %broadcast.1772)
  %constant.1546 = f32[] constant(3)
  %broadcast.1548 = f32[16,512,1]{2,1,0} broadcast(f32[] %constant.1546), dimensions={}
  %power.1549 = f32[16,512,1]{2,1,0} power(f32[16,512,1]{1,0,2} %p3.1547, f32[16,512,1]{2,1,0} %broadcast.1548)
  %multiply.1774 = f32[16,512,1]{2,1,0} multiply(f32[16,512,1]{2,1,0} %multiply.1773, f32[16,512,1]{2,1,0} %power.1549)
  %broadcast.1775 = f32[16,512,1]{2,1,0} broadcast(f32[16,512,1]{2,1,0} %multiply.1774), dimensions={0,1,2}
  %reshape.1776 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %broadcast.1775)
  %broadcast.1777 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1776), dimensions={0,1}
  %broadcast.1778 = f32[16,512,1024]{2,1,0} broadcast(f32[] %p2.1545), dimensions={}
  %divide.1779 = f32[16,512,1024]{2,1,0} divide(f32[16,512,1024]{2,1,0} %broadcast.1777, f32[16,512,1024]{2,1,0} %broadcast.1778)
  %constant.1539 = f32[] constant(1)
  %broadcast.1541 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1539), dimensions={}
  %power.1542 = f32[16,512,1024]{2,1,0} power(f32[16,512,1024]{2,1,0} %p1.1540, f32[16,512,1024]{2,1,0} %broadcast.1541)
  %broadcast.1543 = f32[16,512,1024]{2,1,0} broadcast(f32[] %p0.1538), dimensions={}
  %multiply.1544 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %power.1542, f32[16,512,1024]{2,1,0} %broadcast.1543)
  %multiply.1780 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %divide.1779, f32[16,512,1024]{2,1,0} %multiply.1544)
  %constant.1537 = f32[] constant(1)
  %broadcast.1788 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1537), dimensions={}
  %multiply.1789 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1780, f32[16,512,1024]{2,1,0} %broadcast.1788)
  %add.1790 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %add.1787, f32[16,512,1024]{2,1,0} %multiply.1789)
  %transpose.1792 = f32[1024,8192]{0,1} transpose(f32[8192,1024]{1,0} %reshape.1675), dimensions={1,0}
  %p26.1791 = f32[8192,1024]{1,0} parameter(26)
  %dot.1793 = f32[1024,1024]{1,0} dot(f32[1024,8192]{0,1} %transpose.1792, f32[8192,1024]{1,0} %p26.1791), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1794 = f32[1024,1024]{0,1} transpose(f32[1024,1024]{1,0} %dot.1793), dimensions={1,0}
  %transpose.1795 = f32[1024,1024]{1,0} transpose(f32[1024,1024]{0,1} %transpose.1794), dimensions={1,0}
  %transpose.1797 = f32[512,8192]{0,1} transpose(f32[8192,512]{1,0} %reshape.1716), dimensions={1,0}
  %p27.1796 = f32[8192,1024]{1,0} parameter(27)
  %dot.1798 = f32[512,1024]{1,0} dot(f32[512,8192]{0,1} %transpose.1797, f32[8192,1024]{1,0} %p27.1796), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1799 = f32[1024,512]{0,1} transpose(f32[512,1024]{1,0} %dot.1798), dimensions={1,0}
  %transpose.1800 = f32[512,1024]{1,0} transpose(f32[1024,512]{0,1} %transpose.1799), dimensions={1,0}
  %transpose.1802 = f32[512,8192]{0,1} transpose(f32[8192,512]{1,0} %reshape.1756), dimensions={1,0}
  %p28.1801 = f32[8192,1024]{1,0} parameter(28)
  %dot.1803 = f32[512,1024]{1,0} dot(f32[512,8192]{0,1} %transpose.1802, f32[8192,1024]{1,0} %p28.1801), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1804 = f32[1024,512]{0,1} transpose(f32[512,1024]{1,0} %dot.1803), dimensions={1,0}
  %transpose.1805 = f32[512,1024]{1,0} transpose(f32[1024,512]{0,1} %transpose.1804), dimensions={1,0}
  %transpose.1807 = f32[1024,8192]{0,1} transpose(f32[8192,1024]{1,0} %reshape.1644), dimensions={1,0}
  %p29.1806 = f32[8192,1024]{1,0} parameter(29)
  %dot.1808 = f32[1024,1024]{1,0} dot(f32[1024,8192]{0,1} %transpose.1807, f32[8192,1024]{1,0} %p29.1806), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1809 = f32[1024,1024]{0,1} transpose(f32[1024,1024]{1,0} %dot.1808), dimensions={1,0}
  %transpose.1810 = f32[1024,1024]{1,0} transpose(f32[1024,1024]{0,1} %transpose.1809), dimensions={1,0}
  %transpose.1812 = f32[4096,8192]{0,1} transpose(f32[8192,4096]{1,0} %reshape.1612), dimensions={1,0}
  %p30.1811 = f32[8192,1024]{1,0} parameter(30)
  %dot.1813 = f32[4096,1024]{1,0} dot(f32[4096,8192]{0,1} %transpose.1812, f32[8192,1024]{1,0} %p30.1811), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1814 = f32[1024,4096]{0,1} transpose(f32[4096,1024]{1,0} %dot.1813), dimensions={1,0}
  %transpose.1815 = f32[4096,1024]{1,0} transpose(f32[1024,4096]{0,1} %transpose.1814), dimensions={1,0}
  %transpose.1817 = f32[4096,8192]{0,1} transpose(f32[8192,4096]{1,0} %reshape.1586), dimensions={1,0}
  %p31.1816 = f32[8192,1024]{1,0} parameter(31)
  %dot.1818 = f32[4096,1024]{1,0} dot(f32[4096,8192]{0,1} %transpose.1817, f32[8192,1024]{1,0} %p31.1816), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1819 = f32[1024,4096]{0,1} transpose(f32[4096,1024]{1,0} %dot.1818), dimensions={1,0}
  %transpose.1820 = f32[4096,1024]{1,0} transpose(f32[1024,4096]{0,1} %transpose.1819), dimensions={1,0}
  %transpose.1822 = f32[1024,8192]{0,1} transpose(f32[8192,1024]{1,0} %reshape.1582), dimensions={1,0}
  %p32.1821 = f32[8192,4096]{1,0} parameter(32)
  %dot.1823 = f32[1024,4096]{1,0} dot(f32[1024,8192]{0,1} %transpose.1822, f32[8192,4096]{1,0} %p32.1821), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1824 = f32[4096,1024]{0,1} transpose(f32[1024,4096]{1,0} %dot.1823), dimensions={1,0}
  %transpose.1825 = f32[1024,4096]{1,0} transpose(f32[4096,1024]{0,1} %transpose.1824), dimensions={1,0}
  %p33.1826 = f32[16,512,1024]{2,1,0} parameter(33)
  %multiply.1827 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %add.1764, f32[16,512,1024]{2,1,0} %p33.1826)
  %constant.1828 = f32[] constant(0)
  %reduce.1830 = f32[1024]{0} reduce(f32[16,512,1024]{2,1,0} %multiply.1827, f32[] %constant.1828), dimensions={0,1}, to_apply=%AddComputation.1528
  %reshape.1831 = f32[1,1,1024]{2,1,0} reshape(f32[1024]{0} %reduce.1830)
  %reshape.1832 = f32[1024]{0} reshape(f32[1,1,1024]{2,1,0} %reshape.1831)
  %p34.1833 = f32[16,512,1024]{2,1,0} parameter(34)
  %multiply.1834 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %add.1617, f32[16,512,1024]{2,1,0} %p34.1833)
  %constant.1835 = f32[] constant(0)
  %reduce.1837 = f32[1024]{0} reduce(f32[16,512,1024]{2,1,0} %multiply.1834, f32[] %constant.1835), dimensions={0,1}, to_apply=%AddComputation.1532
  %reshape.1838 = f32[1,1,1024]{2,1,0} reshape(f32[1024]{0} %reduce.1837)
  %reshape.1839 = f32[1024]{0} reshape(f32[1,1,1024]{2,1,0} %reshape.1838)
  ROOT %tuple.1840 = (f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) tuple(f32[16,512,1024]{2,1,0} %add.1790, f32[1024,1024]{1,0} %transpose.1795, f32[512,1024]{1,0} %transpose.1800, f32[512,1024]{1,0} %transpose.1805, f32[1024,1024]{1,0} %transpose.1810, /*index=5*/f32[4096,1024]{1,0} %transpose.1815, f32[4096,1024]{1,0} %transpose.1820, f32[1024,4096]{1,0} %transpose.1825, f32[1024]{0} %reshape.1832, f32[1024]{0} %reshape.1839)
}

%Body.1841 (p0.1842: (s64[], f32[16,512,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], /*index=5*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], /*index=10*/f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], /*index=15*/f32[30,16,8,512,512], f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], /*index=20*/f32[30,16,512,1024], f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], /*index=25*/f32[30,16,512,4096], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], /*index=30*/f32[30,4096,1024], f32[30,8192,4096], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=35*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=40*/f32[30,1024], f32[], f32[], f32[], f32[])) -> (s64[], f32[16,512,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], /*index=5*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], /*index=10*/f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], /*index=15*/f32[30,16,8,512,512], f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], /*index=20*/f32[30,16,512,1024], f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], /*index=25*/f32[30,16,512,4096], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], /*index=30*/f32[30,4096,1024], f32[30,8192,4096], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=35*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=40*/f32[30,1024], f32[], f32[], f32[], f32[]) {
  %p0.1842 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) parameter(0)
  %get-tuple-element.1843 = s64[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=0
  %constant.2157 = s64[] constant(1)
  %add.2158 = s64[] add(s64[] %get-tuple-element.1843, s64[] %constant.2157)
  %get-tuple-element.1887 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=44
  %get-tuple-element.1845 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=2
  %constant.1888 = s64[] constant(29)
  %subtract.1889 = s64[] subtract(s64[] %constant.1888, s64[] %get-tuple-element.1843)
  %constant.1890 = s64[] constant(0)
  %broadcast.1891 = s64[] broadcast(s64[] %constant.1890), dimensions={}
  %constant.1892 = s64[] constant(0)
  %broadcast.1893 = s64[] broadcast(s64[] %constant.1892), dimensions={}
  %constant.1894 = s64[] constant(0)
  %broadcast.1895 = s64[] broadcast(s64[] %constant.1894), dimensions={}
  %dynamic-slice.1896 = f32[1,16,512,1024]{3,2,1,0} dynamic-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1845, s64[] %subtract.1889, s64[] %broadcast.1891, s64[] %broadcast.1893, s64[] %broadcast.1895), dynamic_slice_sizes={1,16,512,1024}
  %reshape.1897 = f32[16,512,1024]{2,1,0} reshape(f32[1,16,512,1024]{3,2,1,0} %dynamic-slice.1896)
  %get-tuple-element.1886 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=43
  %get-tuple-element.1848 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=5
  %constant.1906 = s64[] constant(0)
  %broadcast.1907 = s64[] broadcast(s64[] %constant.1906), dimensions={}
  %constant.1908 = s64[] constant(0)
  %broadcast.1909 = s64[] broadcast(s64[] %constant.1908), dimensions={}
  %constant.1910 = s64[] constant(0)
  %broadcast.1911 = s64[] broadcast(s64[] %constant.1910), dimensions={}
  %dynamic-slice.1912 = f32[1,16,512,1]{3,2,1,0} dynamic-slice(f32[30,16,512,1]{3,2,1,0} %get-tuple-element.1848, s64[] %subtract.1889, s64[] %broadcast.1907, s64[] %broadcast.1909, s64[] %broadcast.1911), dynamic_slice_sizes={1,16,512,1}
  %reshape.1913 = f32[16,512,1]{2,1,0} reshape(f32[1,16,512,1]{3,2,1,0} %dynamic-slice.1912)
  %get-tuple-element.1885 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=42
  %get-tuple-element.1846 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=3
  %constant.1898 = s64[] constant(0)
  %broadcast.1899 = s64[] broadcast(s64[] %constant.1898), dimensions={}
  %dynamic-slice.1900 = f32[1,1024]{1,0} dynamic-slice(f32[30,1024]{1,0} %get-tuple-element.1846, s64[] %subtract.1889, s64[] %broadcast.1899), dynamic_slice_sizes={1,1024}
  %reshape.1901 = f32[1024]{0} reshape(f32[1,1024]{1,0} %dynamic-slice.1900)
  %get-tuple-element.1850 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=7
  %constant.1922 = s64[] constant(0)
  %broadcast.1923 = s64[] broadcast(s64[] %constant.1922), dimensions={}
  %constant.1924 = s64[] constant(0)
  %broadcast.1925 = s64[] broadcast(s64[] %constant.1924), dimensions={}
  %dynamic-slice.1926 = f32[1,1024,1024]{2,1,0} dynamic-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.1850, s64[] %subtract.1889, s64[] %broadcast.1923, s64[] %broadcast.1925), dynamic_slice_sizes={1,1024,1024}
  %reshape.1927 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %dynamic-slice.1926)
  %get-tuple-element.1857 = f32[30,128,128,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=14
  %constant.1966 = s64[] constant(0)
  %broadcast.1967 = s64[] broadcast(s64[] %constant.1966), dimensions={}
  %constant.1968 = s64[] constant(0)
  %broadcast.1969 = s64[] broadcast(s64[] %constant.1968), dimensions={}
  %constant.1970 = s64[] constant(0)
  %broadcast.1971 = s64[] broadcast(s64[] %constant.1970), dimensions={}
  %dynamic-slice.1972 = f32[1,128,128,512]{3,2,1,0} dynamic-slice(f32[30,128,128,512]{3,2,1,0} %get-tuple-element.1857, s64[] %subtract.1889, s64[] %broadcast.1967, s64[] %broadcast.1969, s64[] %broadcast.1971), dynamic_slice_sizes={1,128,128,512}
  %reshape.1973 = f32[128,128,512]{2,1,0} reshape(f32[1,128,128,512]{3,2,1,0} %dynamic-slice.1972)
  %get-tuple-element.1884 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=41
  %get-tuple-element.1858 = f32[30,16,8,512,512]{4,3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=15
  %constant.1974 = s64[] constant(0)
  %broadcast.1975 = s64[] broadcast(s64[] %constant.1974), dimensions={}
  %constant.1976 = s64[] constant(0)
  %broadcast.1977 = s64[] broadcast(s64[] %constant.1976), dimensions={}
  %constant.1978 = s64[] constant(0)
  %broadcast.1979 = s64[] broadcast(s64[] %constant.1978), dimensions={}
  %constant.1980 = s64[] constant(0)
  %broadcast.1981 = s64[] broadcast(s64[] %constant.1980), dimensions={}
  %dynamic-slice.1982 = f32[1,16,8,512,512]{4,3,2,1,0} dynamic-slice(f32[30,16,8,512,512]{4,3,2,1,0} %get-tuple-element.1858, s64[] %subtract.1889, s64[] %broadcast.1975, s64[] %broadcast.1977, s64[] %broadcast.1979, /*index=5*/s64[] %broadcast.1981), dynamic_slice_sizes={1,16,8,512,512}
  %reshape.1983 = f32[16,8,512,512]{3,2,1,0} reshape(f32[1,16,8,512,512]{4,3,2,1,0} %dynamic-slice.1982)
  %get-tuple-element.1860 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=17
  %constant.1992 = s64[] constant(0)
  %broadcast.1993 = s64[] broadcast(s64[] %constant.1992), dimensions={}
  %constant.1994 = s64[] constant(0)
  %broadcast.1995 = s64[] broadcast(s64[] %constant.1994), dimensions={}
  %constant.1996 = s64[] constant(0)
  %broadcast.1997 = s64[] broadcast(s64[] %constant.1996), dimensions={}
  %dynamic-slice.1998 = f32[1,128,512,128]{3,2,1,0} dynamic-slice(f32[30,128,512,128]{3,2,1,0} %get-tuple-element.1860, s64[] %subtract.1889, s64[] %broadcast.1993, s64[] %broadcast.1995, s64[] %broadcast.1997), dynamic_slice_sizes={1,128,512,128}
  %reshape.1999 = f32[128,512,128]{2,1,0} reshape(f32[1,128,512,128]{3,2,1,0} %dynamic-slice.1998)
  %get-tuple-element.1861 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=18
  %constant.2000 = s64[] constant(0)
  %broadcast.2001 = s64[] broadcast(s64[] %constant.2000), dimensions={}
  %constant.2002 = s64[] constant(0)
  %broadcast.2003 = s64[] broadcast(s64[] %constant.2002), dimensions={}
  %dynamic-slice.2004 = f32[1,1024,1024]{2,1,0} dynamic-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.1861, s64[] %subtract.1889, s64[] %broadcast.2001, s64[] %broadcast.2003), dynamic_slice_sizes={1,1024,1024}
  %reshape.2005 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %dynamic-slice.2004)
  %get-tuple-element.1863 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=20
  %constant.2012 = s64[] constant(0)
  %broadcast.2013 = s64[] broadcast(s64[] %constant.2012), dimensions={}
  %constant.2014 = s64[] constant(0)
  %broadcast.2015 = s64[] broadcast(s64[] %constant.2014), dimensions={}
  %constant.2016 = s64[] constant(0)
  %broadcast.2017 = s64[] broadcast(s64[] %constant.2016), dimensions={}
  %dynamic-slice.2018 = f32[1,16,512,1024]{3,2,1,0} dynamic-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1863, s64[] %subtract.1889, s64[] %broadcast.2013, s64[] %broadcast.2015, s64[] %broadcast.2017), dynamic_slice_sizes={1,16,512,1024}
  %reshape.2019 = f32[16,512,1024]{2,1,0} reshape(f32[1,16,512,1024]{3,2,1,0} %dynamic-slice.2018)
  %get-tuple-element.1864 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=21
  %constant.2020 = s64[] constant(0)
  %broadcast.2021 = s64[] broadcast(s64[] %constant.2020), dimensions={}
  %constant.2022 = s64[] constant(0)
  %broadcast.2023 = s64[] broadcast(s64[] %constant.2022), dimensions={}
  %constant.2024 = s64[] constant(0)
  %broadcast.2025 = s64[] broadcast(s64[] %constant.2024), dimensions={}
  %dynamic-slice.2026 = f32[1,16,512,1]{3,2,1,0} dynamic-slice(f32[30,16,512,1]{3,2,1,0} %get-tuple-element.1864, s64[] %subtract.1889, s64[] %broadcast.2021, s64[] %broadcast.2023, s64[] %broadcast.2025), dynamic_slice_sizes={1,16,512,1}
  %reshape.2027 = f32[16,512,1]{2,1,0} reshape(f32[1,16,512,1]{3,2,1,0} %dynamic-slice.2026)
  %get-tuple-element.1847 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=4
  %constant.1902 = s64[] constant(0)
  %broadcast.1903 = s64[] broadcast(s64[] %constant.1902), dimensions={}
  %dynamic-slice.1904 = f32[1,1024]{1,0} dynamic-slice(f32[30,1024]{1,0} %get-tuple-element.1847, s64[] %subtract.1889, s64[] %broadcast.1903), dynamic_slice_sizes={1,1024}
  %reshape.1905 = f32[1024]{0} reshape(f32[1,1024]{1,0} %dynamic-slice.1904)
  %get-tuple-element.1866 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=23
  %constant.2036 = s64[] constant(0)
  %broadcast.2037 = s64[] broadcast(s64[] %constant.2036), dimensions={}
  %constant.2038 = s64[] constant(0)
  %broadcast.2039 = s64[] broadcast(s64[] %constant.2038), dimensions={}
  %dynamic-slice.2040 = f32[1,1024,4096]{2,1,0} dynamic-slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.1866, s64[] %subtract.1889, s64[] %broadcast.2037, s64[] %broadcast.2039), dynamic_slice_sizes={1,1024,4096}
  %reshape.2041 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %dynamic-slice.2040)
  %get-tuple-element.1872 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=29
  %constant.2076 = s64[] constant(0)
  %broadcast.2077 = s64[] broadcast(s64[] %constant.2076), dimensions={}
  %constant.2078 = s64[] constant(0)
  %broadcast.2079 = s64[] broadcast(s64[] %constant.2078), dimensions={}
  %constant.2080 = s64[] constant(0)
  %broadcast.2081 = s64[] broadcast(s64[] %constant.2080), dimensions={}
  %dynamic-slice.2082 = f32[1,16,512,4096]{3,2,1,0} dynamic-slice(f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1872, s64[] %subtract.1889, s64[] %broadcast.2077, s64[] %broadcast.2079, s64[] %broadcast.2081), dynamic_slice_sizes={1,16,512,4096}
  %reshape.2083 = f32[16,512,4096]{2,1,0} reshape(f32[1,16,512,4096]{3,2,1,0} %dynamic-slice.2082)
  %get-tuple-element.1873 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=30
  %constant.2084 = s64[] constant(0)
  %broadcast.2085 = s64[] broadcast(s64[] %constant.2084), dimensions={}
  %constant.2086 = s64[] constant(0)
  %broadcast.2087 = s64[] broadcast(s64[] %constant.2086), dimensions={}
  %dynamic-slice.2088 = f32[1,4096,1024]{2,1,0} dynamic-slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.1873, s64[] %subtract.1889, s64[] %broadcast.2085, s64[] %broadcast.2087), dynamic_slice_sizes={1,4096,1024}
  %reshape.2089 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %dynamic-slice.2088)
  %get-tuple-element.1844 = f32[16,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=1
  %get-tuple-element.1869 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=26
  %constant.2056 = s64[] constant(0)
  %broadcast.2057 = s64[] broadcast(s64[] %constant.2056), dimensions={}
  %constant.2058 = s64[] constant(0)
  %broadcast.2059 = s64[] broadcast(s64[] %constant.2058), dimensions={}
  %dynamic-slice.2060 = f32[1,1024,4096]{2,1,0} dynamic-slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.1869, s64[] %subtract.1889, s64[] %broadcast.2057, s64[] %broadcast.2059), dynamic_slice_sizes={1,1024,4096}
  %reshape.2061 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %dynamic-slice.2060)
  %get-tuple-element.1871 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=28
  %constant.2068 = s64[] constant(0)
  %broadcast.2069 = s64[] broadcast(s64[] %constant.2068), dimensions={}
  %constant.2070 = s64[] constant(0)
  %broadcast.2071 = s64[] broadcast(s64[] %constant.2070), dimensions={}
  %constant.2072 = s64[] constant(0)
  %broadcast.2073 = s64[] broadcast(s64[] %constant.2072), dimensions={}
  %dynamic-slice.2074 = f32[1,16,512,4096]{3,2,1,0} dynamic-slice(f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1871, s64[] %subtract.1889, s64[] %broadcast.2069, s64[] %broadcast.2071, s64[] %broadcast.2073), dynamic_slice_sizes={1,16,512,4096}
  %reshape.2075 = f32[16,512,4096]{2,1,0} reshape(f32[1,16,512,4096]{3,2,1,0} %dynamic-slice.2074)
  %get-tuple-element.1868 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=25
  %constant.2048 = s64[] constant(0)
  %broadcast.2049 = s64[] broadcast(s64[] %constant.2048), dimensions={}
  %constant.2050 = s64[] constant(0)
  %broadcast.2051 = s64[] broadcast(s64[] %constant.2050), dimensions={}
  %constant.2052 = s64[] constant(0)
  %broadcast.2053 = s64[] broadcast(s64[] %constant.2052), dimensions={}
  %dynamic-slice.2054 = f32[1,16,512,4096]{3,2,1,0} dynamic-slice(f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1868, s64[] %subtract.1889, s64[] %broadcast.2049, s64[] %broadcast.2051, s64[] %broadcast.2053), dynamic_slice_sizes={1,16,512,4096}
  %reshape.2055 = f32[16,512,4096]{2,1,0} reshape(f32[1,16,512,4096]{3,2,1,0} %dynamic-slice.2054)
  %get-tuple-element.1852 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=9
  %constant.1934 = s64[] constant(0)
  %broadcast.1935 = s64[] broadcast(s64[] %constant.1934), dimensions={}
  %constant.1936 = s64[] constant(0)
  %broadcast.1937 = s64[] broadcast(s64[] %constant.1936), dimensions={}
  %dynamic-slice.1938 = f32[1,1024,512]{2,1,0} dynamic-slice(f32[30,1024,512]{2,1,0} %get-tuple-element.1852, s64[] %subtract.1889, s64[] %broadcast.1935, s64[] %broadcast.1937), dynamic_slice_sizes={1,1024,512}
  %reshape.1939 = f32[1024,512]{1,0} reshape(f32[1,1024,512]{2,1,0} %dynamic-slice.1938)
  %get-tuple-element.1856 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=13
  %constant.1958 = s64[] constant(0)
  %broadcast.1959 = s64[] broadcast(s64[] %constant.1958), dimensions={}
  %constant.1960 = s64[] constant(0)
  %broadcast.1961 = s64[] broadcast(s64[] %constant.1960), dimensions={}
  %constant.1962 = s64[] constant(0)
  %broadcast.1963 = s64[] broadcast(s64[] %constant.1962), dimensions={}
  %dynamic-slice.1964 = f32[1,128,512,128]{3,2,1,0} dynamic-slice(f32[30,128,512,128]{3,2,1,0} %get-tuple-element.1856, s64[] %subtract.1889, s64[] %broadcast.1959, s64[] %broadcast.1961, s64[] %broadcast.1963), dynamic_slice_sizes={1,128,512,128}
  %reshape.1965 = f32[128,512,128]{2,1,0} reshape(f32[1,128,512,128]{3,2,1,0} %dynamic-slice.1964)
  %get-tuple-element.1854 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=11
  %constant.1946 = s64[] constant(0)
  %broadcast.1947 = s64[] broadcast(s64[] %constant.1946), dimensions={}
  %constant.1948 = s64[] constant(0)
  %broadcast.1949 = s64[] broadcast(s64[] %constant.1948), dimensions={}
  %dynamic-slice.1950 = f32[1,1024,512]{2,1,0} dynamic-slice(f32[30,1024,512]{2,1,0} %get-tuple-element.1854, s64[] %subtract.1889, s64[] %broadcast.1947, s64[] %broadcast.1949), dynamic_slice_sizes={1,1024,512}
  %reshape.1951 = f32[1024,512]{1,0} reshape(f32[1,1024,512]{2,1,0} %dynamic-slice.1950)
  %get-tuple-element.1859 = f32[30,128,512,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=16
  %constant.1984 = s64[] constant(0)
  %broadcast.1985 = s64[] broadcast(s64[] %constant.1984), dimensions={}
  %constant.1986 = s64[] constant(0)
  %broadcast.1987 = s64[] broadcast(s64[] %constant.1986), dimensions={}
  %constant.1988 = s64[] constant(0)
  %broadcast.1989 = s64[] broadcast(s64[] %constant.1988), dimensions={}
  %dynamic-slice.1990 = f32[1,128,512,512]{3,2,1,0} dynamic-slice(f32[30,128,512,512]{3,2,1,0} %get-tuple-element.1859, s64[] %subtract.1889, s64[] %broadcast.1985, s64[] %broadcast.1987, s64[] %broadcast.1989), dynamic_slice_sizes={1,128,512,512}
  %reshape.1991 = f32[128,512,512]{2,1,0} reshape(f32[1,128,512,512]{3,2,1,0} %dynamic-slice.1990)
  %get-tuple-element.1851 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=8
  %constant.1928 = s64[] constant(0)
  %broadcast.1929 = s64[] broadcast(s64[] %constant.1928), dimensions={}
  %constant.1930 = s64[] constant(0)
  %broadcast.1931 = s64[] broadcast(s64[] %constant.1930), dimensions={}
  %dynamic-slice.1932 = f32[1,8192,1024]{2,1,0} dynamic-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.1851, s64[] %subtract.1889, s64[] %broadcast.1929, s64[] %broadcast.1931), dynamic_slice_sizes={1,8192,1024}
  %reshape.1933 = f32[8192,1024]{1,0} reshape(f32[1,8192,1024]{2,1,0} %dynamic-slice.1932)
  %get-tuple-element.1853 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=10
  %constant.1940 = s64[] constant(0)
  %broadcast.1941 = s64[] broadcast(s64[] %constant.1940), dimensions={}
  %constant.1942 = s64[] constant(0)
  %broadcast.1943 = s64[] broadcast(s64[] %constant.1942), dimensions={}
  %dynamic-slice.1944 = f32[1,8192,1024]{2,1,0} dynamic-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.1853, s64[] %subtract.1889, s64[] %broadcast.1941, s64[] %broadcast.1943), dynamic_slice_sizes={1,8192,1024}
  %reshape.1945 = f32[8192,1024]{1,0} reshape(f32[1,8192,1024]{2,1,0} %dynamic-slice.1944)
  %get-tuple-element.1855 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=12
  %constant.1952 = s64[] constant(0)
  %broadcast.1953 = s64[] broadcast(s64[] %constant.1952), dimensions={}
  %constant.1954 = s64[] constant(0)
  %broadcast.1955 = s64[] broadcast(s64[] %constant.1954), dimensions={}
  %dynamic-slice.1956 = f32[1,8192,1024]{2,1,0} dynamic-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.1855, s64[] %subtract.1889, s64[] %broadcast.1953, s64[] %broadcast.1955), dynamic_slice_sizes={1,8192,1024}
  %reshape.1957 = f32[8192,1024]{1,0} reshape(f32[1,8192,1024]{2,1,0} %dynamic-slice.1956)
  %get-tuple-element.1862 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=19
  %constant.2006 = s64[] constant(0)
  %broadcast.2007 = s64[] broadcast(s64[] %constant.2006), dimensions={}
  %constant.2008 = s64[] constant(0)
  %broadcast.2009 = s64[] broadcast(s64[] %constant.2008), dimensions={}
  %dynamic-slice.2010 = f32[1,8192,1024]{2,1,0} dynamic-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.1862, s64[] %subtract.1889, s64[] %broadcast.2007, s64[] %broadcast.2009), dynamic_slice_sizes={1,8192,1024}
  %reshape.2011 = f32[8192,1024]{1,0} reshape(f32[1,8192,1024]{2,1,0} %dynamic-slice.2010)
  %get-tuple-element.1870 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=27
  %constant.2062 = s64[] constant(0)
  %broadcast.2063 = s64[] broadcast(s64[] %constant.2062), dimensions={}
  %constant.2064 = s64[] constant(0)
  %broadcast.2065 = s64[] broadcast(s64[] %constant.2064), dimensions={}
  %dynamic-slice.2066 = f32[1,8192,1024]{2,1,0} dynamic-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.1870, s64[] %subtract.1889, s64[] %broadcast.2063, s64[] %broadcast.2065), dynamic_slice_sizes={1,8192,1024}
  %reshape.2067 = f32[8192,1024]{1,0} reshape(f32[1,8192,1024]{2,1,0} %dynamic-slice.2066)
  %get-tuple-element.1867 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=24
  %constant.2042 = s64[] constant(0)
  %broadcast.2043 = s64[] broadcast(s64[] %constant.2042), dimensions={}
  %constant.2044 = s64[] constant(0)
  %broadcast.2045 = s64[] broadcast(s64[] %constant.2044), dimensions={}
  %dynamic-slice.2046 = f32[1,8192,1024]{2,1,0} dynamic-slice(f32[30,8192,1024]{2,1,0} %get-tuple-element.1867, s64[] %subtract.1889, s64[] %broadcast.2043, s64[] %broadcast.2045), dynamic_slice_sizes={1,8192,1024}
  %reshape.2047 = f32[8192,1024]{1,0} reshape(f32[1,8192,1024]{2,1,0} %dynamic-slice.2046)
  %get-tuple-element.1874 = f32[30,8192,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=31
  %constant.2090 = s64[] constant(0)
  %broadcast.2091 = s64[] broadcast(s64[] %constant.2090), dimensions={}
  %constant.2092 = s64[] constant(0)
  %broadcast.2093 = s64[] broadcast(s64[] %constant.2092), dimensions={}
  %dynamic-slice.2094 = f32[1,8192,4096]{2,1,0} dynamic-slice(f32[30,8192,4096]{2,1,0} %get-tuple-element.1874, s64[] %subtract.1889, s64[] %broadcast.2091, s64[] %broadcast.2093), dynamic_slice_sizes={1,8192,4096}
  %reshape.2095 = f32[8192,4096]{1,0} reshape(f32[1,8192,4096]{2,1,0} %dynamic-slice.2094)
  %get-tuple-element.1849 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=6
  %constant.1914 = s64[] constant(0)
  %broadcast.1915 = s64[] broadcast(s64[] %constant.1914), dimensions={}
  %constant.1916 = s64[] constant(0)
  %broadcast.1917 = s64[] broadcast(s64[] %constant.1916), dimensions={}
  %constant.1918 = s64[] constant(0)
  %broadcast.1919 = s64[] broadcast(s64[] %constant.1918), dimensions={}
  %dynamic-slice.1920 = f32[1,16,512,1024]{3,2,1,0} dynamic-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1849, s64[] %subtract.1889, s64[] %broadcast.1915, s64[] %broadcast.1917, s64[] %broadcast.1919), dynamic_slice_sizes={1,16,512,1024}
  %reshape.1921 = f32[16,512,1024]{2,1,0} reshape(f32[1,16,512,1024]{3,2,1,0} %dynamic-slice.1920)
  %get-tuple-element.1865 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=22
  %constant.2028 = s64[] constant(0)
  %broadcast.2029 = s64[] broadcast(s64[] %constant.2028), dimensions={}
  %constant.2030 = s64[] constant(0)
  %broadcast.2031 = s64[] broadcast(s64[] %constant.2030), dimensions={}
  %constant.2032 = s64[] constant(0)
  %broadcast.2033 = s64[] broadcast(s64[] %constant.2032), dimensions={}
  %dynamic-slice.2034 = f32[1,16,512,1024]{3,2,1,0} dynamic-slice(f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1865, s64[] %subtract.1889, s64[] %broadcast.2029, s64[] %broadcast.2031, s64[] %broadcast.2033), dynamic_slice_sizes={1,16,512,1024}
  %reshape.2035 = f32[16,512,1024]{2,1,0} reshape(f32[1,16,512,1024]{3,2,1,0} %dynamic-slice.2034)
  %call.2096 = (f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) call(f32[] %get-tuple-element.1887, f32[16,512,1024]{2,1,0} %reshape.1897, f32[] %get-tuple-element.1886, f32[16,512,1]{2,1,0} %reshape.1913, f32[] %get-tuple-element.1885, /*index=5*/f32[1024]{0} %reshape.1901, f32[1024,1024]{1,0} %reshape.1927, f32[128,128,512]{2,1,0} %reshape.1973, f32[] %get-tuple-element.1884, f32[16,8,512,512]{3,2,1,0} %reshape.1983, /*index=10*/f32[128,512,128]{2,1,0} %reshape.1999, f32[1024,1024]{1,0} %reshape.2005, f32[16,512,1024]{2,1,0} %reshape.2019, f32[16,512,1]{2,1,0} %reshape.2027, f32[1024]{0} %reshape.1905, /*index=15*/f32[1024,4096]{1,0} %reshape.2041, f32[16,512,4096]{2,1,0} %reshape.2083, f32[4096,1024]{1,0} %reshape.2089, f32[16,512,1024]{2,1,0} %get-tuple-element.1844, f32[1024,4096]{1,0} %reshape.2061, /*index=20*/f32[16,512,4096]{2,1,0} %reshape.2075, f32[16,512,4096]{2,1,0} %reshape.2055, f32[1024,512]{1,0} %reshape.1939, f32[128,512,128]{2,1,0} %reshape.1965, f32[1024,512]{1,0} %reshape.1951, /*index=25*/f32[128,512,512]{2,1,0} %reshape.1991, f32[8192,1024]{1,0} %reshape.1933, f32[8192,1024]{1,0} %reshape.1945, f32[8192,1024]{1,0} %reshape.1957, f32[8192,1024]{1,0} %reshape.2011, /*index=30*/f32[8192,1024]{1,0} %reshape.2067, f32[8192,1024]{1,0} %reshape.2047, f32[8192,4096]{1,0} %reshape.2095, f32[16,512,1024]{2,1,0} %reshape.1921, f32[16,512,1024]{2,1,0} %reshape.2035), to_apply=%FnComputation.1536
  %get-tuple-element.2097 = f32[16,512,1024]{2,1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=0
  %get-tuple-element.1875 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=32
  %get-tuple-element.2098 = f32[1024,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=1
  %broadcast.2099 = f32[1,1024,1024]{2,1,0} broadcast(f32[1024,1024]{1,0} %get-tuple-element.2098), dimensions={1,2}
  %constant.2100 = s64[] constant(0)
  %broadcast.2101 = s64[] broadcast(s64[] %constant.2100), dimensions={}
  %constant.2102 = s64[] constant(0)
  %broadcast.2103 = s64[] broadcast(s64[] %constant.2102), dimensions={}
  %dynamic-update-slice.2104 = f32[30,1024,1024]{2,1,0} dynamic-update-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.1875, f32[1,1024,1024]{2,1,0} %broadcast.2099, s64[] %subtract.1889, s64[] %broadcast.2101, s64[] %broadcast.2103)
  %get-tuple-element.1876 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=33
  %get-tuple-element.2105 = f32[512,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=2
  %broadcast.2106 = f32[1,512,1024]{2,1,0} broadcast(f32[512,1024]{1,0} %get-tuple-element.2105), dimensions={1,2}
  %constant.2107 = s64[] constant(0)
  %broadcast.2108 = s64[] broadcast(s64[] %constant.2107), dimensions={}
  %constant.2109 = s64[] constant(0)
  %broadcast.2110 = s64[] broadcast(s64[] %constant.2109), dimensions={}
  %dynamic-update-slice.2111 = f32[30,512,1024]{2,1,0} dynamic-update-slice(f32[30,512,1024]{2,1,0} %get-tuple-element.1876, f32[1,512,1024]{2,1,0} %broadcast.2106, s64[] %subtract.1889, s64[] %broadcast.2108, s64[] %broadcast.2110)
  %get-tuple-element.1877 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=34
  %get-tuple-element.2112 = f32[512,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=3
  %broadcast.2113 = f32[1,512,1024]{2,1,0} broadcast(f32[512,1024]{1,0} %get-tuple-element.2112), dimensions={1,2}
  %constant.2114 = s64[] constant(0)
  %broadcast.2115 = s64[] broadcast(s64[] %constant.2114), dimensions={}
  %constant.2116 = s64[] constant(0)
  %broadcast.2117 = s64[] broadcast(s64[] %constant.2116), dimensions={}
  %dynamic-update-slice.2118 = f32[30,512,1024]{2,1,0} dynamic-update-slice(f32[30,512,1024]{2,1,0} %get-tuple-element.1877, f32[1,512,1024]{2,1,0} %broadcast.2113, s64[] %subtract.1889, s64[] %broadcast.2115, s64[] %broadcast.2117)
  %get-tuple-element.1878 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=35
  %get-tuple-element.2119 = f32[1024,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=4
  %broadcast.2120 = f32[1,1024,1024]{2,1,0} broadcast(f32[1024,1024]{1,0} %get-tuple-element.2119), dimensions={1,2}
  %constant.2121 = s64[] constant(0)
  %broadcast.2122 = s64[] broadcast(s64[] %constant.2121), dimensions={}
  %constant.2123 = s64[] constant(0)
  %broadcast.2124 = s64[] broadcast(s64[] %constant.2123), dimensions={}
  %dynamic-update-slice.2125 = f32[30,1024,1024]{2,1,0} dynamic-update-slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.1878, f32[1,1024,1024]{2,1,0} %broadcast.2120, s64[] %subtract.1889, s64[] %broadcast.2122, s64[] %broadcast.2124)
  %get-tuple-element.1879 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=36
  %get-tuple-element.2126 = f32[4096,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=5
  %broadcast.2127 = f32[1,4096,1024]{2,1,0} broadcast(f32[4096,1024]{1,0} %get-tuple-element.2126), dimensions={1,2}
  %constant.2128 = s64[] constant(0)
  %broadcast.2129 = s64[] broadcast(s64[] %constant.2128), dimensions={}
  %constant.2130 = s64[] constant(0)
  %broadcast.2131 = s64[] broadcast(s64[] %constant.2130), dimensions={}
  %dynamic-update-slice.2132 = f32[30,4096,1024]{2,1,0} dynamic-update-slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.1879, f32[1,4096,1024]{2,1,0} %broadcast.2127, s64[] %subtract.1889, s64[] %broadcast.2129, s64[] %broadcast.2131)
  %get-tuple-element.1880 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=37
  %get-tuple-element.2133 = f32[4096,1024]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=6
  %broadcast.2134 = f32[1,4096,1024]{2,1,0} broadcast(f32[4096,1024]{1,0} %get-tuple-element.2133), dimensions={1,2}
  %constant.2135 = s64[] constant(0)
  %broadcast.2136 = s64[] broadcast(s64[] %constant.2135), dimensions={}
  %constant.2137 = s64[] constant(0)
  %broadcast.2138 = s64[] broadcast(s64[] %constant.2137), dimensions={}
  %dynamic-update-slice.2139 = f32[30,4096,1024]{2,1,0} dynamic-update-slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.1880, f32[1,4096,1024]{2,1,0} %broadcast.2134, s64[] %subtract.1889, s64[] %broadcast.2136, s64[] %broadcast.2138)
  %get-tuple-element.1881 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=38
  %get-tuple-element.2140 = f32[1024,4096]{1,0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=7
  %broadcast.2141 = f32[1,1024,4096]{2,1,0} broadcast(f32[1024,4096]{1,0} %get-tuple-element.2140), dimensions={1,2}
  %constant.2142 = s64[] constant(0)
  %broadcast.2143 = s64[] broadcast(s64[] %constant.2142), dimensions={}
  %constant.2144 = s64[] constant(0)
  %broadcast.2145 = s64[] broadcast(s64[] %constant.2144), dimensions={}
  %dynamic-update-slice.2146 = f32[30,1024,4096]{2,1,0} dynamic-update-slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.1881, f32[1,1024,4096]{2,1,0} %broadcast.2141, s64[] %subtract.1889, s64[] %broadcast.2143, s64[] %broadcast.2145)
  %get-tuple-element.1882 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=39
  %get-tuple-element.2147 = f32[1024]{0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=8
  %broadcast.2148 = f32[1,1024]{1,0} broadcast(f32[1024]{0} %get-tuple-element.2147), dimensions={1}
  %constant.2149 = s64[] constant(0)
  %broadcast.2150 = s64[] broadcast(s64[] %constant.2149), dimensions={}
  %dynamic-update-slice.2151 = f32[30,1024]{1,0} dynamic-update-slice(f32[30,1024]{1,0} %get-tuple-element.1882, f32[1,1024]{1,0} %broadcast.2148, s64[] %subtract.1889, s64[] %broadcast.2150)
  %get-tuple-element.1883 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.1842), index=40
  %get-tuple-element.2152 = f32[1024]{0} get-tuple-element((f32[16,512,1024]{2,1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=5*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}) %call.2096), index=9
  %broadcast.2153 = f32[1,1024]{1,0} broadcast(f32[1024]{0} %get-tuple-element.2152), dimensions={1}
  %constant.2154 = s64[] constant(0)
  %broadcast.2155 = s64[] broadcast(s64[] %constant.2154), dimensions={}
  %dynamic-update-slice.2156 = f32[30,1024]{1,0} dynamic-update-slice(f32[30,1024]{1,0} %get-tuple-element.1883, f32[1,1024]{1,0} %broadcast.2153, s64[] %subtract.1889, s64[] %broadcast.2155)
  ROOT %tuple.2159 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) tuple(s64[] %add.2158, f32[16,512,1024]{2,1,0} %get-tuple-element.2097, f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1845, f32[30,1024]{1,0} %get-tuple-element.1846, f32[30,1024]{1,0} %get-tuple-element.1847, /*index=5*/f32[30,16,512,1]{3,2,1,0} %get-tuple-element.1848, f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1849, f32[30,1024,1024]{2,1,0} %get-tuple-element.1850, f32[30,8192,1024]{2,1,0} %get-tuple-element.1851, f32[30,1024,512]{2,1,0} %get-tuple-element.1852, /*index=10*/f32[30,8192,1024]{2,1,0} %get-tuple-element.1853, f32[30,1024,512]{2,1,0} %get-tuple-element.1854, f32[30,8192,1024]{2,1,0} %get-tuple-element.1855, f32[30,128,512,128]{3,2,1,0} %get-tuple-element.1856, f32[30,128,128,512]{3,2,1,0} %get-tuple-element.1857, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0} %get-tuple-element.1858, f32[30,128,512,512]{3,2,1,0} %get-tuple-element.1859, f32[30,128,512,128]{3,2,1,0} %get-tuple-element.1860, f32[30,1024,1024]{2,1,0} %get-tuple-element.1861, f32[30,8192,1024]{2,1,0} %get-tuple-element.1862, /*index=20*/f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1863, f32[30,16,512,1]{3,2,1,0} %get-tuple-element.1864, f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1865, f32[30,1024,4096]{2,1,0} %get-tuple-element.1866, f32[30,8192,1024]{2,1,0} %get-tuple-element.1867, /*index=25*/f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1868, f32[30,1024,4096]{2,1,0} %get-tuple-element.1869, f32[30,8192,1024]{2,1,0} %get-tuple-element.1870, f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1871, f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1872, /*index=30*/f32[30,4096,1024]{2,1,0} %get-tuple-element.1873, f32[30,8192,4096]{2,1,0} %get-tuple-element.1874, f32[30,1024,1024]{2,1,0} %dynamic-update-slice.2104, f32[30,512,1024]{2,1,0} %dynamic-update-slice.2111, f32[30,512,1024]{2,1,0} %dynamic-update-slice.2118, /*index=35*/f32[30,1024,1024]{2,1,0} %dynamic-update-slice.2125, f32[30,4096,1024]{2,1,0} %dynamic-update-slice.2132, f32[30,4096,1024]{2,1,0} %dynamic-update-slice.2139, f32[30,1024,4096]{2,1,0} %dynamic-update-slice.2146, f32[30,1024]{1,0} %dynamic-update-slice.2151, /*index=40*/f32[30,1024]{1,0} %dynamic-update-slice.2156, f32[] %get-tuple-element.1884, f32[] %get-tuple-element.1885, f32[] %get-tuple-element.1886, f32[] %get-tuple-element.1887)
}

%Condition.2160 (p0.2161: (s64[], f32[16,512,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], /*index=5*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], /*index=10*/f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], /*index=15*/f32[30,16,8,512,512], f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], /*index=20*/f32[30,16,512,1024], f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], /*index=25*/f32[30,16,512,4096], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], /*index=30*/f32[30,4096,1024], f32[30,8192,4096], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=35*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=40*/f32[30,1024], f32[], f32[], f32[], f32[])) -> pred[] {
  %p0.2161 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) parameter(0)
  %get-tuple-element.2163 = f32[16,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=1
  %get-tuple-element.2164 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=2
  %get-tuple-element.2165 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=3
  %get-tuple-element.2166 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=4
  %get-tuple-element.2167 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=5
  %get-tuple-element.2168 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=6
  %get-tuple-element.2169 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=7
  %get-tuple-element.2170 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=8
  %get-tuple-element.2171 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=9
  %get-tuple-element.2172 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=10
  %get-tuple-element.2173 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=11
  %get-tuple-element.2174 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=12
  %get-tuple-element.2175 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=13
  %get-tuple-element.2176 = f32[30,128,128,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=14
  %get-tuple-element.2177 = f32[30,16,8,512,512]{4,3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=15
  %get-tuple-element.2178 = f32[30,128,512,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=16
  %get-tuple-element.2179 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=17
  %get-tuple-element.2180 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=18
  %get-tuple-element.2181 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=19
  %get-tuple-element.2182 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=20
  %get-tuple-element.2183 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=21
  %get-tuple-element.2184 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=22
  %get-tuple-element.2185 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=23
  %get-tuple-element.2186 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=24
  %get-tuple-element.2187 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=25
  %get-tuple-element.2188 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=26
  %get-tuple-element.2189 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=27
  %get-tuple-element.2190 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=28
  %get-tuple-element.2191 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=29
  %get-tuple-element.2192 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=30
  %get-tuple-element.2193 = f32[30,8192,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=31
  %get-tuple-element.2194 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=32
  %get-tuple-element.2195 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=33
  %get-tuple-element.2196 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=34
  %get-tuple-element.2197 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=35
  %get-tuple-element.2198 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=36
  %get-tuple-element.2199 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=37
  %get-tuple-element.2200 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=38
  %get-tuple-element.2201 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=39
  %get-tuple-element.2202 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=40
  %get-tuple-element.2203 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=41
  %get-tuple-element.2204 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=42
  %get-tuple-element.2205 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=43
  %get-tuple-element.2206 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=44
  %get-tuple-element.2162 = s64[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %p0.2161), index=0
  %constant.2207 = s64[] constant(30)
  ROOT %compare.2208 = pred[] compare(s64[] %get-tuple-element.2162, s64[] %constant.2207), direction=LT
}

%scan.2209 (p0.2210: s64[], p1.2211: f32[16,512,1024], p2.2212: f32[30,16,512,1024], p3.2213: f32[30,1024], p4.2214: f32[30,1024], p5.2215: f32[30,16,512,1], p6.2216: f32[30,16,512,1024], p7.2217: f32[30,1024,1024], p8.2218: f32[30,8192,1024], p9.2219: f32[30,1024,512], p10.2220: f32[30,8192,1024], p11.2221: f32[30,1024,512], p12.2222: f32[30,8192,1024], p13.2223: f32[30,128,512,128], p14.2224: f32[30,128,128,512], p15.2225: f32[30,16,8,512,512], p16.2226: f32[30,128,512,512], p17.2227: f32[30,128,512,128], p18.2228: f32[30,1024,1024], p19.2229: f32[30,8192,1024], p20.2230: f32[30,16,512,1024], p21.2231: f32[30,16,512,1], p22.2232: f32[30,16,512,1024], p23.2233: f32[30,1024,4096], p24.2234: f32[30,8192,1024], p25.2235: f32[30,16,512,4096], p26.2236: f32[30,1024,4096], p27.2237: f32[30,8192,1024], p28.2238: f32[30,16,512,4096], p29.2239: f32[30,16,512,4096], p30.2240: f32[30,4096,1024], p31.2241: f32[30,8192,4096], p32.2242: f32[30,1024,1024], p33.2243: f32[30,512,1024], p34.2244: f32[30,512,1024], p35.2245: f32[30,1024,1024], p36.2246: f32[30,4096,1024], p37.2247: f32[30,4096,1024], p38.2248: f32[30,1024,4096], p39.2249: f32[30,1024], p40.2250: f32[30,1024], p41.2251: f32[], p42.2252: f32[], p43.2253: f32[], p44.2254: f32[]) -> (s64[], f32[16,512,1024], f32[30,16,512,1024], f32[30,1024], f32[30,1024], /*index=5*/f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,1024], f32[30,8192,1024], f32[30,1024,512], /*index=10*/f32[30,8192,1024], f32[30,1024,512], f32[30,8192,1024], f32[30,128,512,128], f32[30,128,128,512], /*index=15*/f32[30,16,8,512,512], f32[30,128,512,512], f32[30,128,512,128], f32[30,1024,1024], f32[30,8192,1024], /*index=20*/f32[30,16,512,1024], f32[30,16,512,1], f32[30,16,512,1024], f32[30,1024,4096], f32[30,8192,1024], /*index=25*/f32[30,16,512,4096], f32[30,1024,4096], f32[30,8192,1024], f32[30,16,512,4096], f32[30,16,512,4096], /*index=30*/f32[30,4096,1024], f32[30,8192,4096], f32[30,1024,1024], f32[30,512,1024], f32[30,512,1024], /*index=35*/f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], f32[30,1024,4096], f32[30,1024], /*index=40*/f32[30,1024], f32[], f32[], f32[], f32[]) {
  %p0.2210 = s64[] parameter(0)
  %p1.2211 = f32[16,512,1024]{2,1,0} parameter(1)
  %p2.2212 = f32[30,16,512,1024]{3,2,1,0} parameter(2)
  %p3.2213 = f32[30,1024]{1,0} parameter(3)
  %p4.2214 = f32[30,1024]{1,0} parameter(4)
  %p5.2215 = f32[30,16,512,1]{3,2,1,0} parameter(5)
  %p6.2216 = f32[30,16,512,1024]{3,2,1,0} parameter(6)
  %p7.2217 = f32[30,1024,1024]{2,1,0} parameter(7)
  %p8.2218 = f32[30,8192,1024]{2,1,0} parameter(8)
  %p9.2219 = f32[30,1024,512]{2,1,0} parameter(9)
  %p10.2220 = f32[30,8192,1024]{2,1,0} parameter(10)
  %p11.2221 = f32[30,1024,512]{2,1,0} parameter(11)
  %p12.2222 = f32[30,8192,1024]{2,1,0} parameter(12)
  %p13.2223 = f32[30,128,512,128]{3,2,1,0} parameter(13)
  %p14.2224 = f32[30,128,128,512]{3,2,1,0} parameter(14)
  %p15.2225 = f32[30,16,8,512,512]{4,3,2,1,0} parameter(15)
  %p16.2226 = f32[30,128,512,512]{3,2,1,0} parameter(16)
  %p17.2227 = f32[30,128,512,128]{3,2,1,0} parameter(17)
  %p18.2228 = f32[30,1024,1024]{2,1,0} parameter(18)
  %p19.2229 = f32[30,8192,1024]{2,1,0} parameter(19)
  %p20.2230 = f32[30,16,512,1024]{3,2,1,0} parameter(20)
  %p21.2231 = f32[30,16,512,1]{3,2,1,0} parameter(21)
  %p22.2232 = f32[30,16,512,1024]{3,2,1,0} parameter(22)
  %p23.2233 = f32[30,1024,4096]{2,1,0} parameter(23)
  %p24.2234 = f32[30,8192,1024]{2,1,0} parameter(24)
  %p25.2235 = f32[30,16,512,4096]{3,2,1,0} parameter(25)
  %p26.2236 = f32[30,1024,4096]{2,1,0} parameter(26)
  %p27.2237 = f32[30,8192,1024]{2,1,0} parameter(27)
  %p28.2238 = f32[30,16,512,4096]{3,2,1,0} parameter(28)
  %p29.2239 = f32[30,16,512,4096]{3,2,1,0} parameter(29)
  %p30.2240 = f32[30,4096,1024]{2,1,0} parameter(30)
  %p31.2241 = f32[30,8192,4096]{2,1,0} parameter(31)
  %p32.2242 = f32[30,1024,1024]{2,1,0} parameter(32)
  %p33.2243 = f32[30,512,1024]{2,1,0} parameter(33)
  %p34.2244 = f32[30,512,1024]{2,1,0} parameter(34)
  %p35.2245 = f32[30,1024,1024]{2,1,0} parameter(35)
  %p36.2246 = f32[30,4096,1024]{2,1,0} parameter(36)
  %p37.2247 = f32[30,4096,1024]{2,1,0} parameter(37)
  %p38.2248 = f32[30,1024,4096]{2,1,0} parameter(38)
  %p39.2249 = f32[30,1024]{1,0} parameter(39)
  %p40.2250 = f32[30,1024]{1,0} parameter(40)
  %p41.2251 = f32[] parameter(41)
  %p42.2252 = f32[] parameter(42)
  %p43.2253 = f32[] parameter(43)
  %p44.2254 = f32[] parameter(44)
  %tuple.2255 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) tuple(s64[] %p0.2210, f32[16,512,1024]{2,1,0} %p1.2211, f32[30,16,512,1024]{3,2,1,0} %p2.2212, f32[30,1024]{1,0} %p3.2213, f32[30,1024]{1,0} %p4.2214, /*index=5*/f32[30,16,512,1]{3,2,1,0} %p5.2215, f32[30,16,512,1024]{3,2,1,0} %p6.2216, f32[30,1024,1024]{2,1,0} %p7.2217, f32[30,8192,1024]{2,1,0} %p8.2218, f32[30,1024,512]{2,1,0} %p9.2219, /*index=10*/f32[30,8192,1024]{2,1,0} %p10.2220, f32[30,1024,512]{2,1,0} %p11.2221, f32[30,8192,1024]{2,1,0} %p12.2222, f32[30,128,512,128]{3,2,1,0} %p13.2223, f32[30,128,128,512]{3,2,1,0} %p14.2224, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0} %p15.2225, f32[30,128,512,512]{3,2,1,0} %p16.2226, f32[30,128,512,128]{3,2,1,0} %p17.2227, f32[30,1024,1024]{2,1,0} %p18.2228, f32[30,8192,1024]{2,1,0} %p19.2229, /*index=20*/f32[30,16,512,1024]{3,2,1,0} %p20.2230, f32[30,16,512,1]{3,2,1,0} %p21.2231, f32[30,16,512,1024]{3,2,1,0} %p22.2232, f32[30,1024,4096]{2,1,0} %p23.2233, f32[30,8192,1024]{2,1,0} %p24.2234, /*index=25*/f32[30,16,512,4096]{3,2,1,0} %p25.2235, f32[30,1024,4096]{2,1,0} %p26.2236, f32[30,8192,1024]{2,1,0} %p27.2237, f32[30,16,512,4096]{3,2,1,0} %p28.2238, f32[30,16,512,4096]{3,2,1,0} %p29.2239, /*index=30*/f32[30,4096,1024]{2,1,0} %p30.2240, f32[30,8192,4096]{2,1,0} %p31.2241, f32[30,1024,1024]{2,1,0} %p32.2242, f32[30,512,1024]{2,1,0} %p33.2243, f32[30,512,1024]{2,1,0} %p34.2244, /*index=35*/f32[30,1024,1024]{2,1,0} %p35.2245, f32[30,4096,1024]{2,1,0} %p36.2246, f32[30,4096,1024]{2,1,0} %p37.2247, f32[30,1024,4096]{2,1,0} %p38.2248, f32[30,1024]{1,0} %p39.2249, /*index=40*/f32[30,1024]{1,0} %p40.2250, f32[] %p41.2251, f32[] %p42.2252, f32[] %p43.2253, f32[] %p44.2254)
  ROOT %while.2256 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) while((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %tuple.2255), condition=%Condition.2160, body=%Body.1841
}

%ScatterCombiner.2877 (p0.2878: f32[], p1.2879: f32[]) -> f32[] {
  %p0.2878 = f32[] parameter(0)
  %p1.2879 = f32[] parameter(1)
  ROOT %add.2880 = f32[] add(f32[] %p0.2878, f32[] %p1.2879)
}

ENTRY %IrToHlo.3918 (p0.9: f32[], p1.11: f32[], p2.162: f32[1024], p3.163: f32[1024], p4.164: f32[1024], p5.165: f32[1024], p6.166: f32[1024], p7.167: f32[1024], p8.168: f32[1024], p9.169: f32[1024], p10.170: f32[1024], p11.171: f32[1024], p12.172: f32[1024], p13.173: f32[1024], p14.174: f32[1024], p15.175: f32[1024], p16.176: f32[1024], p17.177: f32[1024], p18.178: f32[1024], p19.179: f32[1024], p20.180: f32[1024], p21.181: f32[1024], p22.182: f32[1024], p23.183: f32[1024], p24.184: f32[1024], p25.185: f32[1024], p26.186: f32[1024], p27.187: f32[1024], p28.188: f32[1024], p29.189: f32[1024], p30.190: f32[1024], p31.191: f32[1024], p32.223: f32[1024], p33.224: f32[1024], p34.225: f32[1024], p35.226: f32[1024], p36.227: f32[1024], p37.228: f32[1024], p38.229: f32[1024], p39.230: f32[1024], p40.231: f32[1024], p41.232: f32[1024], p42.233: f32[1024], p43.234: f32[1024], p44.235: f32[1024], p45.236: f32[1024], p46.237: f32[1024], p47.238: f32[1024], p48.239: f32[1024], p49.240: f32[1024], p50.241: f32[1024], p51.242: f32[1024], p52.243: f32[1024], p53.244: f32[1024], p54.245: f32[1024], p55.246: f32[1024], p56.247: f32[1024], p57.248: f32[1024], p58.249: f32[1024], p59.250: f32[1024], p60.251: f32[1024], p61.252: f32[1024], p62.284: f32[1024,4096], p63.285: f32[1024,4096], p64.286: f32[1024,4096], p65.287: f32[1024,4096], p66.288: f32[1024,4096], p67.289: f32[1024,4096], p68.290: f32[1024,4096], p69.291: f32[1024,4096], p70.292: f32[1024,4096], p71.293: f32[1024,4096], p72.294: f32[1024,4096], p73.295: f32[1024,4096], p74.296: f32[1024,4096], p75.297: f32[1024,4096], p76.298: f32[1024,4096], p77.299: f32[1024,4096], p78.300: f32[1024,4096], p79.301: f32[1024,4096], p80.302: f32[1024,4096], p81.303: f32[1024,4096], p82.304: f32[1024,4096], p83.305: f32[1024,4096], p84.306: f32[1024,4096], p85.307: f32[1024,4096], p86.308: f32[1024,4096], p87.309: f32[1024,4096], p88.310: f32[1024,4096], p89.311: f32[1024,4096], p90.312: f32[1024,4096], p91.313: f32[1024,4096], p92.345: f32[4096,1024], p93.346: f32[4096,1024], p94.347: f32[4096,1024], p95.348: f32[4096,1024], p96.349: f32[4096,1024], p97.350: f32[4096,1024], p98.351: f32[4096,1024], p99.352: f32[4096,1024], p100.353: f32[4096,1024], p101.354: f32[4096,1024], p102.355: f32[4096,1024], p103.356: f32[4096,1024], p104.357: f32[4096,1024], p105.358: f32[4096,1024], p106.359: f32[4096,1024], p107.360: f32[4096,1024], p108.361: f32[4096,1024], p109.362: f32[4096,1024], p110.363: f32[4096,1024], p111.364: f32[4096,1024], p112.365: f32[4096,1024], p113.366: f32[4096,1024], p114.367: f32[4096,1024], p115.368: f32[4096,1024], p116.369: f32[4096,1024], p117.370: f32[4096,1024], p118.371: f32[4096,1024], p119.372: f32[4096,1024], p120.373: f32[4096,1024], p121.374: f32[4096,1024], p122.406: f32[4096,1024], p123.407: f32[4096,1024], p124.408: f32[4096,1024], p125.409: f32[4096,1024], p126.410: f32[4096,1024], p127.411: f32[4096,1024], p128.412: f32[4096,1024], p129.413: f32[4096,1024], p130.414: f32[4096,1024], p131.415: f32[4096,1024], p132.416: f32[4096,1024], p133.417: f32[4096,1024], p134.418: f32[4096,1024], p135.419: f32[4096,1024], p136.420: f32[4096,1024], p137.421: f32[4096,1024], p138.422: f32[4096,1024], p139.423: f32[4096,1024], p140.424: f32[4096,1024], p141.425: f32[4096,1024], p142.426: f32[4096,1024], p143.427: f32[4096,1024], p144.428: f32[4096,1024], p145.429: f32[4096,1024], p146.430: f32[4096,1024], p147.431: f32[4096,1024], p148.432: f32[4096,1024], p149.433: f32[4096,1024], p150.434: f32[4096,1024], p151.435: f32[4096,1024], p152.467: f32[1024,1024], p153.468: f32[1024,1024], p154.469: f32[1024,1024], p155.470: f32[1024,1024], p156.471: f32[1024,1024], p157.472: f32[1024,1024], p158.473: f32[1024,1024], p159.474: f32[1024,1024], p160.475: f32[1024,1024], p161.476: f32[1024,1024], p162.477: f32[1024,1024], p163.478: f32[1024,1024], p164.479: f32[1024,1024], p165.480: f32[1024,1024], p166.481: f32[1024,1024], p167.482: f32[1024,1024], p168.483: f32[1024,1024], p169.484: f32[1024,1024], p170.485: f32[1024,1024], p171.486: f32[1024,1024], p172.487: f32[1024,1024], p173.488: f32[1024,1024], p174.489: f32[1024,1024], p175.490: f32[1024,1024], p176.491: f32[1024,1024], p177.492: f32[1024,1024], p178.493: f32[1024,1024], p179.494: f32[1024,1024], p180.495: f32[1024,1024], p181.496: f32[1024,1024], p182.528: f32[512,1024], p183.529: f32[512,1024], p184.530: f32[512,1024], p185.531: f32[512,1024], p186.532: f32[512,1024], p187.533: f32[512,1024], p188.534: f32[512,1024], p189.535: f32[512,1024], p190.536: f32[512,1024], p191.537: f32[512,1024], p192.538: f32[512,1024], p193.539: f32[512,1024], p194.540: f32[512,1024], p195.541: f32[512,1024], p196.542: f32[512,1024], p197.543: f32[512,1024], p198.544: f32[512,1024], p199.545: f32[512,1024], p200.546: f32[512,1024], p201.547: f32[512,1024], p202.548: f32[512,1024], p203.549: f32[512,1024], p204.550: f32[512,1024], p205.551: f32[512,1024], p206.552: f32[512,1024], p207.553: f32[512,1024], p208.554: f32[512,1024], p209.555: f32[512,1024], p210.556: f32[512,1024], p211.557: f32[512,1024], p212.589: f32[512,1024], p213.590: f32[512,1024], p214.591: f32[512,1024], p215.592: f32[512,1024], p216.593: f32[512,1024], p217.594: f32[512,1024], p218.595: f32[512,1024], p219.596: f32[512,1024], p220.597: f32[512,1024], p221.598: f32[512,1024], p222.599: f32[512,1024], p223.600: f32[512,1024], p224.601: f32[512,1024], p225.602: f32[512,1024], p226.603: f32[512,1024], p227.604: f32[512,1024], p228.605: f32[512,1024], p229.606: f32[512,1024], p230.607: f32[512,1024], p231.608: f32[512,1024], p232.609: f32[512,1024], p233.610: f32[512,1024], p234.611: f32[512,1024], p235.612: f32[512,1024], p236.613: f32[512,1024], p237.614: f32[512,1024], p238.615: f32[512,1024], p239.616: f32[512,1024], p240.617: f32[512,1024], p241.618: f32[512,1024], p242.650: f32[1024,1024], p243.651: f32[1024,1024], p244.652: f32[1024,1024], p245.653: f32[1024,1024], p246.654: f32[1024,1024], p247.655: f32[1024,1024], p248.656: f32[1024,1024], p249.657: f32[1024,1024], p250.658: f32[1024,1024], p251.659: f32[1024,1024], p252.660: f32[1024,1024], p253.661: f32[1024,1024], p254.662: f32[1024,1024], p255.663: f32[1024,1024], p256.664: f32[1024,1024], p257.665: f32[1024,1024], p258.666: f32[1024,1024], p259.667: f32[1024,1024], p260.668: f32[1024,1024], p261.669: f32[1024,1024], p262.670: f32[1024,1024], p263.671: f32[1024,1024], p264.672: f32[1024,1024], p265.673: f32[1024,1024], p266.674: f32[1024,1024], p267.675: f32[1024,1024], p268.676: f32[1024,1024], p269.677: f32[1024,1024], p270.678: f32[1024,1024], p271.679: f32[1024,1024], p272.711: s64[16,512], p273.713: f32[8192,1024], p274.1402: f32[1024], p275.1409: f32[8192,1024], p276.1424: f32[], p277.1425: f32[], p278.1426: f32[], p279.2859: s64[], p280.2883: f32[]) -> (f32[1024,8192], f32[8192,1024], f32[1,1,1024], f32[1024], f32[30,1024,1024], /*index=5*/f32[30,512,1024], f32[30,512,1024], f32[30,1024,1024], f32[30,4096,1024], f32[30,4096,1024], /*index=10*/f32[30,1024,4096], f32[30,1024], f32[30,1024], f32[1024], f32[1024], /*index=15*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=20*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=25*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=30*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=35*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=40*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=45*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=50*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=55*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=60*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=65*/f32[1024], f32[1024], f32[1024], f32[1024], f32[1024], /*index=70*/f32[1024], f32[1024], f32[1024], f32[1024,4096], f32[1024,4096], /*index=75*/f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], /*index=80*/f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], /*index=85*/f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], /*index=90*/f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], /*index=95*/f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[1024,4096], /*index=100*/f32[1024,4096], f32[1024,4096], f32[1024,4096], f32[4096,1024], f32[4096,1024], /*index=105*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=110*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=115*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=120*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=125*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=130*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=135*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=140*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=145*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=150*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=155*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[4096,1024], /*index=160*/f32[4096,1024], f32[4096,1024], f32[4096,1024], f32[1024,1024], f32[1024,1024], /*index=165*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=170*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=175*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=180*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=185*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=190*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=195*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=200*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=205*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=210*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=215*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=220*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=225*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=230*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=235*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=240*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=245*/f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], f32[512,1024], /*index=250*/f32[512,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[1024,1024], /*index=255*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=260*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=265*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=270*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=275*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[1024,1024], /*index=280*/f32[1024,1024], f32[1024,1024], f32[1024,1024], f32[8192,1024], f32[8192,1024], /*index=285*/f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], /*index=290*/f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], /*index=295*/f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], /*index=300*/f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], f32[512,1024], /*index=305*/f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], /*index=310*/f32[1024], f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=315*/f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], /*index=320*/f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=325*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], /*index=330*/f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], /*index=335*/f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], /*index=340*/f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], /*index=345*/f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], f32[512,1024], /*index=350*/f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], /*index=355*/f32[1024], f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=360*/f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], /*index=365*/f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=370*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], /*index=375*/f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], /*index=380*/f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], /*index=385*/f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], /*index=390*/f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], f32[512,1024], /*index=395*/f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], /*index=400*/f32[1024], f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=405*/f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], /*index=410*/f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=415*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], /*index=420*/f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], /*index=425*/f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], /*index=430*/f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], /*index=435*/f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], f32[512,1024], /*index=440*/f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], /*index=445*/f32[1024], f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=450*/f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], /*index=455*/f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=460*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], /*index=465*/f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], /*index=470*/f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], /*index=475*/f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], /*index=480*/f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], f32[512,1024], /*index=485*/f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], /*index=490*/f32[1024], f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=495*/f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], /*index=500*/f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=505*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], /*index=510*/f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], /*index=515*/f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], /*index=520*/f32[512,1024], f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], /*index=525*/f32[1024,4096], f32[1024], f32[1024], f32[1024,1024], f32[512,1024], /*index=530*/f32[512,1024], f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], /*index=535*/f32[1024], f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], /*index=540*/f32[1024,1024], f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], /*index=545*/f32[1024], f32[1024,1024], f32[512,1024], f32[512,1024], f32[1024,1024], /*index=550*/f32[4096,1024], f32[4096,1024], f32[1024,4096], f32[1024], f32[1024], /*index=555*/f32[1024], f32[8192,1024]) {
  %constant.717 = s64[] constant(0)
  %p273.713 = f32[8192,1024]{1,0} parameter(273), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %p272.711 = s64[16,512]{1,0} parameter(272), sharding={replicated}
  %reshape.712 = s64[8192]{0} reshape(s64[16,512]{1,0} %p272.711)
  %convert.714 = u32[8192]{0} convert(s64[8192]{0} %reshape.712)
  %gather.715 = f32[8192,1024]{1,0} gather(f32[8192,1024]{1,0} %p273.713, u32[8192]{0} %convert.714), offset_dims={1}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1,1024}
  %reshape.716 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %gather.715)
  %p271.679 = f32[1024,1024]{1,0} parameter(271), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.680 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p271.679)
  %p270.678 = f32[1024,1024]{1,0} parameter(270), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.681 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p270.678)
  %p269.677 = f32[1024,1024]{1,0} parameter(269), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.682 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p269.677)
  %p268.676 = f32[1024,1024]{1,0} parameter(268), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.683 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p268.676)
  %p267.675 = f32[1024,1024]{1,0} parameter(267), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.684 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p267.675)
  %p266.674 = f32[1024,1024]{1,0} parameter(266), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.685 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p266.674)
  %p265.673 = f32[1024,1024]{1,0} parameter(265), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.686 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p265.673)
  %p264.672 = f32[1024,1024]{1,0} parameter(264), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.687 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p264.672)
  %p263.671 = f32[1024,1024]{1,0} parameter(263), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.688 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p263.671)
  %p262.670 = f32[1024,1024]{1,0} parameter(262), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.689 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p262.670)
  %p261.669 = f32[1024,1024]{1,0} parameter(261), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.690 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p261.669)
  %p260.668 = f32[1024,1024]{1,0} parameter(260), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.691 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p260.668)
  %p259.667 = f32[1024,1024]{1,0} parameter(259), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.692 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p259.667)
  %p258.666 = f32[1024,1024]{1,0} parameter(258), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.693 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p258.666)
  %p257.665 = f32[1024,1024]{1,0} parameter(257), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.694 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p257.665)
  %p256.664 = f32[1024,1024]{1,0} parameter(256), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.695 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p256.664)
  %p255.663 = f32[1024,1024]{1,0} parameter(255), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.696 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p255.663)
  %p254.662 = f32[1024,1024]{1,0} parameter(254), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.697 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p254.662)
  %p253.661 = f32[1024,1024]{1,0} parameter(253), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.698 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p253.661)
  %p252.660 = f32[1024,1024]{1,0} parameter(252), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.699 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p252.660)
  %p251.659 = f32[1024,1024]{1,0} parameter(251), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.700 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p251.659)
  %p250.658 = f32[1024,1024]{1,0} parameter(250), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.701 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p250.658)
  %p249.657 = f32[1024,1024]{1,0} parameter(249), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.702 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p249.657)
  %p248.656 = f32[1024,1024]{1,0} parameter(248), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.703 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p248.656)
  %p247.655 = f32[1024,1024]{1,0} parameter(247), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.704 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p247.655)
  %p246.654 = f32[1024,1024]{1,0} parameter(246), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.705 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p246.654)
  %p245.653 = f32[1024,1024]{1,0} parameter(245), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.706 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p245.653)
  %p244.652 = f32[1024,1024]{1,0} parameter(244), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.707 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p244.652)
  %p243.651 = f32[1024,1024]{1,0} parameter(243), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.708 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p243.651)
  %p242.650 = f32[1024,1024]{1,0} parameter(242), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.709 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p242.650)
  %concatenate.710 = f32[30,1024,1024]{2,1,0} concatenate(f32[1,1024,1024]{2,1,0} %reshape.680, f32[1,1024,1024]{2,1,0} %reshape.681, f32[1,1024,1024]{2,1,0} %reshape.682, f32[1,1024,1024]{2,1,0} %reshape.683, f32[1,1024,1024]{2,1,0} %reshape.684, /*index=5*/f32[1,1024,1024]{2,1,0} %reshape.685, f32[1,1024,1024]{2,1,0} %reshape.686, f32[1,1024,1024]{2,1,0} %reshape.687, f32[1,1024,1024]{2,1,0} %reshape.688, f32[1,1024,1024]{2,1,0} %reshape.689, /*index=10*/f32[1,1024,1024]{2,1,0} %reshape.690, f32[1,1024,1024]{2,1,0} %reshape.691, f32[1,1024,1024]{2,1,0} %reshape.692, f32[1,1024,1024]{2,1,0} %reshape.693, f32[1,1024,1024]{2,1,0} %reshape.694, /*index=15*/f32[1,1024,1024]{2,1,0} %reshape.695, f32[1,1024,1024]{2,1,0} %reshape.696, f32[1,1024,1024]{2,1,0} %reshape.697, f32[1,1024,1024]{2,1,0} %reshape.698, f32[1,1024,1024]{2,1,0} %reshape.699, /*index=20*/f32[1,1024,1024]{2,1,0} %reshape.700, f32[1,1024,1024]{2,1,0} %reshape.701, f32[1,1024,1024]{2,1,0} %reshape.702, f32[1,1024,1024]{2,1,0} %reshape.703, f32[1,1024,1024]{2,1,0} %reshape.704, /*index=25*/f32[1,1024,1024]{2,1,0} %reshape.705, f32[1,1024,1024]{2,1,0} %reshape.706, f32[1,1024,1024]{2,1,0} %reshape.707, f32[1,1024,1024]{2,1,0} %reshape.708, f32[1,1024,1024]{2,1,0} %reshape.709), dimensions={0}
  %p241.618 = f32[512,1024]{1,0} parameter(241), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.619 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p241.618)
  %p240.617 = f32[512,1024]{1,0} parameter(240), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.620 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p240.617)
  %p239.616 = f32[512,1024]{1,0} parameter(239), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.621 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p239.616)
  %p238.615 = f32[512,1024]{1,0} parameter(238), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.622 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p238.615)
  %p237.614 = f32[512,1024]{1,0} parameter(237), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.623 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p237.614)
  %p236.613 = f32[512,1024]{1,0} parameter(236), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.624 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p236.613)
  %p235.612 = f32[512,1024]{1,0} parameter(235), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.625 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p235.612)
  %p234.611 = f32[512,1024]{1,0} parameter(234), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.626 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p234.611)
  %p233.610 = f32[512,1024]{1,0} parameter(233), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.627 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p233.610)
  %p232.609 = f32[512,1024]{1,0} parameter(232), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.628 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p232.609)
  %p231.608 = f32[512,1024]{1,0} parameter(231), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.629 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p231.608)
  %p230.607 = f32[512,1024]{1,0} parameter(230), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.630 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p230.607)
  %p229.606 = f32[512,1024]{1,0} parameter(229), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.631 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p229.606)
  %p228.605 = f32[512,1024]{1,0} parameter(228), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.632 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p228.605)
  %p227.604 = f32[512,1024]{1,0} parameter(227), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.633 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p227.604)
  %p226.603 = f32[512,1024]{1,0} parameter(226), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.634 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p226.603)
  %p225.602 = f32[512,1024]{1,0} parameter(225), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.635 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p225.602)
  %p224.601 = f32[512,1024]{1,0} parameter(224), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.636 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p224.601)
  %p223.600 = f32[512,1024]{1,0} parameter(223), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.637 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p223.600)
  %p222.599 = f32[512,1024]{1,0} parameter(222), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.638 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p222.599)
  %p221.598 = f32[512,1024]{1,0} parameter(221), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.639 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p221.598)
  %p220.597 = f32[512,1024]{1,0} parameter(220), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.640 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p220.597)
  %p219.596 = f32[512,1024]{1,0} parameter(219), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.641 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p219.596)
  %p218.595 = f32[512,1024]{1,0} parameter(218), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.642 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p218.595)
  %p217.594 = f32[512,1024]{1,0} parameter(217), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.643 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p217.594)
  %p216.593 = f32[512,1024]{1,0} parameter(216), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.644 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p216.593)
  %p215.592 = f32[512,1024]{1,0} parameter(215), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.645 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p215.592)
  %p214.591 = f32[512,1024]{1,0} parameter(214), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.646 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p214.591)
  %p213.590 = f32[512,1024]{1,0} parameter(213), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.647 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p213.590)
  %p212.589 = f32[512,1024]{1,0} parameter(212), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.648 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p212.589)
  %concatenate.649 = f32[30,512,1024]{2,1,0} concatenate(f32[1,512,1024]{2,1,0} %reshape.619, f32[1,512,1024]{2,1,0} %reshape.620, f32[1,512,1024]{2,1,0} %reshape.621, f32[1,512,1024]{2,1,0} %reshape.622, f32[1,512,1024]{2,1,0} %reshape.623, /*index=5*/f32[1,512,1024]{2,1,0} %reshape.624, f32[1,512,1024]{2,1,0} %reshape.625, f32[1,512,1024]{2,1,0} %reshape.626, f32[1,512,1024]{2,1,0} %reshape.627, f32[1,512,1024]{2,1,0} %reshape.628, /*index=10*/f32[1,512,1024]{2,1,0} %reshape.629, f32[1,512,1024]{2,1,0} %reshape.630, f32[1,512,1024]{2,1,0} %reshape.631, f32[1,512,1024]{2,1,0} %reshape.632, f32[1,512,1024]{2,1,0} %reshape.633, /*index=15*/f32[1,512,1024]{2,1,0} %reshape.634, f32[1,512,1024]{2,1,0} %reshape.635, f32[1,512,1024]{2,1,0} %reshape.636, f32[1,512,1024]{2,1,0} %reshape.637, f32[1,512,1024]{2,1,0} %reshape.638, /*index=20*/f32[1,512,1024]{2,1,0} %reshape.639, f32[1,512,1024]{2,1,0} %reshape.640, f32[1,512,1024]{2,1,0} %reshape.641, f32[1,512,1024]{2,1,0} %reshape.642, f32[1,512,1024]{2,1,0} %reshape.643, /*index=25*/f32[1,512,1024]{2,1,0} %reshape.644, f32[1,512,1024]{2,1,0} %reshape.645, f32[1,512,1024]{2,1,0} %reshape.646, f32[1,512,1024]{2,1,0} %reshape.647, f32[1,512,1024]{2,1,0} %reshape.648), dimensions={0}
  %p211.557 = f32[512,1024]{1,0} parameter(211), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.558 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p211.557)
  %p210.556 = f32[512,1024]{1,0} parameter(210), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.559 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p210.556)
  %p209.555 = f32[512,1024]{1,0} parameter(209), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.560 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p209.555)
  %p208.554 = f32[512,1024]{1,0} parameter(208), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.561 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p208.554)
  %p207.553 = f32[512,1024]{1,0} parameter(207), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.562 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p207.553)
  %p206.552 = f32[512,1024]{1,0} parameter(206), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.563 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p206.552)
  %p205.551 = f32[512,1024]{1,0} parameter(205), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.564 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p205.551)
  %p204.550 = f32[512,1024]{1,0} parameter(204), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.565 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p204.550)
  %p203.549 = f32[512,1024]{1,0} parameter(203), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.566 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p203.549)
  %p202.548 = f32[512,1024]{1,0} parameter(202), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.567 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p202.548)
  %p201.547 = f32[512,1024]{1,0} parameter(201), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.568 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p201.547)
  %p200.546 = f32[512,1024]{1,0} parameter(200), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.569 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p200.546)
  %p199.545 = f32[512,1024]{1,0} parameter(199), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.570 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p199.545)
  %p198.544 = f32[512,1024]{1,0} parameter(198), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.571 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p198.544)
  %p197.543 = f32[512,1024]{1,0} parameter(197), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.572 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p197.543)
  %p196.542 = f32[512,1024]{1,0} parameter(196), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.573 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p196.542)
  %p195.541 = f32[512,1024]{1,0} parameter(195), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.574 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p195.541)
  %p194.540 = f32[512,1024]{1,0} parameter(194), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.575 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p194.540)
  %p193.539 = f32[512,1024]{1,0} parameter(193), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.576 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p193.539)
  %p192.538 = f32[512,1024]{1,0} parameter(192), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.577 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p192.538)
  %p191.537 = f32[512,1024]{1,0} parameter(191), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.578 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p191.537)
  %p190.536 = f32[512,1024]{1,0} parameter(190), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.579 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p190.536)
  %p189.535 = f32[512,1024]{1,0} parameter(189), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.580 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p189.535)
  %p188.534 = f32[512,1024]{1,0} parameter(188), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.581 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p188.534)
  %p187.533 = f32[512,1024]{1,0} parameter(187), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.582 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p187.533)
  %p186.532 = f32[512,1024]{1,0} parameter(186), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.583 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p186.532)
  %p185.531 = f32[512,1024]{1,0} parameter(185), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.584 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p185.531)
  %p184.530 = f32[512,1024]{1,0} parameter(184), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.585 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p184.530)
  %p183.529 = f32[512,1024]{1,0} parameter(183), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.586 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p183.529)
  %p182.528 = f32[512,1024]{1,0} parameter(182), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.587 = f32[1,512,1024]{2,1,0} reshape(f32[512,1024]{1,0} %p182.528)
  %concatenate.588 = f32[30,512,1024]{2,1,0} concatenate(f32[1,512,1024]{2,1,0} %reshape.558, f32[1,512,1024]{2,1,0} %reshape.559, f32[1,512,1024]{2,1,0} %reshape.560, f32[1,512,1024]{2,1,0} %reshape.561, f32[1,512,1024]{2,1,0} %reshape.562, /*index=5*/f32[1,512,1024]{2,1,0} %reshape.563, f32[1,512,1024]{2,1,0} %reshape.564, f32[1,512,1024]{2,1,0} %reshape.565, f32[1,512,1024]{2,1,0} %reshape.566, f32[1,512,1024]{2,1,0} %reshape.567, /*index=10*/f32[1,512,1024]{2,1,0} %reshape.568, f32[1,512,1024]{2,1,0} %reshape.569, f32[1,512,1024]{2,1,0} %reshape.570, f32[1,512,1024]{2,1,0} %reshape.571, f32[1,512,1024]{2,1,0} %reshape.572, /*index=15*/f32[1,512,1024]{2,1,0} %reshape.573, f32[1,512,1024]{2,1,0} %reshape.574, f32[1,512,1024]{2,1,0} %reshape.575, f32[1,512,1024]{2,1,0} %reshape.576, f32[1,512,1024]{2,1,0} %reshape.577, /*index=20*/f32[1,512,1024]{2,1,0} %reshape.578, f32[1,512,1024]{2,1,0} %reshape.579, f32[1,512,1024]{2,1,0} %reshape.580, f32[1,512,1024]{2,1,0} %reshape.581, f32[1,512,1024]{2,1,0} %reshape.582, /*index=25*/f32[1,512,1024]{2,1,0} %reshape.583, f32[1,512,1024]{2,1,0} %reshape.584, f32[1,512,1024]{2,1,0} %reshape.585, f32[1,512,1024]{2,1,0} %reshape.586, f32[1,512,1024]{2,1,0} %reshape.587), dimensions={0}
  %p181.496 = f32[1024,1024]{1,0} parameter(181), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.497 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p181.496)
  %p180.495 = f32[1024,1024]{1,0} parameter(180), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.498 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p180.495)
  %p179.494 = f32[1024,1024]{1,0} parameter(179), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.499 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p179.494)
  %p178.493 = f32[1024,1024]{1,0} parameter(178), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.500 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p178.493)
  %p177.492 = f32[1024,1024]{1,0} parameter(177), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.501 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p177.492)
  %p176.491 = f32[1024,1024]{1,0} parameter(176), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.502 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p176.491)
  %p175.490 = f32[1024,1024]{1,0} parameter(175), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.503 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p175.490)
  %p174.489 = f32[1024,1024]{1,0} parameter(174), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.504 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p174.489)
  %p173.488 = f32[1024,1024]{1,0} parameter(173), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.505 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p173.488)
  %p172.487 = f32[1024,1024]{1,0} parameter(172), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.506 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p172.487)
  %p171.486 = f32[1024,1024]{1,0} parameter(171), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.507 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p171.486)
  %p170.485 = f32[1024,1024]{1,0} parameter(170), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.508 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p170.485)
  %p169.484 = f32[1024,1024]{1,0} parameter(169), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.509 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p169.484)
  %p168.483 = f32[1024,1024]{1,0} parameter(168), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.510 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p168.483)
  %p167.482 = f32[1024,1024]{1,0} parameter(167), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.511 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p167.482)
  %p166.481 = f32[1024,1024]{1,0} parameter(166), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.512 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p166.481)
  %p165.480 = f32[1024,1024]{1,0} parameter(165), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.513 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p165.480)
  %p164.479 = f32[1024,1024]{1,0} parameter(164), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.514 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p164.479)
  %p163.478 = f32[1024,1024]{1,0} parameter(163), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.515 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p163.478)
  %p162.477 = f32[1024,1024]{1,0} parameter(162), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.516 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p162.477)
  %p161.476 = f32[1024,1024]{1,0} parameter(161), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.517 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p161.476)
  %p160.475 = f32[1024,1024]{1,0} parameter(160), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.518 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p160.475)
  %p159.474 = f32[1024,1024]{1,0} parameter(159), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.519 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p159.474)
  %p158.473 = f32[1024,1024]{1,0} parameter(158), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.520 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p158.473)
  %p157.472 = f32[1024,1024]{1,0} parameter(157), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.521 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p157.472)
  %p156.471 = f32[1024,1024]{1,0} parameter(156), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.522 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p156.471)
  %p155.470 = f32[1024,1024]{1,0} parameter(155), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.523 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p155.470)
  %p154.469 = f32[1024,1024]{1,0} parameter(154), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.524 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p154.469)
  %p153.468 = f32[1024,1024]{1,0} parameter(153), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.525 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p153.468)
  %p152.467 = f32[1024,1024]{1,0} parameter(152), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.526 = f32[1,1024,1024]{2,1,0} reshape(f32[1024,1024]{1,0} %p152.467)
  %concatenate.527 = f32[30,1024,1024]{2,1,0} concatenate(f32[1,1024,1024]{2,1,0} %reshape.497, f32[1,1024,1024]{2,1,0} %reshape.498, f32[1,1024,1024]{2,1,0} %reshape.499, f32[1,1024,1024]{2,1,0} %reshape.500, f32[1,1024,1024]{2,1,0} %reshape.501, /*index=5*/f32[1,1024,1024]{2,1,0} %reshape.502, f32[1,1024,1024]{2,1,0} %reshape.503, f32[1,1024,1024]{2,1,0} %reshape.504, f32[1,1024,1024]{2,1,0} %reshape.505, f32[1,1024,1024]{2,1,0} %reshape.506, /*index=10*/f32[1,1024,1024]{2,1,0} %reshape.507, f32[1,1024,1024]{2,1,0} %reshape.508, f32[1,1024,1024]{2,1,0} %reshape.509, f32[1,1024,1024]{2,1,0} %reshape.510, f32[1,1024,1024]{2,1,0} %reshape.511, /*index=15*/f32[1,1024,1024]{2,1,0} %reshape.512, f32[1,1024,1024]{2,1,0} %reshape.513, f32[1,1024,1024]{2,1,0} %reshape.514, f32[1,1024,1024]{2,1,0} %reshape.515, f32[1,1024,1024]{2,1,0} %reshape.516, /*index=20*/f32[1,1024,1024]{2,1,0} %reshape.517, f32[1,1024,1024]{2,1,0} %reshape.518, f32[1,1024,1024]{2,1,0} %reshape.519, f32[1,1024,1024]{2,1,0} %reshape.520, f32[1,1024,1024]{2,1,0} %reshape.521, /*index=25*/f32[1,1024,1024]{2,1,0} %reshape.522, f32[1,1024,1024]{2,1,0} %reshape.523, f32[1,1024,1024]{2,1,0} %reshape.524, f32[1,1024,1024]{2,1,0} %reshape.525, f32[1,1024,1024]{2,1,0} %reshape.526), dimensions={0}
  %p151.435 = f32[4096,1024]{1,0} parameter(151), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.436 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p151.435)
  %p150.434 = f32[4096,1024]{1,0} parameter(150), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.437 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p150.434)
  %p149.433 = f32[4096,1024]{1,0} parameter(149), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.438 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p149.433)
  %p148.432 = f32[4096,1024]{1,0} parameter(148), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.439 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p148.432)
  %p147.431 = f32[4096,1024]{1,0} parameter(147), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.440 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p147.431)
  %p146.430 = f32[4096,1024]{1,0} parameter(146), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.441 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p146.430)
  %p145.429 = f32[4096,1024]{1,0} parameter(145), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.442 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p145.429)
  %p144.428 = f32[4096,1024]{1,0} parameter(144), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.443 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p144.428)
  %p143.427 = f32[4096,1024]{1,0} parameter(143), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.444 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p143.427)
  %p142.426 = f32[4096,1024]{1,0} parameter(142), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.445 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p142.426)
  %p141.425 = f32[4096,1024]{1,0} parameter(141), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.446 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p141.425)
  %p140.424 = f32[4096,1024]{1,0} parameter(140), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.447 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p140.424)
  %p139.423 = f32[4096,1024]{1,0} parameter(139), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.448 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p139.423)
  %p138.422 = f32[4096,1024]{1,0} parameter(138), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.449 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p138.422)
  %p137.421 = f32[4096,1024]{1,0} parameter(137), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.450 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p137.421)
  %p136.420 = f32[4096,1024]{1,0} parameter(136), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.451 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p136.420)
  %p135.419 = f32[4096,1024]{1,0} parameter(135), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.452 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p135.419)
  %p134.418 = f32[4096,1024]{1,0} parameter(134), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.453 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p134.418)
  %p133.417 = f32[4096,1024]{1,0} parameter(133), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.454 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p133.417)
  %p132.416 = f32[4096,1024]{1,0} parameter(132), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.455 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p132.416)
  %p131.415 = f32[4096,1024]{1,0} parameter(131), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.456 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p131.415)
  %p130.414 = f32[4096,1024]{1,0} parameter(130), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.457 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p130.414)
  %p129.413 = f32[4096,1024]{1,0} parameter(129), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.458 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p129.413)
  %p128.412 = f32[4096,1024]{1,0} parameter(128), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.459 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p128.412)
  %p127.411 = f32[4096,1024]{1,0} parameter(127), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.460 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p127.411)
  %p126.410 = f32[4096,1024]{1,0} parameter(126), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.461 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p126.410)
  %p125.409 = f32[4096,1024]{1,0} parameter(125), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.462 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p125.409)
  %p124.408 = f32[4096,1024]{1,0} parameter(124), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.463 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p124.408)
  %p123.407 = f32[4096,1024]{1,0} parameter(123), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.464 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p123.407)
  %p122.406 = f32[4096,1024]{1,0} parameter(122), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.465 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p122.406)
  %concatenate.466 = f32[30,4096,1024]{2,1,0} concatenate(f32[1,4096,1024]{2,1,0} %reshape.436, f32[1,4096,1024]{2,1,0} %reshape.437, f32[1,4096,1024]{2,1,0} %reshape.438, f32[1,4096,1024]{2,1,0} %reshape.439, f32[1,4096,1024]{2,1,0} %reshape.440, /*index=5*/f32[1,4096,1024]{2,1,0} %reshape.441, f32[1,4096,1024]{2,1,0} %reshape.442, f32[1,4096,1024]{2,1,0} %reshape.443, f32[1,4096,1024]{2,1,0} %reshape.444, f32[1,4096,1024]{2,1,0} %reshape.445, /*index=10*/f32[1,4096,1024]{2,1,0} %reshape.446, f32[1,4096,1024]{2,1,0} %reshape.447, f32[1,4096,1024]{2,1,0} %reshape.448, f32[1,4096,1024]{2,1,0} %reshape.449, f32[1,4096,1024]{2,1,0} %reshape.450, /*index=15*/f32[1,4096,1024]{2,1,0} %reshape.451, f32[1,4096,1024]{2,1,0} %reshape.452, f32[1,4096,1024]{2,1,0} %reshape.453, f32[1,4096,1024]{2,1,0} %reshape.454, f32[1,4096,1024]{2,1,0} %reshape.455, /*index=20*/f32[1,4096,1024]{2,1,0} %reshape.456, f32[1,4096,1024]{2,1,0} %reshape.457, f32[1,4096,1024]{2,1,0} %reshape.458, f32[1,4096,1024]{2,1,0} %reshape.459, f32[1,4096,1024]{2,1,0} %reshape.460, /*index=25*/f32[1,4096,1024]{2,1,0} %reshape.461, f32[1,4096,1024]{2,1,0} %reshape.462, f32[1,4096,1024]{2,1,0} %reshape.463, f32[1,4096,1024]{2,1,0} %reshape.464, f32[1,4096,1024]{2,1,0} %reshape.465), dimensions={0}
  %p121.374 = f32[4096,1024]{1,0} parameter(121), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.375 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p121.374)
  %p120.373 = f32[4096,1024]{1,0} parameter(120), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.376 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p120.373)
  %p119.372 = f32[4096,1024]{1,0} parameter(119), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.377 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p119.372)
  %p118.371 = f32[4096,1024]{1,0} parameter(118), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.378 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p118.371)
  %p117.370 = f32[4096,1024]{1,0} parameter(117), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.379 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p117.370)
  %p116.369 = f32[4096,1024]{1,0} parameter(116), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.380 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p116.369)
  %p115.368 = f32[4096,1024]{1,0} parameter(115), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.381 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p115.368)
  %p114.367 = f32[4096,1024]{1,0} parameter(114), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.382 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p114.367)
  %p113.366 = f32[4096,1024]{1,0} parameter(113), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.383 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p113.366)
  %p112.365 = f32[4096,1024]{1,0} parameter(112), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.384 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p112.365)
  %p111.364 = f32[4096,1024]{1,0} parameter(111), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.385 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p111.364)
  %p110.363 = f32[4096,1024]{1,0} parameter(110), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.386 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p110.363)
  %p109.362 = f32[4096,1024]{1,0} parameter(109), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.387 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p109.362)
  %p108.361 = f32[4096,1024]{1,0} parameter(108), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.388 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p108.361)
  %p107.360 = f32[4096,1024]{1,0} parameter(107), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.389 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p107.360)
  %p106.359 = f32[4096,1024]{1,0} parameter(106), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.390 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p106.359)
  %p105.358 = f32[4096,1024]{1,0} parameter(105), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.391 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p105.358)
  %p104.357 = f32[4096,1024]{1,0} parameter(104), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.392 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p104.357)
  %p103.356 = f32[4096,1024]{1,0} parameter(103), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.393 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p103.356)
  %p102.355 = f32[4096,1024]{1,0} parameter(102), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.394 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p102.355)
  %p101.354 = f32[4096,1024]{1,0} parameter(101), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.395 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p101.354)
  %p100.353 = f32[4096,1024]{1,0} parameter(100), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.396 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p100.353)
  %p99.352 = f32[4096,1024]{1,0} parameter(99), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.397 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p99.352)
  %p98.351 = f32[4096,1024]{1,0} parameter(98), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.398 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p98.351)
  %p97.350 = f32[4096,1024]{1,0} parameter(97), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.399 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p97.350)
  %p96.349 = f32[4096,1024]{1,0} parameter(96), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.400 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p96.349)
  %p95.348 = f32[4096,1024]{1,0} parameter(95), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.401 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p95.348)
  %p94.347 = f32[4096,1024]{1,0} parameter(94), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.402 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p94.347)
  %p93.346 = f32[4096,1024]{1,0} parameter(93), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.403 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p93.346)
  %p92.345 = f32[4096,1024]{1,0} parameter(92), sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %reshape.404 = f32[1,4096,1024]{2,1,0} reshape(f32[4096,1024]{1,0} %p92.345)
  %concatenate.405 = f32[30,4096,1024]{2,1,0} concatenate(f32[1,4096,1024]{2,1,0} %reshape.375, f32[1,4096,1024]{2,1,0} %reshape.376, f32[1,4096,1024]{2,1,0} %reshape.377, f32[1,4096,1024]{2,1,0} %reshape.378, f32[1,4096,1024]{2,1,0} %reshape.379, /*index=5*/f32[1,4096,1024]{2,1,0} %reshape.380, f32[1,4096,1024]{2,1,0} %reshape.381, f32[1,4096,1024]{2,1,0} %reshape.382, f32[1,4096,1024]{2,1,0} %reshape.383, f32[1,4096,1024]{2,1,0} %reshape.384, /*index=10*/f32[1,4096,1024]{2,1,0} %reshape.385, f32[1,4096,1024]{2,1,0} %reshape.386, f32[1,4096,1024]{2,1,0} %reshape.387, f32[1,4096,1024]{2,1,0} %reshape.388, f32[1,4096,1024]{2,1,0} %reshape.389, /*index=15*/f32[1,4096,1024]{2,1,0} %reshape.390, f32[1,4096,1024]{2,1,0} %reshape.391, f32[1,4096,1024]{2,1,0} %reshape.392, f32[1,4096,1024]{2,1,0} %reshape.393, f32[1,4096,1024]{2,1,0} %reshape.394, /*index=20*/f32[1,4096,1024]{2,1,0} %reshape.395, f32[1,4096,1024]{2,1,0} %reshape.396, f32[1,4096,1024]{2,1,0} %reshape.397, f32[1,4096,1024]{2,1,0} %reshape.398, f32[1,4096,1024]{2,1,0} %reshape.399, /*index=25*/f32[1,4096,1024]{2,1,0} %reshape.400, f32[1,4096,1024]{2,1,0} %reshape.401, f32[1,4096,1024]{2,1,0} %reshape.402, f32[1,4096,1024]{2,1,0} %reshape.403, f32[1,4096,1024]{2,1,0} %reshape.404), dimensions={0}
  %p91.313 = f32[1024,4096]{1,0} parameter(91), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.314 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p91.313)
  %p90.312 = f32[1024,4096]{1,0} parameter(90), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.315 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p90.312)
  %p89.311 = f32[1024,4096]{1,0} parameter(89), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.316 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p89.311)
  %p88.310 = f32[1024,4096]{1,0} parameter(88), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.317 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p88.310)
  %p87.309 = f32[1024,4096]{1,0} parameter(87), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.318 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p87.309)
  %p86.308 = f32[1024,4096]{1,0} parameter(86), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.319 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p86.308)
  %p85.307 = f32[1024,4096]{1,0} parameter(85), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.320 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p85.307)
  %p84.306 = f32[1024,4096]{1,0} parameter(84), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.321 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p84.306)
  %p83.305 = f32[1024,4096]{1,0} parameter(83), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.322 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p83.305)
  %p82.304 = f32[1024,4096]{1,0} parameter(82), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.323 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p82.304)
  %p81.303 = f32[1024,4096]{1,0} parameter(81), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.324 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p81.303)
  %p80.302 = f32[1024,4096]{1,0} parameter(80), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.325 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p80.302)
  %p79.301 = f32[1024,4096]{1,0} parameter(79), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.326 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p79.301)
  %p78.300 = f32[1024,4096]{1,0} parameter(78), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.327 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p78.300)
  %p77.299 = f32[1024,4096]{1,0} parameter(77), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.328 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p77.299)
  %p76.298 = f32[1024,4096]{1,0} parameter(76), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.329 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p76.298)
  %p75.297 = f32[1024,4096]{1,0} parameter(75), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.330 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p75.297)
  %p74.296 = f32[1024,4096]{1,0} parameter(74), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.331 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p74.296)
  %p73.295 = f32[1024,4096]{1,0} parameter(73), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.332 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p73.295)
  %p72.294 = f32[1024,4096]{1,0} parameter(72), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.333 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p72.294)
  %p71.293 = f32[1024,4096]{1,0} parameter(71), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.334 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p71.293)
  %p70.292 = f32[1024,4096]{1,0} parameter(70), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.335 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p70.292)
  %p69.291 = f32[1024,4096]{1,0} parameter(69), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.336 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p69.291)
  %p68.290 = f32[1024,4096]{1,0} parameter(68), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.337 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p68.290)
  %p67.289 = f32[1024,4096]{1,0} parameter(67), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.338 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p67.289)
  %p66.288 = f32[1024,4096]{1,0} parameter(66), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.339 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p66.288)
  %p65.287 = f32[1024,4096]{1,0} parameter(65), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.340 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p65.287)
  %p64.286 = f32[1024,4096]{1,0} parameter(64), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.341 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p64.286)
  %p63.285 = f32[1024,4096]{1,0} parameter(63), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.342 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p63.285)
  %p62.284 = f32[1024,4096]{1,0} parameter(62), sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %reshape.343 = f32[1,1024,4096]{2,1,0} reshape(f32[1024,4096]{1,0} %p62.284)
  %concatenate.344 = f32[30,1024,4096]{2,1,0} concatenate(f32[1,1024,4096]{2,1,0} %reshape.314, f32[1,1024,4096]{2,1,0} %reshape.315, f32[1,1024,4096]{2,1,0} %reshape.316, f32[1,1024,4096]{2,1,0} %reshape.317, f32[1,1024,4096]{2,1,0} %reshape.318, /*index=5*/f32[1,1024,4096]{2,1,0} %reshape.319, f32[1,1024,4096]{2,1,0} %reshape.320, f32[1,1024,4096]{2,1,0} %reshape.321, f32[1,1024,4096]{2,1,0} %reshape.322, f32[1,1024,4096]{2,1,0} %reshape.323, /*index=10*/f32[1,1024,4096]{2,1,0} %reshape.324, f32[1,1024,4096]{2,1,0} %reshape.325, f32[1,1024,4096]{2,1,0} %reshape.326, f32[1,1024,4096]{2,1,0} %reshape.327, f32[1,1024,4096]{2,1,0} %reshape.328, /*index=15*/f32[1,1024,4096]{2,1,0} %reshape.329, f32[1,1024,4096]{2,1,0} %reshape.330, f32[1,1024,4096]{2,1,0} %reshape.331, f32[1,1024,4096]{2,1,0} %reshape.332, f32[1,1024,4096]{2,1,0} %reshape.333, /*index=20*/f32[1,1024,4096]{2,1,0} %reshape.334, f32[1,1024,4096]{2,1,0} %reshape.335, f32[1,1024,4096]{2,1,0} %reshape.336, f32[1,1024,4096]{2,1,0} %reshape.337, f32[1,1024,4096]{2,1,0} %reshape.338, /*index=25*/f32[1,1024,4096]{2,1,0} %reshape.339, f32[1,1024,4096]{2,1,0} %reshape.340, f32[1,1024,4096]{2,1,0} %reshape.341, f32[1,1024,4096]{2,1,0} %reshape.342, f32[1,1024,4096]{2,1,0} %reshape.343), dimensions={0}
  %p61.252 = f32[1024]{0} parameter(61), sharding={replicated}
  %reshape.253 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p61.252)
  %p60.251 = f32[1024]{0} parameter(60), sharding={replicated}
  %reshape.254 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p60.251)
  %p59.250 = f32[1024]{0} parameter(59), sharding={replicated}
  %reshape.255 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p59.250)
  %p58.249 = f32[1024]{0} parameter(58), sharding={replicated}
  %reshape.256 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p58.249)
  %p57.248 = f32[1024]{0} parameter(57), sharding={replicated}
  %reshape.257 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p57.248)
  %p56.247 = f32[1024]{0} parameter(56), sharding={replicated}
  %reshape.258 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p56.247)
  %p55.246 = f32[1024]{0} parameter(55), sharding={replicated}
  %reshape.259 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p55.246)
  %p54.245 = f32[1024]{0} parameter(54), sharding={replicated}
  %reshape.260 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p54.245)
  %p53.244 = f32[1024]{0} parameter(53), sharding={replicated}
  %reshape.261 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p53.244)
  %p52.243 = f32[1024]{0} parameter(52), sharding={replicated}
  %reshape.262 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p52.243)
  %p51.242 = f32[1024]{0} parameter(51), sharding={replicated}
  %reshape.263 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p51.242)
  %p50.241 = f32[1024]{0} parameter(50), sharding={replicated}
  %reshape.264 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p50.241)
  %p49.240 = f32[1024]{0} parameter(49), sharding={replicated}
  %reshape.265 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p49.240)
  %p48.239 = f32[1024]{0} parameter(48), sharding={replicated}
  %reshape.266 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p48.239)
  %p47.238 = f32[1024]{0} parameter(47), sharding={replicated}
  %reshape.267 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p47.238)
  %p46.237 = f32[1024]{0} parameter(46), sharding={replicated}
  %reshape.268 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p46.237)
  %p45.236 = f32[1024]{0} parameter(45), sharding={replicated}
  %reshape.269 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p45.236)
  %p44.235 = f32[1024]{0} parameter(44), sharding={replicated}
  %reshape.270 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p44.235)
  %p43.234 = f32[1024]{0} parameter(43), sharding={replicated}
  %reshape.271 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p43.234)
  %p42.233 = f32[1024]{0} parameter(42), sharding={replicated}
  %reshape.272 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p42.233)
  %p41.232 = f32[1024]{0} parameter(41), sharding={replicated}
  %reshape.273 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p41.232)
  %p40.231 = f32[1024]{0} parameter(40), sharding={replicated}
  %reshape.274 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p40.231)
  %p39.230 = f32[1024]{0} parameter(39), sharding={replicated}
  %reshape.275 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p39.230)
  %p38.229 = f32[1024]{0} parameter(38), sharding={replicated}
  %reshape.276 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p38.229)
  %p37.228 = f32[1024]{0} parameter(37), sharding={replicated}
  %reshape.277 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p37.228)
  %p36.227 = f32[1024]{0} parameter(36), sharding={replicated}
  %reshape.278 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p36.227)
  %p35.226 = f32[1024]{0} parameter(35), sharding={replicated}
  %reshape.279 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p35.226)
  %p34.225 = f32[1024]{0} parameter(34), sharding={replicated}
  %reshape.280 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p34.225)
  %p33.224 = f32[1024]{0} parameter(33), sharding={replicated}
  %reshape.281 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p33.224)
  %p32.223 = f32[1024]{0} parameter(32), sharding={replicated}
  %reshape.282 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p32.223)
  %concatenate.283 = f32[30,1024]{1,0} concatenate(f32[1,1024]{1,0} %reshape.253, f32[1,1024]{1,0} %reshape.254, f32[1,1024]{1,0} %reshape.255, f32[1,1024]{1,0} %reshape.256, f32[1,1024]{1,0} %reshape.257, /*index=5*/f32[1,1024]{1,0} %reshape.258, f32[1,1024]{1,0} %reshape.259, f32[1,1024]{1,0} %reshape.260, f32[1,1024]{1,0} %reshape.261, f32[1,1024]{1,0} %reshape.262, /*index=10*/f32[1,1024]{1,0} %reshape.263, f32[1,1024]{1,0} %reshape.264, f32[1,1024]{1,0} %reshape.265, f32[1,1024]{1,0} %reshape.266, f32[1,1024]{1,0} %reshape.267, /*index=15*/f32[1,1024]{1,0} %reshape.268, f32[1,1024]{1,0} %reshape.269, f32[1,1024]{1,0} %reshape.270, f32[1,1024]{1,0} %reshape.271, f32[1,1024]{1,0} %reshape.272, /*index=20*/f32[1,1024]{1,0} %reshape.273, f32[1,1024]{1,0} %reshape.274, f32[1,1024]{1,0} %reshape.275, f32[1,1024]{1,0} %reshape.276, f32[1,1024]{1,0} %reshape.277, /*index=25*/f32[1,1024]{1,0} %reshape.278, f32[1,1024]{1,0} %reshape.279, f32[1,1024]{1,0} %reshape.280, f32[1,1024]{1,0} %reshape.281, f32[1,1024]{1,0} %reshape.282), dimensions={0}
  %p31.191 = f32[1024]{0} parameter(31), sharding={replicated}
  %reshape.192 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p31.191)
  %p30.190 = f32[1024]{0} parameter(30), sharding={replicated}
  %reshape.193 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p30.190)
  %p29.189 = f32[1024]{0} parameter(29), sharding={replicated}
  %reshape.194 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p29.189)
  %p28.188 = f32[1024]{0} parameter(28), sharding={replicated}
  %reshape.195 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p28.188)
  %p27.187 = f32[1024]{0} parameter(27), sharding={replicated}
  %reshape.196 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p27.187)
  %p26.186 = f32[1024]{0} parameter(26), sharding={replicated}
  %reshape.197 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p26.186)
  %p25.185 = f32[1024]{0} parameter(25), sharding={replicated}
  %reshape.198 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p25.185)
  %p24.184 = f32[1024]{0} parameter(24), sharding={replicated}
  %reshape.199 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p24.184)
  %p23.183 = f32[1024]{0} parameter(23), sharding={replicated}
  %reshape.200 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p23.183)
  %p22.182 = f32[1024]{0} parameter(22), sharding={replicated}
  %reshape.201 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p22.182)
  %p21.181 = f32[1024]{0} parameter(21), sharding={replicated}
  %reshape.202 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p21.181)
  %p20.180 = f32[1024]{0} parameter(20), sharding={replicated}
  %reshape.203 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p20.180)
  %p19.179 = f32[1024]{0} parameter(19), sharding={replicated}
  %reshape.204 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p19.179)
  %p18.178 = f32[1024]{0} parameter(18), sharding={replicated}
  %reshape.205 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p18.178)
  %p17.177 = f32[1024]{0} parameter(17), sharding={replicated}
  %reshape.206 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p17.177)
  %p16.176 = f32[1024]{0} parameter(16), sharding={replicated}
  %reshape.207 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p16.176)
  %p15.175 = f32[1024]{0} parameter(15), sharding={replicated}
  %reshape.208 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p15.175)
  %p14.174 = f32[1024]{0} parameter(14), sharding={replicated}
  %reshape.209 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p14.174)
  %p13.173 = f32[1024]{0} parameter(13), sharding={replicated}
  %reshape.210 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p13.173)
  %p12.172 = f32[1024]{0} parameter(12), sharding={replicated}
  %reshape.211 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p12.172)
  %p11.171 = f32[1024]{0} parameter(11), sharding={replicated}
  %reshape.212 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p11.171)
  %p10.170 = f32[1024]{0} parameter(10), sharding={replicated}
  %reshape.213 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p10.170)
  %p9.169 = f32[1024]{0} parameter(9), sharding={replicated}
  %reshape.214 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p9.169)
  %p8.168 = f32[1024]{0} parameter(8), sharding={replicated}
  %reshape.215 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p8.168)
  %p7.167 = f32[1024]{0} parameter(7), sharding={replicated}
  %reshape.216 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p7.167)
  %p6.166 = f32[1024]{0} parameter(6), sharding={replicated}
  %reshape.217 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p6.166)
  %p5.165 = f32[1024]{0} parameter(5), sharding={replicated}
  %reshape.218 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p5.165)
  %p4.164 = f32[1024]{0} parameter(4), sharding={replicated}
  %reshape.219 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p4.164)
  %p3.163 = f32[1024]{0} parameter(3), sharding={replicated}
  %reshape.220 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p3.163)
  %p2.162 = f32[1024]{0} parameter(2), sharding={replicated}
  %reshape.221 = f32[1,1024]{1,0} reshape(f32[1024]{0} %p2.162)
  %concatenate.222 = f32[30,1024]{1,0} concatenate(f32[1,1024]{1,0} %reshape.192, f32[1,1024]{1,0} %reshape.193, f32[1,1024]{1,0} %reshape.194, f32[1,1024]{1,0} %reshape.195, f32[1,1024]{1,0} %reshape.196, /*index=5*/f32[1,1024]{1,0} %reshape.197, f32[1,1024]{1,0} %reshape.198, f32[1,1024]{1,0} %reshape.199, f32[1,1024]{1,0} %reshape.200, f32[1,1024]{1,0} %reshape.201, /*index=10*/f32[1,1024]{1,0} %reshape.202, f32[1,1024]{1,0} %reshape.203, f32[1,1024]{1,0} %reshape.204, f32[1,1024]{1,0} %reshape.205, f32[1,1024]{1,0} %reshape.206, /*index=15*/f32[1,1024]{1,0} %reshape.207, f32[1,1024]{1,0} %reshape.208, f32[1,1024]{1,0} %reshape.209, f32[1,1024]{1,0} %reshape.210, f32[1,1024]{1,0} %reshape.211, /*index=20*/f32[1,1024]{1,0} %reshape.212, f32[1,1024]{1,0} %reshape.213, f32[1,1024]{1,0} %reshape.214, f32[1,1024]{1,0} %reshape.215, f32[1,1024]{1,0} %reshape.216, /*index=25*/f32[1,1024]{1,0} %reshape.217, f32[1,1024]{1,0} %reshape.218, f32[1,1024]{1,0} %reshape.219, f32[1,1024]{1,0} %reshape.220, f32[1,1024]{1,0} %reshape.221), dimensions={0}
  %constant.157 = f32[] constant(0)
  %reshape.158 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.157)
  %broadcast.159 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.158), dimensions={0,1,2,3}
  %reshape.160 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.159)
  %broadcast.161 = f32[30,16,512,1024]{3,2,1,0} broadcast(f32[] %reshape.160), dimensions={}
  %constant.152 = f32[] constant(0)
  %reshape.153 = f32[1,1]{1,0} reshape(f32[] %constant.152)
  %broadcast.154 = f32[1,1]{1,0} broadcast(f32[1,1]{1,0} %reshape.153), dimensions={0,1}
  %reshape.155 = f32[] reshape(f32[1,1]{1,0} %broadcast.154)
  %broadcast.156 = f32[30,1024]{1,0} broadcast(f32[] %reshape.155), dimensions={}
  %constant.147 = f32[] constant(0)
  %reshape.148 = f32[1,1]{1,0} reshape(f32[] %constant.147)
  %broadcast.149 = f32[1,1]{1,0} broadcast(f32[1,1]{1,0} %reshape.148), dimensions={0,1}
  %reshape.150 = f32[] reshape(f32[1,1]{1,0} %broadcast.149)
  %broadcast.151 = f32[30,1024]{1,0} broadcast(f32[] %reshape.150), dimensions={}
  %constant.142 = f32[] constant(0)
  %reshape.143 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.142)
  %broadcast.144 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.143), dimensions={0,1,2,3}
  %reshape.145 = f32[1]{0} reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.144)
  %broadcast.146 = f32[30,16,512,1]{3,2,1,0} broadcast(f32[1]{0} %reshape.145), dimensions={3}
  %constant.137 = f32[] constant(0)
  %reshape.138 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.137)
  %broadcast.139 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.138), dimensions={0,1,2,3}
  %reshape.140 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.139)
  %broadcast.141 = f32[30,16,512,1024]{3,2,1,0} broadcast(f32[] %reshape.140), dimensions={}
  %constant.132 = f32[] constant(0)
  %reshape.133 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.132)
  %broadcast.134 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.133), dimensions={0,1,2}
  %reshape.135 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.134)
  %broadcast.136 = f32[30,1024,1024]{2,1,0} broadcast(f32[] %reshape.135), dimensions={}
  %constant.127 = f32[] constant(0)
  %reshape.128 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.127)
  %broadcast.129 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.128), dimensions={0,1,2}
  %reshape.130 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.129)
  %broadcast.131 = f32[30,8192,1024]{2,1,0} broadcast(f32[] %reshape.130), dimensions={}
  %constant.122 = f32[] constant(0)
  %reshape.123 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.122)
  %broadcast.124 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.123), dimensions={0,1,2}
  %reshape.125 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.124)
  %broadcast.126 = f32[30,1024,512]{2,1,0} broadcast(f32[] %reshape.125), dimensions={}
  %constant.117 = f32[] constant(0)
  %reshape.118 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.117)
  %broadcast.119 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.118), dimensions={0,1,2}
  %reshape.120 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.119)
  %broadcast.121 = f32[30,8192,1024]{2,1,0} broadcast(f32[] %reshape.120), dimensions={}
  %constant.112 = f32[] constant(0)
  %reshape.113 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.112)
  %broadcast.114 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.113), dimensions={0,1,2}
  %reshape.115 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.114)
  %broadcast.116 = f32[30,1024,512]{2,1,0} broadcast(f32[] %reshape.115), dimensions={}
  %constant.107 = f32[] constant(0)
  %reshape.108 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.107)
  %broadcast.109 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.108), dimensions={0,1,2}
  %reshape.110 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.109)
  %broadcast.111 = f32[30,8192,1024]{2,1,0} broadcast(f32[] %reshape.110), dimensions={}
  %constant.102 = f32[] constant(0)
  %reshape.103 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.102)
  %broadcast.104 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.103), dimensions={0,1,2,3}
  %reshape.105 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.104)
  %broadcast.106 = f32[30,128,512,128]{3,2,1,0} broadcast(f32[] %reshape.105), dimensions={}
  %constant.97 = f32[] constant(0)
  %reshape.98 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.97)
  %broadcast.99 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.98), dimensions={0,1,2,3}
  %reshape.100 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.99)
  %broadcast.101 = f32[30,128,128,512]{3,2,1,0} broadcast(f32[] %reshape.100), dimensions={}
  %constant.92 = f32[] constant(0)
  %reshape.93 = f32[1,1,1,1,1]{4,3,2,1,0} reshape(f32[] %constant.92)
  %broadcast.94 = f32[1,1,1,1,1]{4,3,2,1,0} broadcast(f32[1,1,1,1,1]{4,3,2,1,0} %reshape.93), dimensions={0,1,2,3,4}
  %reshape.95 = f32[] reshape(f32[1,1,1,1,1]{4,3,2,1,0} %broadcast.94)
  %broadcast.96 = f32[30,16,8,512,512]{4,3,2,1,0} broadcast(f32[] %reshape.95), dimensions={}
  %constant.87 = f32[] constant(0)
  %reshape.88 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.87)
  %broadcast.89 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.88), dimensions={0,1,2,3}
  %reshape.90 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.89)
  %broadcast.91 = f32[30,128,512,512]{3,2,1,0} broadcast(f32[] %reshape.90), dimensions={}
  %constant.82 = f32[] constant(0)
  %reshape.83 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.82)
  %broadcast.84 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.83), dimensions={0,1,2,3}
  %reshape.85 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.84)
  %broadcast.86 = f32[30,128,512,128]{3,2,1,0} broadcast(f32[] %reshape.85), dimensions={}
  %constant.77 = f32[] constant(0)
  %reshape.78 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.77)
  %broadcast.79 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.78), dimensions={0,1,2}
  %reshape.80 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.79)
  %broadcast.81 = f32[30,1024,1024]{2,1,0} broadcast(f32[] %reshape.80), dimensions={}
  %constant.72 = f32[] constant(0)
  %reshape.73 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.72)
  %broadcast.74 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.73), dimensions={0,1,2}
  %reshape.75 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.74)
  %broadcast.76 = f32[30,8192,1024]{2,1,0} broadcast(f32[] %reshape.75), dimensions={}
  %constant.67 = f32[] constant(0)
  %reshape.68 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.67)
  %broadcast.69 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.68), dimensions={0,1,2,3}
  %reshape.70 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.69)
  %broadcast.71 = f32[30,16,512,1024]{3,2,1,0} broadcast(f32[] %reshape.70), dimensions={}
  %constant.62 = f32[] constant(0)
  %reshape.63 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.62)
  %broadcast.64 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.63), dimensions={0,1,2,3}
  %reshape.65 = f32[1]{0} reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.64)
  %broadcast.66 = f32[30,16,512,1]{3,2,1,0} broadcast(f32[1]{0} %reshape.65), dimensions={3}
  %constant.57 = f32[] constant(0)
  %reshape.58 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.57)
  %broadcast.59 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.58), dimensions={0,1,2,3}
  %reshape.60 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.59)
  %broadcast.61 = f32[30,16,512,1024]{3,2,1,0} broadcast(f32[] %reshape.60), dimensions={}
  %constant.52 = f32[] constant(0)
  %reshape.53 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.52)
  %broadcast.54 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.53), dimensions={0,1,2}
  %reshape.55 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.54)
  %broadcast.56 = f32[30,1024,4096]{2,1,0} broadcast(f32[] %reshape.55), dimensions={}
  %constant.47 = f32[] constant(0)
  %reshape.48 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.47)
  %broadcast.49 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.48), dimensions={0,1,2}
  %reshape.50 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.49)
  %broadcast.51 = f32[30,8192,1024]{2,1,0} broadcast(f32[] %reshape.50), dimensions={}
  %constant.42 = f32[] constant(0)
  %reshape.43 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.42)
  %broadcast.44 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.43), dimensions={0,1,2,3}
  %reshape.45 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.44)
  %broadcast.46 = f32[30,16,512,4096]{3,2,1,0} broadcast(f32[] %reshape.45), dimensions={}
  %constant.37 = f32[] constant(0)
  %reshape.38 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.37)
  %broadcast.39 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.38), dimensions={0,1,2}
  %reshape.40 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.39)
  %broadcast.41 = f32[30,1024,4096]{2,1,0} broadcast(f32[] %reshape.40), dimensions={}
  %constant.32 = f32[] constant(0)
  %reshape.33 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.32)
  %broadcast.34 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.33), dimensions={0,1,2}
  %reshape.35 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.34)
  %broadcast.36 = f32[30,8192,1024]{2,1,0} broadcast(f32[] %reshape.35), dimensions={}
  %constant.27 = f32[] constant(0)
  %reshape.28 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.27)
  %broadcast.29 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.28), dimensions={0,1,2,3}
  %reshape.30 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.29)
  %broadcast.31 = f32[30,16,512,4096]{3,2,1,0} broadcast(f32[] %reshape.30), dimensions={}
  %constant.22 = f32[] constant(0)
  %reshape.23 = f32[1,1,1,1]{3,2,1,0} reshape(f32[] %constant.22)
  %broadcast.24 = f32[1,1,1,1]{3,2,1,0} broadcast(f32[1,1,1,1]{3,2,1,0} %reshape.23), dimensions={0,1,2,3}
  %reshape.25 = f32[] reshape(f32[1,1,1,1]{3,2,1,0} %broadcast.24)
  %broadcast.26 = f32[30,16,512,4096]{3,2,1,0} broadcast(f32[] %reshape.25), dimensions={}
  %constant.17 = f32[] constant(0)
  %reshape.18 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.17)
  %broadcast.19 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.18), dimensions={0,1,2}
  %reshape.20 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.19)
  %broadcast.21 = f32[30,4096,1024]{2,1,0} broadcast(f32[] %reshape.20), dimensions={}
  %constant.12 = f32[] constant(0)
  %reshape.13 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.12)
  %broadcast.14 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.13), dimensions={0,1,2}
  %reshape.15 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.14)
  %broadcast.16 = f32[30,8192,4096]{2,1,0} broadcast(f32[] %reshape.15), dimensions={}
  %p1.11 = f32[] parameter(1), sharding={replicated}
  %p0.9 = f32[] parameter(0), sharding={replicated}
  %call.1331 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) call(s64[] %constant.717, f32[16,512,1024]{2,1,0} %reshape.716, f32[30,1024,1024]{2,1,0} %concatenate.710, f32[30,512,1024]{2,1,0} %concatenate.649, f32[30,512,1024]{2,1,0} %concatenate.588, /*index=5*/f32[30,1024,1024]{2,1,0} %concatenate.527, f32[30,4096,1024]{2,1,0} %concatenate.466, f32[30,4096,1024]{2,1,0} %concatenate.405, f32[30,1024,4096]{2,1,0} %concatenate.344, f32[30,1024]{1,0} %concatenate.283, /*index=10*/f32[30,1024]{1,0} %concatenate.222, f32[30,16,512,1024]{3,2,1,0} %broadcast.161, f32[30,1024]{1,0} %broadcast.156, f32[30,1024]{1,0} %broadcast.151, f32[30,16,512,1]{3,2,1,0} %broadcast.146, /*index=15*/f32[30,16,512,1024]{3,2,1,0} %broadcast.141, f32[30,1024,1024]{2,1,0} %broadcast.136, f32[30,8192,1024]{2,1,0} %broadcast.131, f32[30,1024,512]{2,1,0} %broadcast.126, f32[30,8192,1024]{2,1,0} %broadcast.121, /*index=20*/f32[30,1024,512]{2,1,0} %broadcast.116, f32[30,8192,1024]{2,1,0} %broadcast.111, f32[30,128,512,128]{3,2,1,0} %broadcast.106, f32[30,128,128,512]{3,2,1,0} %broadcast.101, f32[30,16,8,512,512]{4,3,2,1,0} %broadcast.96, /*index=25*/f32[30,128,512,512]{3,2,1,0} %broadcast.91, f32[30,128,512,128]{3,2,1,0} %broadcast.86, f32[30,1024,1024]{2,1,0} %broadcast.81, f32[30,8192,1024]{2,1,0} %broadcast.76, f32[30,16,512,1024]{3,2,1,0} %broadcast.71, /*index=30*/f32[30,16,512,1]{3,2,1,0} %broadcast.66, f32[30,16,512,1024]{3,2,1,0} %broadcast.61, f32[30,1024,4096]{2,1,0} %broadcast.56, f32[30,8192,1024]{2,1,0} %broadcast.51, f32[30,16,512,4096]{3,2,1,0} %broadcast.46, /*index=35*/f32[30,1024,4096]{2,1,0} %broadcast.41, f32[30,8192,1024]{2,1,0} %broadcast.36, f32[30,16,512,4096]{3,2,1,0} %broadcast.31, f32[30,16,512,4096]{3,2,1,0} %broadcast.26, f32[30,4096,1024]{2,1,0} %broadcast.21, /*index=40*/f32[30,8192,4096]{2,1,0} %broadcast.16, f32[] %p1.11, f32[] %p0.9), to_apply=%scan.1285
  %get-tuple-element.1332 = s64[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=0
  %get-tuple-element.1334 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=2
  %get-tuple-element.1335 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=3
  %get-tuple-element.1336 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=4
  %get-tuple-element.1337 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=5
  %get-tuple-element.1338 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=6
  %get-tuple-element.1339 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=7
  %get-tuple-element.1340 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=8
  %get-tuple-element.1341 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=9
  %get-tuple-element.1342 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=10
  %get-tuple-element.1373 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=41
  %get-tuple-element.1374 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=42
  %constant.1416 = s32[] constant(8192)
  %constant.1485 = s32[] constant(1024)
  %constant.1507 = s64[] constant(0)
  %constant.1 = f32[] constant(1)
  %broadcast.2 = f32[] broadcast(f32[] %constant.1), dimensions={}
  %reshape.3 = f32[1,1,1]{2,1,0} reshape(f32[] %broadcast.2)
  %broadcast.4 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.3), dimensions={0,1,2}
  %reshape.5 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.4)
  %broadcast.6 = f32[16,512,8192]{2,1,0} broadcast(f32[] %reshape.5), dimensions={}
  %reshape.7 = f32[8192,8192]{1,0} reshape(f32[16,512,8192]{2,1,0} %broadcast.6)
  %p275.1409 = f32[8192,1024]{1,0} parameter(275), sharding={devices=[8,1]0,4,1,5,2,6,3,7}
  %transpose.1410 = f32[1024,8192]{0,1} transpose(f32[8192,1024]{1,0} %p275.1409), dimensions={1,0}
  %transpose.1411 = f32[8192,1024]{1,0} transpose(f32[1024,8192]{0,1} %transpose.1410), dimensions={1,0}
  %dot.1412 = f32[8192,1024]{1,0} dot(f32[8192,8192]{1,0} %reshape.7, f32[8192,1024]{1,0} %transpose.1411), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.1413 = f32[16,512,1024]{2,1,0} reshape(f32[8192,1024]{1,0} %dot.1412)
  %p274.1402 = f32[1024]{0} parameter(274), sharding={replicated}
  %broadcast.1481 = f32[16,512,1024]{2,1,0} broadcast(f32[1024]{0} %p274.1402), dimensions={2}
  %multiply.1482 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.1413, f32[16,512,1024]{2,1,0} %broadcast.1481)
  %get-tuple-element.1333 = f32[16,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=1
  %constant.10 = f32[] constant(2)
  %broadcast.1375 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.10), dimensions={}
  %power.1376 = f32[16,512,1024]{2,1,0} power(f32[16,512,1024]{2,1,0} %get-tuple-element.1333, f32[16,512,1024]{2,1,0} %broadcast.1375)
  %constant.1377 = f32[] constant(0)
  %reduce.1383 = f32[16,512]{1,0} reduce(f32[16,512,1024]{2,1,0} %power.1376, f32[] %constant.1377), dimensions={2}, to_apply=%AddComputation.1379
  %constant.1378 = s32[] constant(1024)
  %constant.1384 = s32[] constant(0)
  %compare.1389 = pred[] compare(s32[] %constant.1378, s32[] %constant.1384), direction=NE
  %constant.1385 = f32[] constant(1)
  %convert.1387 = f32[] convert(s32[] %constant.1378)
  %divide.1388 = f32[] divide(f32[] %constant.1385, f32[] %convert.1387)
  %constant.1386 = f32[] constant(nan)
  %select.1390 = f32[] select(pred[] %compare.1389, f32[] %divide.1388, f32[] %constant.1386)
  %broadcast.1391 = f32[16,512]{1,0} broadcast(f32[] %select.1390), dimensions={}
  %multiply.1392 = f32[16,512]{1,0} multiply(f32[16,512]{1,0} %reduce.1383, f32[16,512]{1,0} %broadcast.1391)
  %reshape.1393 = f32[16,512,1]{2,1,0} reshape(f32[16,512]{1,0} %multiply.1392)
  %convert.1394 = f32[16,512,1]{2,1,0} convert(f32[16,512,1]{2,1,0} %reshape.1393)
  %constant.8 = f32[] constant(1)
  %multiply.1395 = f32[] multiply(f32[] %p0.9, f32[] %constant.8)
  %broadcast.1396 = f32[16,512,1]{2,1,0} broadcast(f32[] %multiply.1395), dimensions={}
  %add.1397 = f32[16,512,1]{2,1,0} add(f32[16,512,1]{2,1,0} %convert.1394, f32[16,512,1]{2,1,0} %broadcast.1396)
  %rsqrt.1398 = f32[16,512,1]{2,1,0} rsqrt(f32[16,512,1]{2,1,0} %add.1397)
  %reshape.1501 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %rsqrt.1398)
  %broadcast.1502 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1501), dimensions={0,1}
  %multiply.1503 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1482, f32[16,512,1024]{2,1,0} %broadcast.1502)
  %multiply.1483 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1482, f32[16,512,1024]{2,1,0} %get-tuple-element.1333)
  %constant.1484 = f32[] constant(0)
  %reduce.1490 = f32[16,512]{1,0} reduce(f32[16,512,1024]{2,1,0} %multiply.1483, f32[] %constant.1484), dimensions={2}, to_apply=%AddComputation.1486
  %reshape.1491 = f32[16,512,1]{2,1,0} reshape(f32[16,512]{1,0} %reduce.1490)
  %p278.1426 = f32[] parameter(278), sharding={replicated}
  %broadcast.1492 = f32[16,512,1]{2,1,0} broadcast(f32[] %p278.1426), dimensions={}
  %multiply.1493 = f32[16,512,1]{2,1,0} multiply(f32[16,512,1]{2,1,0} %reshape.1491, f32[16,512,1]{2,1,0} %broadcast.1492)
  %constant.1478 = f32[] constant(3)
  %broadcast.1479 = f32[16,512,1]{2,1,0} broadcast(f32[] %constant.1478), dimensions={}
  %power.1480 = f32[16,512,1]{2,1,0} power(f32[16,512,1]{2,1,0} %rsqrt.1398, f32[16,512,1]{2,1,0} %broadcast.1479)
  %multiply.1494 = f32[16,512,1]{2,1,0} multiply(f32[16,512,1]{2,1,0} %multiply.1493, f32[16,512,1]{2,1,0} %power.1480)
  %broadcast.1495 = f32[16,512,1]{2,1,0} broadcast(f32[16,512,1]{2,1,0} %multiply.1494), dimensions={0,1,2}
  %reshape.1496 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %broadcast.1495)
  %broadcast.1497 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1496), dimensions={0,1}
  %p277.1425 = f32[] parameter(277), sharding={replicated}
  %broadcast.1498 = f32[16,512,1024]{2,1,0} broadcast(f32[] %p277.1425), dimensions={}
  %divide.1499 = f32[16,512,1024]{2,1,0} divide(f32[16,512,1024]{2,1,0} %broadcast.1497, f32[16,512,1024]{2,1,0} %broadcast.1498)
  %constant.1473 = f32[] constant(1)
  %broadcast.1474 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1473), dimensions={}
  %power.1475 = f32[16,512,1024]{2,1,0} power(f32[16,512,1024]{2,1,0} %get-tuple-element.1333, f32[16,512,1024]{2,1,0} %broadcast.1474)
  %p276.1424 = f32[] parameter(276), sharding={replicated}
  %broadcast.1476 = f32[16,512,1024]{2,1,0} broadcast(f32[] %p276.1424), dimensions={}
  %multiply.1477 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %power.1475, f32[16,512,1024]{2,1,0} %broadcast.1476)
  %multiply.1500 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %divide.1499, f32[16,512,1024]{2,1,0} %multiply.1477)
  %constant.1472 = f32[] constant(1)
  %broadcast.1504 = f32[16,512,1024]{2,1,0} broadcast(f32[] %constant.1472), dimensions={}
  %multiply.1505 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %multiply.1500, f32[16,512,1024]{2,1,0} %broadcast.1504)
  %add.1506 = f32[16,512,1024]{2,1,0} add(f32[16,512,1024]{2,1,0} %multiply.1503, f32[16,512,1024]{2,1,0} %multiply.1505)
  %get-tuple-element.1343 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=11
  %get-tuple-element.1344 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=12
  %get-tuple-element.1345 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=13
  %get-tuple-element.1346 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=14
  %get-tuple-element.1347 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=15
  %get-tuple-element.1348 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=16
  %get-tuple-element.1349 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=17
  %get-tuple-element.1350 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=18
  %get-tuple-element.1351 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=19
  %get-tuple-element.1352 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=20
  %get-tuple-element.1353 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=21
  %get-tuple-element.1354 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=22
  %get-tuple-element.1355 = f32[30,128,128,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=23
  %get-tuple-element.1356 = f32[30,16,8,512,512]{4,3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=24
  %get-tuple-element.1357 = f32[30,128,512,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=25
  %get-tuple-element.1358 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=26
  %get-tuple-element.1359 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=27
  %get-tuple-element.1360 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=28
  %get-tuple-element.1361 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=29
  %get-tuple-element.1362 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=30
  %get-tuple-element.1363 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=31
  %get-tuple-element.1364 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=32
  %get-tuple-element.1365 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=33
  %get-tuple-element.1366 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=34
  %get-tuple-element.1367 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=35
  %get-tuple-element.1368 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=36
  %get-tuple-element.1369 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=37
  %get-tuple-element.1370 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=38
  %get-tuple-element.1371 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=39
  %get-tuple-element.1372 = f32[30,8192,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=5*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=10*/f32[30,1024]{1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[30,16,512,1]{3,2,1,0}, /*index=15*/f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, f32[30,16,8,512,512]{4,3,2,1,0}, /*index=25*/f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, /*index=30*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=35*/f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=40*/f32[30,8192,4096]{2,1,0}, f32[], f32[]) %call.1331), index=40
  %constant.1467 = f32[] constant(0)
  %reshape.1468 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1467)
  %broadcast.1469 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1468), dimensions={0,1,2}
  %reshape.1470 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1469)
  %broadcast.1471 = f32[30,1024,1024]{2,1,0} broadcast(f32[] %reshape.1470), dimensions={}
  %constant.1462 = f32[] constant(0)
  %reshape.1463 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1462)
  %broadcast.1464 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1463), dimensions={0,1,2}
  %reshape.1465 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1464)
  %broadcast.1466 = f32[30,512,1024]{2,1,0} broadcast(f32[] %reshape.1465), dimensions={}
  %constant.1457 = f32[] constant(0)
  %reshape.1458 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1457)
  %broadcast.1459 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1458), dimensions={0,1,2}
  %reshape.1460 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1459)
  %broadcast.1461 = f32[30,512,1024]{2,1,0} broadcast(f32[] %reshape.1460), dimensions={}
  %constant.1452 = f32[] constant(0)
  %reshape.1453 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1452)
  %broadcast.1454 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1453), dimensions={0,1,2}
  %reshape.1455 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1454)
  %broadcast.1456 = f32[30,1024,1024]{2,1,0} broadcast(f32[] %reshape.1455), dimensions={}
  %constant.1447 = f32[] constant(0)
  %reshape.1448 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1447)
  %broadcast.1449 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1448), dimensions={0,1,2}
  %reshape.1450 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1449)
  %broadcast.1451 = f32[30,4096,1024]{2,1,0} broadcast(f32[] %reshape.1450), dimensions={}
  %constant.1442 = f32[] constant(0)
  %reshape.1443 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1442)
  %broadcast.1444 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1443), dimensions={0,1,2}
  %reshape.1445 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1444)
  %broadcast.1446 = f32[30,4096,1024]{2,1,0} broadcast(f32[] %reshape.1445), dimensions={}
  %constant.1437 = f32[] constant(0)
  %reshape.1438 = f32[1,1,1]{2,1,0} reshape(f32[] %constant.1437)
  %broadcast.1439 = f32[1,1,1]{2,1,0} broadcast(f32[1,1,1]{2,1,0} %reshape.1438), dimensions={0,1,2}
  %reshape.1440 = f32[] reshape(f32[1,1,1]{2,1,0} %broadcast.1439)
  %broadcast.1441 = f32[30,1024,4096]{2,1,0} broadcast(f32[] %reshape.1440), dimensions={}
  %constant.1432 = f32[] constant(0)
  %reshape.1433 = f32[1,1]{1,0} reshape(f32[] %constant.1432)
  %broadcast.1434 = f32[1,1]{1,0} broadcast(f32[1,1]{1,0} %reshape.1433), dimensions={0,1}
  %reshape.1435 = f32[] reshape(f32[1,1]{1,0} %broadcast.1434)
  %broadcast.1436 = f32[30,1024]{1,0} broadcast(f32[] %reshape.1435), dimensions={}
  %constant.1427 = f32[] constant(0)
  %reshape.1428 = f32[1,1]{1,0} reshape(f32[] %constant.1427)
  %broadcast.1429 = f32[1,1]{1,0} broadcast(f32[1,1]{1,0} %reshape.1428), dimensions={0,1}
  %reshape.1430 = f32[] reshape(f32[1,1]{1,0} %broadcast.1429)
  %broadcast.1431 = f32[30,1024]{1,0} broadcast(f32[] %reshape.1430), dimensions={}
  %call.2257 = (s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) call(s64[] %constant.1507, f32[16,512,1024]{2,1,0} %add.1506, f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1343, f32[30,1024]{1,0} %get-tuple-element.1344, f32[30,1024]{1,0} %get-tuple-element.1345, /*index=5*/f32[30,16,512,1]{3,2,1,0} %get-tuple-element.1346, f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1347, f32[30,1024,1024]{2,1,0} %get-tuple-element.1348, f32[30,8192,1024]{2,1,0} %get-tuple-element.1349, f32[30,1024,512]{2,1,0} %get-tuple-element.1350, /*index=10*/f32[30,8192,1024]{2,1,0} %get-tuple-element.1351, f32[30,1024,512]{2,1,0} %get-tuple-element.1352, f32[30,8192,1024]{2,1,0} %get-tuple-element.1353, f32[30,128,512,128]{3,2,1,0} %get-tuple-element.1354, f32[30,128,128,512]{3,2,1,0} %get-tuple-element.1355, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0} %get-tuple-element.1356, f32[30,128,512,512]{3,2,1,0} %get-tuple-element.1357, f32[30,128,512,128]{3,2,1,0} %get-tuple-element.1358, f32[30,1024,1024]{2,1,0} %get-tuple-element.1359, f32[30,8192,1024]{2,1,0} %get-tuple-element.1360, /*index=20*/f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1361, f32[30,16,512,1]{3,2,1,0} %get-tuple-element.1362, f32[30,16,512,1024]{3,2,1,0} %get-tuple-element.1363, f32[30,1024,4096]{2,1,0} %get-tuple-element.1364, f32[30,8192,1024]{2,1,0} %get-tuple-element.1365, /*index=25*/f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1366, f32[30,1024,4096]{2,1,0} %get-tuple-element.1367, f32[30,8192,1024]{2,1,0} %get-tuple-element.1368, f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1369, f32[30,16,512,4096]{3,2,1,0} %get-tuple-element.1370, /*index=30*/f32[30,4096,1024]{2,1,0} %get-tuple-element.1371, f32[30,8192,4096]{2,1,0} %get-tuple-element.1372, f32[30,1024,1024]{2,1,0} %broadcast.1471, f32[30,512,1024]{2,1,0} %broadcast.1466, f32[30,512,1024]{2,1,0} %broadcast.1461, /*index=35*/f32[30,1024,1024]{2,1,0} %broadcast.1456, f32[30,4096,1024]{2,1,0} %broadcast.1451, f32[30,4096,1024]{2,1,0} %broadcast.1446, f32[30,1024,4096]{2,1,0} %broadcast.1441, f32[30,1024]{1,0} %broadcast.1436, /*index=40*/f32[30,1024]{1,0} %broadcast.1431, f32[] %p1.11, f32[] %p278.1426, f32[] %p277.1425, f32[] %p276.1424), to_apply=%scan.2209
  %get-tuple-element.2258 = s64[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=0
  %get-tuple-element.2260 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=2
  %get-tuple-element.2261 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=3
  %get-tuple-element.2262 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=4
  %get-tuple-element.2263 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=5
  %get-tuple-element.2264 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=6
  %get-tuple-element.2265 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=7
  %get-tuple-element.2266 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=8
  %get-tuple-element.2267 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=9
  %get-tuple-element.2268 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=10
  %get-tuple-element.2269 = f32[30,1024,512]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=11
  %get-tuple-element.2270 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=12
  %get-tuple-element.2271 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=13
  %get-tuple-element.2272 = f32[30,128,128,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=14
  %get-tuple-element.2273 = f32[30,16,8,512,512]{4,3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=15
  %get-tuple-element.2274 = f32[30,128,512,512]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=16
  %get-tuple-element.2275 = f32[30,128,512,128]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=17
  %get-tuple-element.2276 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=18
  %get-tuple-element.2277 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=19
  %get-tuple-element.2278 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=20
  %get-tuple-element.2279 = f32[30,16,512,1]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=21
  %get-tuple-element.2280 = f32[30,16,512,1024]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=22
  %get-tuple-element.2281 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=23
  %get-tuple-element.2282 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=24
  %get-tuple-element.2283 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=25
  %get-tuple-element.2284 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=26
  %get-tuple-element.2285 = f32[30,8192,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=27
  %get-tuple-element.2286 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=28
  %get-tuple-element.2287 = f32[30,16,512,4096]{3,2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=29
  %get-tuple-element.2288 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=30
  %get-tuple-element.2289 = f32[30,8192,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=31
  %get-tuple-element.2299 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=41
  %get-tuple-element.2300 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=42
  %get-tuple-element.2301 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=43
  %get-tuple-element.2302 = f32[] get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=44
  %broadcast.1403 = f32[16,512,1024]{2,1,0} broadcast(f32[1024]{0} %p274.1402), dimensions={2}
  %reshape.1399 = f32[16,512]{1,0} reshape(f32[16,512,1]{2,1,0} %rsqrt.1398)
  %broadcast.1400 = f32[16,512,1024]{2,1,0} broadcast(f32[16,512]{1,0} %reshape.1399), dimensions={0,1}
  %multiply.1401 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %get-tuple-element.1333, f32[16,512,1024]{2,1,0} %broadcast.1400)
  %multiply.1404 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %broadcast.1403, f32[16,512,1024]{2,1,0} %multiply.1401)
  %reshape.1405 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %multiply.1404)
  %transpose.1406 = f32[1024,8192]{0,1} transpose(f32[8192,1024]{1,0} %reshape.1405), dimensions={1,0}
  %dot.1407 = f32[1024,8192]{1,0} dot(f32[1024,8192]{0,1} %transpose.1406, f32[8192,8192]{1,0} %reshape.7), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %transpose.1408 = f32[8192,1024]{0,1} transpose(f32[1024,8192]{1,0} %dot.1407), dimensions={1,0}
  %multiply.1414 = f32[16,512,1024]{2,1,0} multiply(f32[16,512,1024]{2,1,0} %reshape.1413, f32[16,512,1024]{2,1,0} %multiply.1401)
  %constant.1415 = f32[] constant(0)
  %reduce.1421 = f32[1024]{0} reduce(f32[16,512,1024]{2,1,0} %multiply.1414, f32[] %constant.1415), dimensions={0,1}, to_apply=%AddComputation.1417
  %reshape.1422 = f32[1,1,1024]{2,1,0} reshape(f32[1024]{0} %reduce.1421)
  %reshape.1423 = f32[1024]{0} reshape(f32[1,1,1024]{2,1,0} %reshape.1422)
  %get-tuple-element.2290 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=32
  %get-tuple-element.2291 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=33
  %get-tuple-element.2292 = f32[30,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=34
  %get-tuple-element.2293 = f32[30,1024,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=35
  %get-tuple-element.2294 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=36
  %get-tuple-element.2295 = f32[30,4096,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=37
  %get-tuple-element.2296 = f32[30,1024,4096]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=38
  %get-tuple-element.2297 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=39
  %get-tuple-element.2298 = f32[30,1024]{1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=40
  %slice.2303 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[0:1], [0:1024]}
  %reshape.2304 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2303)
  %slice.2305 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[1:2], [0:1024]}
  %reshape.2306 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2305)
  %slice.2307 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[2:3], [0:1024]}
  %reshape.2308 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2307)
  %slice.2309 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[3:4], [0:1024]}
  %reshape.2310 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2309)
  %slice.2311 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[4:5], [0:1024]}
  %reshape.2312 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2311)
  %slice.2313 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[5:6], [0:1024]}
  %reshape.2314 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2313)
  %slice.2315 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[6:7], [0:1024]}
  %reshape.2316 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2315)
  %slice.2317 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[7:8], [0:1024]}
  %reshape.2318 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2317)
  %slice.2319 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[8:9], [0:1024]}
  %reshape.2320 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2319)
  %slice.2321 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[9:10], [0:1024]}
  %reshape.2322 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2321)
  %slice.2323 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[10:11], [0:1024]}
  %reshape.2324 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2323)
  %slice.2325 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[11:12], [0:1024]}
  %reshape.2326 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2325)
  %slice.2327 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[12:13], [0:1024]}
  %reshape.2328 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2327)
  %slice.2329 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[13:14], [0:1024]}
  %reshape.2330 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2329)
  %slice.2331 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[14:15], [0:1024]}
  %reshape.2332 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2331)
  %slice.2333 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[15:16], [0:1024]}
  %reshape.2334 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2333)
  %slice.2335 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[16:17], [0:1024]}
  %reshape.2336 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2335)
  %slice.2337 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[17:18], [0:1024]}
  %reshape.2338 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2337)
  %slice.2339 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[18:19], [0:1024]}
  %reshape.2340 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2339)
  %slice.2341 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[19:20], [0:1024]}
  %reshape.2342 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2341)
  %slice.2343 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[20:21], [0:1024]}
  %reshape.2344 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2343)
  %slice.2345 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[21:22], [0:1024]}
  %reshape.2346 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2345)
  %slice.2347 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[22:23], [0:1024]}
  %reshape.2348 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2347)
  %slice.2349 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[23:24], [0:1024]}
  %reshape.2350 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2349)
  %slice.2351 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[24:25], [0:1024]}
  %reshape.2352 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2351)
  %slice.2353 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[25:26], [0:1024]}
  %reshape.2354 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2353)
  %slice.2355 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[26:27], [0:1024]}
  %reshape.2356 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2355)
  %slice.2357 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[27:28], [0:1024]}
  %reshape.2358 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2357)
  %slice.2359 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[28:29], [0:1024]}
  %reshape.2360 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2359)
  %slice.2361 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2298), slice={[29:30], [0:1024]}
  %reshape.2362 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2361)
  %slice.2363 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[0:1], [0:1024]}
  %reshape.2364 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2363)
  %slice.2365 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[1:2], [0:1024]}
  %reshape.2366 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2365)
  %slice.2367 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[2:3], [0:1024]}
  %reshape.2368 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2367)
  %slice.2369 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[3:4], [0:1024]}
  %reshape.2370 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2369)
  %slice.2371 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[4:5], [0:1024]}
  %reshape.2372 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2371)
  %slice.2373 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[5:6], [0:1024]}
  %reshape.2374 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2373)
  %slice.2375 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[6:7], [0:1024]}
  %reshape.2376 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2375)
  %slice.2377 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[7:8], [0:1024]}
  %reshape.2378 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2377)
  %slice.2379 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[8:9], [0:1024]}
  %reshape.2380 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2379)
  %slice.2381 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[9:10], [0:1024]}
  %reshape.2382 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2381)
  %slice.2383 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[10:11], [0:1024]}
  %reshape.2384 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2383)
  %slice.2385 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[11:12], [0:1024]}
  %reshape.2386 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2385)
  %slice.2387 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[12:13], [0:1024]}
  %reshape.2388 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2387)
  %slice.2389 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[13:14], [0:1024]}
  %reshape.2390 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2389)
  %slice.2391 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[14:15], [0:1024]}
  %reshape.2392 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2391)
  %slice.2393 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[15:16], [0:1024]}
  %reshape.2394 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2393)
  %slice.2395 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[16:17], [0:1024]}
  %reshape.2396 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2395)
  %slice.2397 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[17:18], [0:1024]}
  %reshape.2398 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2397)
  %slice.2399 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[18:19], [0:1024]}
  %reshape.2400 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2399)
  %slice.2401 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[19:20], [0:1024]}
  %reshape.2402 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2401)
  %slice.2403 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[20:21], [0:1024]}
  %reshape.2404 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2403)
  %slice.2405 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[21:22], [0:1024]}
  %reshape.2406 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2405)
  %slice.2407 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[22:23], [0:1024]}
  %reshape.2408 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2407)
  %slice.2409 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[23:24], [0:1024]}
  %reshape.2410 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2409)
  %slice.2411 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[24:25], [0:1024]}
  %reshape.2412 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2411)
  %slice.2413 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[25:26], [0:1024]}
  %reshape.2414 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2413)
  %slice.2415 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[26:27], [0:1024]}
  %reshape.2416 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2415)
  %slice.2417 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[27:28], [0:1024]}
  %reshape.2418 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2417)
  %slice.2419 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[28:29], [0:1024]}
  %reshape.2420 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2419)
  %slice.2421 = f32[1,1024]{1,0} slice(f32[30,1024]{1,0} %get-tuple-element.2297), slice={[29:30], [0:1024]}
  %reshape.2422 = f32[1024]{0} reshape(f32[1,1024]{1,0} %slice.2421)
  %slice.2423 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[0:1], [0:1024], [0:4096]}
  %reshape.2424 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2423)
  %slice.2425 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[1:2], [0:1024], [0:4096]}
  %reshape.2426 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2425)
  %slice.2427 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[2:3], [0:1024], [0:4096]}
  %reshape.2428 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2427)
  %slice.2429 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[3:4], [0:1024], [0:4096]}
  %reshape.2430 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2429)
  %slice.2431 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[4:5], [0:1024], [0:4096]}
  %reshape.2432 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2431)
  %slice.2433 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[5:6], [0:1024], [0:4096]}
  %reshape.2434 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2433)
  %slice.2435 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[6:7], [0:1024], [0:4096]}
  %reshape.2436 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2435)
  %slice.2437 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[7:8], [0:1024], [0:4096]}
  %reshape.2438 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2437)
  %slice.2439 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[8:9], [0:1024], [0:4096]}
  %reshape.2440 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2439)
  %slice.2441 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[9:10], [0:1024], [0:4096]}
  %reshape.2442 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2441)
  %slice.2443 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[10:11], [0:1024], [0:4096]}
  %reshape.2444 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2443)
  %slice.2445 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[11:12], [0:1024], [0:4096]}
  %reshape.2446 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2445)
  %slice.2447 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[12:13], [0:1024], [0:4096]}
  %reshape.2448 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2447)
  %slice.2449 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[13:14], [0:1024], [0:4096]}
  %reshape.2450 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2449)
  %slice.2451 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[14:15], [0:1024], [0:4096]}
  %reshape.2452 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2451)
  %slice.2453 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[15:16], [0:1024], [0:4096]}
  %reshape.2454 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2453)
  %slice.2455 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[16:17], [0:1024], [0:4096]}
  %reshape.2456 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2455)
  %slice.2457 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[17:18], [0:1024], [0:4096]}
  %reshape.2458 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2457)
  %slice.2459 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[18:19], [0:1024], [0:4096]}
  %reshape.2460 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2459)
  %slice.2461 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[19:20], [0:1024], [0:4096]}
  %reshape.2462 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2461)
  %slice.2463 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[20:21], [0:1024], [0:4096]}
  %reshape.2464 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2463)
  %slice.2465 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[21:22], [0:1024], [0:4096]}
  %reshape.2466 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2465)
  %slice.2467 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[22:23], [0:1024], [0:4096]}
  %reshape.2468 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2467)
  %slice.2469 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[23:24], [0:1024], [0:4096]}
  %reshape.2470 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2469)
  %slice.2471 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[24:25], [0:1024], [0:4096]}
  %reshape.2472 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2471)
  %slice.2473 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[25:26], [0:1024], [0:4096]}
  %reshape.2474 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2473)
  %slice.2475 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[26:27], [0:1024], [0:4096]}
  %reshape.2476 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2475)
  %slice.2477 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[27:28], [0:1024], [0:4096]}
  %reshape.2478 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2477)
  %slice.2479 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[28:29], [0:1024], [0:4096]}
  %reshape.2480 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2479)
  %slice.2481 = f32[1,1024,4096]{2,1,0} slice(f32[30,1024,4096]{2,1,0} %get-tuple-element.2296), slice={[29:30], [0:1024], [0:4096]}
  %reshape.2482 = f32[1024,4096]{1,0} reshape(f32[1,1024,4096]{2,1,0} %slice.2481)
  %slice.2483 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[0:1], [0:4096], [0:1024]}
  %reshape.2484 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2483)
  %slice.2485 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[1:2], [0:4096], [0:1024]}
  %reshape.2486 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2485)
  %slice.2487 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[2:3], [0:4096], [0:1024]}
  %reshape.2488 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2487)
  %slice.2489 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[3:4], [0:4096], [0:1024]}
  %reshape.2490 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2489)
  %slice.2491 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[4:5], [0:4096], [0:1024]}
  %reshape.2492 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2491)
  %slice.2493 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[5:6], [0:4096], [0:1024]}
  %reshape.2494 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2493)
  %slice.2495 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[6:7], [0:4096], [0:1024]}
  %reshape.2496 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2495)
  %slice.2497 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[7:8], [0:4096], [0:1024]}
  %reshape.2498 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2497)
  %slice.2499 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[8:9], [0:4096], [0:1024]}
  %reshape.2500 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2499)
  %slice.2501 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[9:10], [0:4096], [0:1024]}
  %reshape.2502 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2501)
  %slice.2503 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[10:11], [0:4096], [0:1024]}
  %reshape.2504 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2503)
  %slice.2505 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[11:12], [0:4096], [0:1024]}
  %reshape.2506 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2505)
  %slice.2507 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[12:13], [0:4096], [0:1024]}
  %reshape.2508 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2507)
  %slice.2509 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[13:14], [0:4096], [0:1024]}
  %reshape.2510 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2509)
  %slice.2511 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[14:15], [0:4096], [0:1024]}
  %reshape.2512 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2511)
  %slice.2513 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[15:16], [0:4096], [0:1024]}
  %reshape.2514 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2513)
  %slice.2515 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[16:17], [0:4096], [0:1024]}
  %reshape.2516 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2515)
  %slice.2517 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[17:18], [0:4096], [0:1024]}
  %reshape.2518 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2517)
  %slice.2519 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[18:19], [0:4096], [0:1024]}
  %reshape.2520 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2519)
  %slice.2521 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[19:20], [0:4096], [0:1024]}
  %reshape.2522 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2521)
  %slice.2523 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[20:21], [0:4096], [0:1024]}
  %reshape.2524 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2523)
  %slice.2525 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[21:22], [0:4096], [0:1024]}
  %reshape.2526 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2525)
  %slice.2527 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[22:23], [0:4096], [0:1024]}
  %reshape.2528 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2527)
  %slice.2529 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[23:24], [0:4096], [0:1024]}
  %reshape.2530 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2529)
  %slice.2531 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[24:25], [0:4096], [0:1024]}
  %reshape.2532 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2531)
  %slice.2533 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[25:26], [0:4096], [0:1024]}
  %reshape.2534 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2533)
  %slice.2535 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[26:27], [0:4096], [0:1024]}
  %reshape.2536 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2535)
  %slice.2537 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[27:28], [0:4096], [0:1024]}
  %reshape.2538 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2537)
  %slice.2539 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[28:29], [0:4096], [0:1024]}
  %reshape.2540 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2539)
  %slice.2541 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2295), slice={[29:30], [0:4096], [0:1024]}
  %reshape.2542 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2541)
  %slice.2543 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[0:1], [0:4096], [0:1024]}
  %reshape.2544 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2543)
  %slice.2545 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[1:2], [0:4096], [0:1024]}
  %reshape.2546 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2545)
  %slice.2547 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[2:3], [0:4096], [0:1024]}
  %reshape.2548 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2547)
  %slice.2549 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[3:4], [0:4096], [0:1024]}
  %reshape.2550 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2549)
  %slice.2551 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[4:5], [0:4096], [0:1024]}
  %reshape.2552 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2551)
  %slice.2553 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[5:6], [0:4096], [0:1024]}
  %reshape.2554 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2553)
  %slice.2555 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[6:7], [0:4096], [0:1024]}
  %reshape.2556 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2555)
  %slice.2557 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[7:8], [0:4096], [0:1024]}
  %reshape.2558 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2557)
  %slice.2559 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[8:9], [0:4096], [0:1024]}
  %reshape.2560 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2559)
  %slice.2561 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[9:10], [0:4096], [0:1024]}
  %reshape.2562 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2561)
  %slice.2563 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[10:11], [0:4096], [0:1024]}
  %reshape.2564 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2563)
  %slice.2565 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[11:12], [0:4096], [0:1024]}
  %reshape.2566 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2565)
  %slice.2567 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[12:13], [0:4096], [0:1024]}
  %reshape.2568 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2567)
  %slice.2569 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[13:14], [0:4096], [0:1024]}
  %reshape.2570 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2569)
  %slice.2571 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[14:15], [0:4096], [0:1024]}
  %reshape.2572 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2571)
  %slice.2573 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[15:16], [0:4096], [0:1024]}
  %reshape.2574 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2573)
  %slice.2575 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[16:17], [0:4096], [0:1024]}
  %reshape.2576 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2575)
  %slice.2577 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[17:18], [0:4096], [0:1024]}
  %reshape.2578 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2577)
  %slice.2579 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[18:19], [0:4096], [0:1024]}
  %reshape.2580 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2579)
  %slice.2581 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[19:20], [0:4096], [0:1024]}
  %reshape.2582 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2581)
  %slice.2583 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[20:21], [0:4096], [0:1024]}
  %reshape.2584 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2583)
  %slice.2585 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[21:22], [0:4096], [0:1024]}
  %reshape.2586 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2585)
  %slice.2587 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[22:23], [0:4096], [0:1024]}
  %reshape.2588 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2587)
  %slice.2589 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[23:24], [0:4096], [0:1024]}
  %reshape.2590 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2589)
  %slice.2591 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[24:25], [0:4096], [0:1024]}
  %reshape.2592 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2591)
  %slice.2593 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[25:26], [0:4096], [0:1024]}
  %reshape.2594 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2593)
  %slice.2595 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[26:27], [0:4096], [0:1024]}
  %reshape.2596 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2595)
  %slice.2597 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[27:28], [0:4096], [0:1024]}
  %reshape.2598 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2597)
  %slice.2599 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[28:29], [0:4096], [0:1024]}
  %reshape.2600 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2599)
  %slice.2601 = f32[1,4096,1024]{2,1,0} slice(f32[30,4096,1024]{2,1,0} %get-tuple-element.2294), slice={[29:30], [0:4096], [0:1024]}
  %reshape.2602 = f32[4096,1024]{1,0} reshape(f32[1,4096,1024]{2,1,0} %slice.2601)
  %slice.2603 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[0:1], [0:1024], [0:1024]}
  %reshape.2604 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2603)
  %slice.2605 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[1:2], [0:1024], [0:1024]}
  %reshape.2606 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2605)
  %slice.2607 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[2:3], [0:1024], [0:1024]}
  %reshape.2608 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2607)
  %slice.2609 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[3:4], [0:1024], [0:1024]}
  %reshape.2610 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2609)
  %slice.2611 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[4:5], [0:1024], [0:1024]}
  %reshape.2612 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2611)
  %slice.2613 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[5:6], [0:1024], [0:1024]}
  %reshape.2614 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2613)
  %slice.2615 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[6:7], [0:1024], [0:1024]}
  %reshape.2616 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2615)
  %slice.2617 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[7:8], [0:1024], [0:1024]}
  %reshape.2618 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2617)
  %slice.2619 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[8:9], [0:1024], [0:1024]}
  %reshape.2620 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2619)
  %slice.2621 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[9:10], [0:1024], [0:1024]}
  %reshape.2622 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2621)
  %slice.2623 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[10:11], [0:1024], [0:1024]}
  %reshape.2624 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2623)
  %slice.2625 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[11:12], [0:1024], [0:1024]}
  %reshape.2626 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2625)
  %slice.2627 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[12:13], [0:1024], [0:1024]}
  %reshape.2628 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2627)
  %slice.2629 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[13:14], [0:1024], [0:1024]}
  %reshape.2630 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2629)
  %slice.2631 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[14:15], [0:1024], [0:1024]}
  %reshape.2632 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2631)
  %slice.2633 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[15:16], [0:1024], [0:1024]}
  %reshape.2634 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2633)
  %slice.2635 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[16:17], [0:1024], [0:1024]}
  %reshape.2636 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2635)
  %slice.2637 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[17:18], [0:1024], [0:1024]}
  %reshape.2638 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2637)
  %slice.2639 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[18:19], [0:1024], [0:1024]}
  %reshape.2640 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2639)
  %slice.2641 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[19:20], [0:1024], [0:1024]}
  %reshape.2642 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2641)
  %slice.2643 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[20:21], [0:1024], [0:1024]}
  %reshape.2644 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2643)
  %slice.2645 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[21:22], [0:1024], [0:1024]}
  %reshape.2646 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2645)
  %slice.2647 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[22:23], [0:1024], [0:1024]}
  %reshape.2648 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2647)
  %slice.2649 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[23:24], [0:1024], [0:1024]}
  %reshape.2650 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2649)
  %slice.2651 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[24:25], [0:1024], [0:1024]}
  %reshape.2652 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2651)
  %slice.2653 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[25:26], [0:1024], [0:1024]}
  %reshape.2654 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2653)
  %slice.2655 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[26:27], [0:1024], [0:1024]}
  %reshape.2656 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2655)
  %slice.2657 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[27:28], [0:1024], [0:1024]}
  %reshape.2658 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2657)
  %slice.2659 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[28:29], [0:1024], [0:1024]}
  %reshape.2660 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2659)
  %slice.2661 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2293), slice={[29:30], [0:1024], [0:1024]}
  %reshape.2662 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2661)
  %slice.2663 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[0:1], [0:512], [0:1024]}
  %reshape.2664 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2663)
  %slice.2665 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[1:2], [0:512], [0:1024]}
  %reshape.2666 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2665)
  %slice.2667 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[2:3], [0:512], [0:1024]}
  %reshape.2668 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2667)
  %slice.2669 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[3:4], [0:512], [0:1024]}
  %reshape.2670 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2669)
  %slice.2671 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[4:5], [0:512], [0:1024]}
  %reshape.2672 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2671)
  %slice.2673 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[5:6], [0:512], [0:1024]}
  %reshape.2674 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2673)
  %slice.2675 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[6:7], [0:512], [0:1024]}
  %reshape.2676 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2675)
  %slice.2677 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[7:8], [0:512], [0:1024]}
  %reshape.2678 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2677)
  %slice.2679 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[8:9], [0:512], [0:1024]}
  %reshape.2680 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2679)
  %slice.2681 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[9:10], [0:512], [0:1024]}
  %reshape.2682 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2681)
  %slice.2683 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[10:11], [0:512], [0:1024]}
  %reshape.2684 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2683)
  %slice.2685 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[11:12], [0:512], [0:1024]}
  %reshape.2686 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2685)
  %slice.2687 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[12:13], [0:512], [0:1024]}
  %reshape.2688 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2687)
  %slice.2689 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[13:14], [0:512], [0:1024]}
  %reshape.2690 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2689)
  %slice.2691 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[14:15], [0:512], [0:1024]}
  %reshape.2692 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2691)
  %slice.2693 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[15:16], [0:512], [0:1024]}
  %reshape.2694 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2693)
  %slice.2695 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[16:17], [0:512], [0:1024]}
  %reshape.2696 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2695)
  %slice.2697 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[17:18], [0:512], [0:1024]}
  %reshape.2698 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2697)
  %slice.2699 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[18:19], [0:512], [0:1024]}
  %reshape.2700 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2699)
  %slice.2701 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[19:20], [0:512], [0:1024]}
  %reshape.2702 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2701)
  %slice.2703 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[20:21], [0:512], [0:1024]}
  %reshape.2704 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2703)
  %slice.2705 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[21:22], [0:512], [0:1024]}
  %reshape.2706 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2705)
  %slice.2707 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[22:23], [0:512], [0:1024]}
  %reshape.2708 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2707)
  %slice.2709 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[23:24], [0:512], [0:1024]}
  %reshape.2710 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2709)
  %slice.2711 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[24:25], [0:512], [0:1024]}
  %reshape.2712 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2711)
  %slice.2713 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[25:26], [0:512], [0:1024]}
  %reshape.2714 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2713)
  %slice.2715 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[26:27], [0:512], [0:1024]}
  %reshape.2716 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2715)
  %slice.2717 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[27:28], [0:512], [0:1024]}
  %reshape.2718 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2717)
  %slice.2719 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[28:29], [0:512], [0:1024]}
  %reshape.2720 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2719)
  %slice.2721 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2292), slice={[29:30], [0:512], [0:1024]}
  %reshape.2722 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2721)
  %slice.2723 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[0:1], [0:512], [0:1024]}
  %reshape.2724 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2723)
  %slice.2725 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[1:2], [0:512], [0:1024]}
  %reshape.2726 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2725)
  %slice.2727 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[2:3], [0:512], [0:1024]}
  %reshape.2728 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2727)
  %slice.2729 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[3:4], [0:512], [0:1024]}
  %reshape.2730 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2729)
  %slice.2731 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[4:5], [0:512], [0:1024]}
  %reshape.2732 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2731)
  %slice.2733 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[5:6], [0:512], [0:1024]}
  %reshape.2734 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2733)
  %slice.2735 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[6:7], [0:512], [0:1024]}
  %reshape.2736 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2735)
  %slice.2737 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[7:8], [0:512], [0:1024]}
  %reshape.2738 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2737)
  %slice.2739 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[8:9], [0:512], [0:1024]}
  %reshape.2740 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2739)
  %slice.2741 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[9:10], [0:512], [0:1024]}
  %reshape.2742 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2741)
  %slice.2743 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[10:11], [0:512], [0:1024]}
  %reshape.2744 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2743)
  %slice.2745 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[11:12], [0:512], [0:1024]}
  %reshape.2746 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2745)
  %slice.2747 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[12:13], [0:512], [0:1024]}
  %reshape.2748 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2747)
  %slice.2749 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[13:14], [0:512], [0:1024]}
  %reshape.2750 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2749)
  %slice.2751 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[14:15], [0:512], [0:1024]}
  %reshape.2752 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2751)
  %slice.2753 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[15:16], [0:512], [0:1024]}
  %reshape.2754 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2753)
  %slice.2755 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[16:17], [0:512], [0:1024]}
  %reshape.2756 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2755)
  %slice.2757 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[17:18], [0:512], [0:1024]}
  %reshape.2758 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2757)
  %slice.2759 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[18:19], [0:512], [0:1024]}
  %reshape.2760 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2759)
  %slice.2761 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[19:20], [0:512], [0:1024]}
  %reshape.2762 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2761)
  %slice.2763 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[20:21], [0:512], [0:1024]}
  %reshape.2764 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2763)
  %slice.2765 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[21:22], [0:512], [0:1024]}
  %reshape.2766 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2765)
  %slice.2767 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[22:23], [0:512], [0:1024]}
  %reshape.2768 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2767)
  %slice.2769 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[23:24], [0:512], [0:1024]}
  %reshape.2770 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2769)
  %slice.2771 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[24:25], [0:512], [0:1024]}
  %reshape.2772 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2771)
  %slice.2773 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[25:26], [0:512], [0:1024]}
  %reshape.2774 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2773)
  %slice.2775 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[26:27], [0:512], [0:1024]}
  %reshape.2776 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2775)
  %slice.2777 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[27:28], [0:512], [0:1024]}
  %reshape.2778 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2777)
  %slice.2779 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[28:29], [0:512], [0:1024]}
  %reshape.2780 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2779)
  %slice.2781 = f32[1,512,1024]{2,1,0} slice(f32[30,512,1024]{2,1,0} %get-tuple-element.2291), slice={[29:30], [0:512], [0:1024]}
  %reshape.2782 = f32[512,1024]{1,0} reshape(f32[1,512,1024]{2,1,0} %slice.2781)
  %slice.2783 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[0:1], [0:1024], [0:1024]}
  %reshape.2784 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2783)
  %slice.2785 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[1:2], [0:1024], [0:1024]}
  %reshape.2786 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2785)
  %slice.2787 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[2:3], [0:1024], [0:1024]}
  %reshape.2788 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2787)
  %slice.2789 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[3:4], [0:1024], [0:1024]}
  %reshape.2790 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2789)
  %slice.2791 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[4:5], [0:1024], [0:1024]}
  %reshape.2792 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2791)
  %slice.2793 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[5:6], [0:1024], [0:1024]}
  %reshape.2794 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2793)
  %slice.2795 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[6:7], [0:1024], [0:1024]}
  %reshape.2796 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2795)
  %slice.2797 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[7:8], [0:1024], [0:1024]}
  %reshape.2798 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2797)
  %slice.2799 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[8:9], [0:1024], [0:1024]}
  %reshape.2800 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2799)
  %slice.2801 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[9:10], [0:1024], [0:1024]}
  %reshape.2802 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2801)
  %slice.2803 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[10:11], [0:1024], [0:1024]}
  %reshape.2804 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2803)
  %slice.2805 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[11:12], [0:1024], [0:1024]}
  %reshape.2806 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2805)
  %slice.2807 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[12:13], [0:1024], [0:1024]}
  %reshape.2808 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2807)
  %slice.2809 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[13:14], [0:1024], [0:1024]}
  %reshape.2810 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2809)
  %slice.2811 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[14:15], [0:1024], [0:1024]}
  %reshape.2812 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2811)
  %slice.2813 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[15:16], [0:1024], [0:1024]}
  %reshape.2814 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2813)
  %slice.2815 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[16:17], [0:1024], [0:1024]}
  %reshape.2816 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2815)
  %slice.2817 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[17:18], [0:1024], [0:1024]}
  %reshape.2818 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2817)
  %slice.2819 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[18:19], [0:1024], [0:1024]}
  %reshape.2820 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2819)
  %slice.2821 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[19:20], [0:1024], [0:1024]}
  %reshape.2822 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2821)
  %slice.2823 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[20:21], [0:1024], [0:1024]}
  %reshape.2824 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2823)
  %slice.2825 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[21:22], [0:1024], [0:1024]}
  %reshape.2826 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2825)
  %slice.2827 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[22:23], [0:1024], [0:1024]}
  %reshape.2828 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2827)
  %slice.2829 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[23:24], [0:1024], [0:1024]}
  %reshape.2830 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2829)
  %slice.2831 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[24:25], [0:1024], [0:1024]}
  %reshape.2832 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2831)
  %slice.2833 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[25:26], [0:1024], [0:1024]}
  %reshape.2834 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2833)
  %slice.2835 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[26:27], [0:1024], [0:1024]}
  %reshape.2836 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2835)
  %slice.2837 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[27:28], [0:1024], [0:1024]}
  %reshape.2838 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2837)
  %slice.2839 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[28:29], [0:1024], [0:1024]}
  %reshape.2840 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2839)
  %slice.2841 = f32[1,1024,1024]{2,1,0} slice(f32[30,1024,1024]{2,1,0} %get-tuple-element.2290), slice={[29:30], [0:1024], [0:1024]}
  %reshape.2842 = f32[1024,1024]{1,0} reshape(f32[1,1024,1024]{2,1,0} %slice.2841)
  %constant.2871 = f32[] constant(0)
  %reshape.2872 = f32[1,1]{1,0} reshape(f32[] %constant.2871)
  %broadcast.2873 = f32[1,1]{1,0} broadcast(f32[1,1]{1,0} %reshape.2872), dimensions={0,1}
  %reshape.2874 = f32[] reshape(f32[1,1]{1,0} %broadcast.2873)
  %broadcast.2875 = f32[8192,1024]{1,0} broadcast(f32[] %reshape.2874), dimensions={}
  %reshape.2850 = s64[8192]{0} reshape(s64[16,512]{1,0} %p272.711)
  %constant.2865 = s64[] constant(0)
  %broadcast.2866 = s64[8192]{0} broadcast(s64[] %constant.2865), dimensions={}
  %compare.2867 = pred[8192]{0} compare(s64[8192]{0} %reshape.2850, s64[8192]{0} %broadcast.2866), direction=LT
  %p279.2859 = s64[] parameter(279), sharding={replicated}
  %reshape.2860 = s64[1]{0} reshape(s64[] %p279.2859)
  %broadcast.2861 = s64[1]{0} broadcast(s64[1]{0} %reshape.2860), dimensions={0}
  %reshape.2862 = s64[] reshape(s64[1]{0} %broadcast.2861)
  %broadcast.2863 = s64[8192]{0} broadcast(s64[] %reshape.2862), dimensions={}
  %add.2864 = s64[8192]{0} add(s64[8192]{0} %reshape.2850, s64[8192]{0} %broadcast.2863)
  %select.2868 = s64[8192]{0} select(pred[8192]{0} %compare.2867, s64[8192]{0} %add.2864, s64[8192]{0} %reshape.2850)
  %reshape.2869 = s64[8192,1]{1,0} reshape(s64[8192]{0} %select.2868)
  %concatenate.2870 = s64[8192,1]{1,0} concatenate(s64[8192,1]{1,0} %reshape.2869), dimensions={1}
  %convert.2851 = f64[8192]{0} convert(s64[8192]{0} %reshape.2850)
  %constant.2849 = f64[] constant(-1)
  %broadcast.2852 = f64[8192]{0} broadcast(f64[] %constant.2849), dimensions={}
  %compare.2853 = pred[8192]{0} compare(f64[8192]{0} %convert.2851, f64[8192]{0} %broadcast.2852), direction=NE
  %reshape.2854 = pred[8192,1]{1,0} reshape(pred[8192]{0} %compare.2853)
  %broadcast.2855 = pred[8192,1]{1,0} broadcast(pred[8192,1]{1,0} %reshape.2854), dimensions={0,1}
  %reshape.2856 = pred[8192]{0} reshape(pred[8192,1]{1,0} %broadcast.2855)
  %broadcast.2857 = pred[8192,1024]{1,0} broadcast(pred[8192]{0} %reshape.2856), dimensions={0}
  %get-tuple-element.2259 = f32[16,512,1024]{2,1,0} get-tuple-element((s64[], f32[16,512,1024]{2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, /*index=5*/f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, /*index=10*/f32[30,8192,1024]{2,1,0}, f32[30,1024,512]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,128,128,512]{3,2,1,0}, /*index=15*/f32[30,16,8,512,512]{4,3,2,1,0}, f32[30,128,512,512]{3,2,1,0}, f32[30,128,512,128]{3,2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=20*/f32[30,16,512,1024]{3,2,1,0}, f32[30,16,512,1]{3,2,1,0}, f32[30,16,512,1024]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, /*index=25*/f32[30,16,512,4096]{3,2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,8192,1024]{2,1,0}, f32[30,16,512,4096]{3,2,1,0}, f32[30,16,512,4096]{3,2,1,0}, /*index=30*/f32[30,4096,1024]{2,1,0}, f32[30,8192,4096]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, /*index=35*/f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, /*index=40*/f32[30,1024]{1,0}, f32[], f32[], f32[], f32[]) %call.2257), index=1
  %reshape.2848 = f32[8192,1024]{1,0} reshape(f32[16,512,1024]{2,1,0} %get-tuple-element.2259)
  %constant.2843 = f32[] constant(0)
  %reshape.2844 = f32[1,1]{1,0} reshape(f32[] %constant.2843)
  %broadcast.2845 = f32[1,1]{1,0} broadcast(f32[1,1]{1,0} %reshape.2844), dimensions={0,1}
  %reshape.2846 = f32[] reshape(f32[1,1]{1,0} %broadcast.2845)
  %broadcast.2847 = f32[8192,1024]{1,0} broadcast(f32[] %reshape.2846), dimensions={}
  %select.2858 = f32[8192,1024]{1,0} select(pred[8192,1024]{1,0} %broadcast.2857, f32[8192,1024]{1,0} %reshape.2848, f32[8192,1024]{1,0} %broadcast.2847)
  %broadcast.2876 = f32[8192,1024]{1,0} broadcast(f32[8192,1024]{1,0} %select.2858), dimensions={0,1}
  %scatter.2881 = f32[8192,1024]{1,0} scatter(f32[8192,1024]{1,0} %broadcast.2875, s64[8192,1]{1,0} %concatenate.2870, f32[8192,1024]{1,0} %broadcast.2876), update_window_dims={1}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%ScatterCombiner.2877
  %transpose.2882 = f32[8192,1024]{1,0} transpose(f32[8192,1024]{1,0} %scatter.2881), dimensions={0,1}
  %p280.2883 = f32[] parameter(280), sharding={replicated}
  %broadcast.2884 = f32[8192,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2885 = f32[8192,1024]{1,0} multiply(f32[8192,1024]{1,0} %transpose.2882, f32[8192,1024]{1,0} %broadcast.2884)
  %add.2886 = f32[8192,1024]{1,0} add(f32[8192,1024]{1,0} %p273.713, f32[8192,1024]{1,0} %multiply.2885)
  %custom-call.2887 = f32[8192,1024]{1,0} custom-call(f32[8192,1024]{1,0} %add.2886), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2888 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2889 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2784, f32[1024,1024]{1,0} %broadcast.2888)
  %add.2890 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p271.679, f32[1024,1024]{1,0} %multiply.2889)
  %custom-call.2891 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2890), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2892 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2893 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2724, f32[512,1024]{1,0} %broadcast.2892)
  %add.2894 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p241.618, f32[512,1024]{1,0} %multiply.2893)
  %custom-call.2895 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2894), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2896 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2897 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2664, f32[512,1024]{1,0} %broadcast.2896)
  %add.2898 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p211.557, f32[512,1024]{1,0} %multiply.2897)
  %custom-call.2899 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2898), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2900 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2901 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2604, f32[1024,1024]{1,0} %broadcast.2900)
  %add.2902 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p181.496, f32[1024,1024]{1,0} %multiply.2901)
  %custom-call.2903 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2902), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2904 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2905 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2544, f32[4096,1024]{1,0} %broadcast.2904)
  %add.2906 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p151.435, f32[4096,1024]{1,0} %multiply.2905)
  %custom-call.2907 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.2906), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2908 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2909 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2484, f32[4096,1024]{1,0} %broadcast.2908)
  %add.2910 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p121.374, f32[4096,1024]{1,0} %multiply.2909)
  %custom-call.2911 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.2910), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2912 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2913 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2424, f32[1024,4096]{1,0} %broadcast.2912)
  %add.2914 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p91.313, f32[1024,4096]{1,0} %multiply.2913)
  %custom-call.2915 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.2914), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2916 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2917 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2364, f32[1024]{0} %broadcast.2916)
  %add.2918 = f32[1024]{0} add(f32[1024]{0} %p61.252, f32[1024]{0} %multiply.2917)
  %custom-call.2919 = f32[1024]{0} custom-call(f32[1024]{0} %add.2918), custom_call_target="Sharding", sharding={replicated}
  %broadcast.2920 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2921 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2304, f32[1024]{0} %broadcast.2920)
  %add.2922 = f32[1024]{0} add(f32[1024]{0} %p31.191, f32[1024]{0} %multiply.2921)
  %custom-call.2923 = f32[1024]{0} custom-call(f32[1024]{0} %add.2922), custom_call_target="Sharding", sharding={replicated}
  %broadcast.2924 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2925 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2786, f32[1024,1024]{1,0} %broadcast.2924)
  %add.2926 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p270.678, f32[1024,1024]{1,0} %multiply.2925)
  %custom-call.2927 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2926), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2928 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2929 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2726, f32[512,1024]{1,0} %broadcast.2928)
  %add.2930 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p240.617, f32[512,1024]{1,0} %multiply.2929)
  %custom-call.2931 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2930), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2932 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2933 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2666, f32[512,1024]{1,0} %broadcast.2932)
  %add.2934 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p210.556, f32[512,1024]{1,0} %multiply.2933)
  %custom-call.2935 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2934), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2936 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2937 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2606, f32[1024,1024]{1,0} %broadcast.2936)
  %add.2938 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p180.495, f32[1024,1024]{1,0} %multiply.2937)
  %custom-call.2939 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2938), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2940 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2941 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2546, f32[4096,1024]{1,0} %broadcast.2940)
  %add.2942 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p150.434, f32[4096,1024]{1,0} %multiply.2941)
  %custom-call.2943 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.2942), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2944 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2945 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2486, f32[4096,1024]{1,0} %broadcast.2944)
  %add.2946 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p120.373, f32[4096,1024]{1,0} %multiply.2945)
  %custom-call.2947 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.2946), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2948 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2949 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2426, f32[1024,4096]{1,0} %broadcast.2948)
  %add.2950 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p90.312, f32[1024,4096]{1,0} %multiply.2949)
  %custom-call.2951 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.2950), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2952 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2953 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2366, f32[1024]{0} %broadcast.2952)
  %add.2954 = f32[1024]{0} add(f32[1024]{0} %p60.251, f32[1024]{0} %multiply.2953)
  %broadcast.2955 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2956 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2306, f32[1024]{0} %broadcast.2955)
  %add.2957 = f32[1024]{0} add(f32[1024]{0} %p30.190, f32[1024]{0} %multiply.2956)
  %broadcast.2958 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2959 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2788, f32[1024,1024]{1,0} %broadcast.2958)
  %add.2960 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p269.677, f32[1024,1024]{1,0} %multiply.2959)
  %custom-call.2961 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2960), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2962 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2963 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2728, f32[512,1024]{1,0} %broadcast.2962)
  %add.2964 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p239.616, f32[512,1024]{1,0} %multiply.2963)
  %custom-call.2965 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2964), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2966 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2967 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2668, f32[512,1024]{1,0} %broadcast.2966)
  %add.2968 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p209.555, f32[512,1024]{1,0} %multiply.2967)
  %custom-call.2969 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2968), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2970 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2971 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2608, f32[1024,1024]{1,0} %broadcast.2970)
  %add.2972 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p179.494, f32[1024,1024]{1,0} %multiply.2971)
  %custom-call.2973 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2972), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2974 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2975 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2548, f32[4096,1024]{1,0} %broadcast.2974)
  %add.2976 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p149.433, f32[4096,1024]{1,0} %multiply.2975)
  %custom-call.2977 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.2976), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2978 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2979 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2488, f32[4096,1024]{1,0} %broadcast.2978)
  %add.2980 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p119.372, f32[4096,1024]{1,0} %multiply.2979)
  %custom-call.2981 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.2980), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2982 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2983 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2428, f32[1024,4096]{1,0} %broadcast.2982)
  %add.2984 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p89.311, f32[1024,4096]{1,0} %multiply.2983)
  %custom-call.2985 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.2984), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.2986 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2987 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2368, f32[1024]{0} %broadcast.2986)
  %add.2988 = f32[1024]{0} add(f32[1024]{0} %p59.250, f32[1024]{0} %multiply.2987)
  %broadcast.2989 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2990 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2308, f32[1024]{0} %broadcast.2989)
  %add.2991 = f32[1024]{0} add(f32[1024]{0} %p29.189, f32[1024]{0} %multiply.2990)
  %broadcast.2992 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2993 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2790, f32[1024,1024]{1,0} %broadcast.2992)
  %add.2994 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p268.676, f32[1024,1024]{1,0} %multiply.2993)
  %custom-call.2995 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.2994), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.2996 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.2997 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2730, f32[512,1024]{1,0} %broadcast.2996)
  %add.2998 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p238.615, f32[512,1024]{1,0} %multiply.2997)
  %custom-call.2999 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.2998), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3000 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3001 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2670, f32[512,1024]{1,0} %broadcast.3000)
  %add.3002 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p208.554, f32[512,1024]{1,0} %multiply.3001)
  %custom-call.3003 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3002), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3004 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3005 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2610, f32[1024,1024]{1,0} %broadcast.3004)
  %add.3006 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p178.493, f32[1024,1024]{1,0} %multiply.3005)
  %custom-call.3007 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3006), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3008 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3009 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2550, f32[4096,1024]{1,0} %broadcast.3008)
  %add.3010 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p148.432, f32[4096,1024]{1,0} %multiply.3009)
  %custom-call.3011 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3010), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3012 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3013 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2490, f32[4096,1024]{1,0} %broadcast.3012)
  %add.3014 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p118.371, f32[4096,1024]{1,0} %multiply.3013)
  %custom-call.3015 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3014), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3016 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3017 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2430, f32[1024,4096]{1,0} %broadcast.3016)
  %add.3018 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p88.310, f32[1024,4096]{1,0} %multiply.3017)
  %custom-call.3019 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3018), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3020 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3021 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2370, f32[1024]{0} %broadcast.3020)
  %add.3022 = f32[1024]{0} add(f32[1024]{0} %p58.249, f32[1024]{0} %multiply.3021)
  %broadcast.3023 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3024 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2310, f32[1024]{0} %broadcast.3023)
  %add.3025 = f32[1024]{0} add(f32[1024]{0} %p28.188, f32[1024]{0} %multiply.3024)
  %broadcast.3026 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3027 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2792, f32[1024,1024]{1,0} %broadcast.3026)
  %add.3028 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p267.675, f32[1024,1024]{1,0} %multiply.3027)
  %custom-call.3029 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3028), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3030 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3031 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2732, f32[512,1024]{1,0} %broadcast.3030)
  %add.3032 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p237.614, f32[512,1024]{1,0} %multiply.3031)
  %custom-call.3033 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3032), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3034 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3035 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2672, f32[512,1024]{1,0} %broadcast.3034)
  %add.3036 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p207.553, f32[512,1024]{1,0} %multiply.3035)
  %custom-call.3037 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3036), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3038 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3039 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2612, f32[1024,1024]{1,0} %broadcast.3038)
  %add.3040 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p177.492, f32[1024,1024]{1,0} %multiply.3039)
  %custom-call.3041 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3040), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3042 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3043 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2552, f32[4096,1024]{1,0} %broadcast.3042)
  %add.3044 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p147.431, f32[4096,1024]{1,0} %multiply.3043)
  %custom-call.3045 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3044), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3046 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3047 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2492, f32[4096,1024]{1,0} %broadcast.3046)
  %add.3048 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p117.370, f32[4096,1024]{1,0} %multiply.3047)
  %custom-call.3049 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3048), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3050 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3051 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2432, f32[1024,4096]{1,0} %broadcast.3050)
  %add.3052 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p87.309, f32[1024,4096]{1,0} %multiply.3051)
  %custom-call.3053 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3052), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3054 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3055 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2372, f32[1024]{0} %broadcast.3054)
  %add.3056 = f32[1024]{0} add(f32[1024]{0} %p57.248, f32[1024]{0} %multiply.3055)
  %broadcast.3057 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3058 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2312, f32[1024]{0} %broadcast.3057)
  %add.3059 = f32[1024]{0} add(f32[1024]{0} %p27.187, f32[1024]{0} %multiply.3058)
  %broadcast.3060 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3061 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2794, f32[1024,1024]{1,0} %broadcast.3060)
  %add.3062 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p266.674, f32[1024,1024]{1,0} %multiply.3061)
  %custom-call.3063 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3062), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3064 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3065 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2734, f32[512,1024]{1,0} %broadcast.3064)
  %add.3066 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p236.613, f32[512,1024]{1,0} %multiply.3065)
  %custom-call.3067 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3066), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3068 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3069 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2674, f32[512,1024]{1,0} %broadcast.3068)
  %add.3070 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p206.552, f32[512,1024]{1,0} %multiply.3069)
  %custom-call.3071 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3070), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3072 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3073 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2614, f32[1024,1024]{1,0} %broadcast.3072)
  %add.3074 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p176.491, f32[1024,1024]{1,0} %multiply.3073)
  %custom-call.3075 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3074), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3076 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3077 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2554, f32[4096,1024]{1,0} %broadcast.3076)
  %add.3078 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p146.430, f32[4096,1024]{1,0} %multiply.3077)
  %custom-call.3079 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3078), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3080 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3081 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2494, f32[4096,1024]{1,0} %broadcast.3080)
  %add.3082 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p116.369, f32[4096,1024]{1,0} %multiply.3081)
  %custom-call.3083 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3082), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3084 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3085 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2434, f32[1024,4096]{1,0} %broadcast.3084)
  %add.3086 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p86.308, f32[1024,4096]{1,0} %multiply.3085)
  %custom-call.3087 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3086), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3088 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3089 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2374, f32[1024]{0} %broadcast.3088)
  %add.3090 = f32[1024]{0} add(f32[1024]{0} %p56.247, f32[1024]{0} %multiply.3089)
  %broadcast.3091 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3092 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2314, f32[1024]{0} %broadcast.3091)
  %add.3093 = f32[1024]{0} add(f32[1024]{0} %p26.186, f32[1024]{0} %multiply.3092)
  %broadcast.3094 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3095 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2796, f32[1024,1024]{1,0} %broadcast.3094)
  %add.3096 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p265.673, f32[1024,1024]{1,0} %multiply.3095)
  %custom-call.3097 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3096), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3098 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3099 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2736, f32[512,1024]{1,0} %broadcast.3098)
  %add.3100 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p235.612, f32[512,1024]{1,0} %multiply.3099)
  %custom-call.3101 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3100), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3102 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3103 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2676, f32[512,1024]{1,0} %broadcast.3102)
  %add.3104 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p205.551, f32[512,1024]{1,0} %multiply.3103)
  %custom-call.3105 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3104), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3106 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3107 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2616, f32[1024,1024]{1,0} %broadcast.3106)
  %add.3108 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p175.490, f32[1024,1024]{1,0} %multiply.3107)
  %custom-call.3109 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3108), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3110 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3111 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2556, f32[4096,1024]{1,0} %broadcast.3110)
  %add.3112 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p145.429, f32[4096,1024]{1,0} %multiply.3111)
  %custom-call.3113 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3112), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3114 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3115 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2496, f32[4096,1024]{1,0} %broadcast.3114)
  %add.3116 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p115.368, f32[4096,1024]{1,0} %multiply.3115)
  %custom-call.3117 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3116), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3118 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3119 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2436, f32[1024,4096]{1,0} %broadcast.3118)
  %add.3120 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p85.307, f32[1024,4096]{1,0} %multiply.3119)
  %custom-call.3121 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3120), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3122 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3123 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2376, f32[1024]{0} %broadcast.3122)
  %add.3124 = f32[1024]{0} add(f32[1024]{0} %p55.246, f32[1024]{0} %multiply.3123)
  %broadcast.3125 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3126 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2316, f32[1024]{0} %broadcast.3125)
  %add.3127 = f32[1024]{0} add(f32[1024]{0} %p25.185, f32[1024]{0} %multiply.3126)
  %broadcast.3128 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3129 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2798, f32[1024,1024]{1,0} %broadcast.3128)
  %add.3130 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p264.672, f32[1024,1024]{1,0} %multiply.3129)
  %custom-call.3131 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3130), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3132 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3133 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2738, f32[512,1024]{1,0} %broadcast.3132)
  %add.3134 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p234.611, f32[512,1024]{1,0} %multiply.3133)
  %custom-call.3135 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3134), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3136 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3137 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2678, f32[512,1024]{1,0} %broadcast.3136)
  %add.3138 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p204.550, f32[512,1024]{1,0} %multiply.3137)
  %custom-call.3139 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3138), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3140 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3141 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2618, f32[1024,1024]{1,0} %broadcast.3140)
  %add.3142 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p174.489, f32[1024,1024]{1,0} %multiply.3141)
  %custom-call.3143 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3142), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3144 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3145 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2558, f32[4096,1024]{1,0} %broadcast.3144)
  %add.3146 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p144.428, f32[4096,1024]{1,0} %multiply.3145)
  %custom-call.3147 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3146), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3148 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3149 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2498, f32[4096,1024]{1,0} %broadcast.3148)
  %add.3150 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p114.367, f32[4096,1024]{1,0} %multiply.3149)
  %custom-call.3151 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3150), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3152 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3153 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2438, f32[1024,4096]{1,0} %broadcast.3152)
  %add.3154 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p84.306, f32[1024,4096]{1,0} %multiply.3153)
  %custom-call.3155 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3154), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3156 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3157 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2378, f32[1024]{0} %broadcast.3156)
  %add.3158 = f32[1024]{0} add(f32[1024]{0} %p54.245, f32[1024]{0} %multiply.3157)
  %broadcast.3159 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3160 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2318, f32[1024]{0} %broadcast.3159)
  %add.3161 = f32[1024]{0} add(f32[1024]{0} %p24.184, f32[1024]{0} %multiply.3160)
  %broadcast.3162 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3163 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2800, f32[1024,1024]{1,0} %broadcast.3162)
  %add.3164 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p263.671, f32[1024,1024]{1,0} %multiply.3163)
  %custom-call.3165 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3164), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3166 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3167 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2740, f32[512,1024]{1,0} %broadcast.3166)
  %add.3168 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p233.610, f32[512,1024]{1,0} %multiply.3167)
  %custom-call.3169 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3168), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3170 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3171 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2680, f32[512,1024]{1,0} %broadcast.3170)
  %add.3172 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p203.549, f32[512,1024]{1,0} %multiply.3171)
  %custom-call.3173 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3172), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3174 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3175 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2620, f32[1024,1024]{1,0} %broadcast.3174)
  %add.3176 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p173.488, f32[1024,1024]{1,0} %multiply.3175)
  %custom-call.3177 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3176), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3178 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3179 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2560, f32[4096,1024]{1,0} %broadcast.3178)
  %add.3180 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p143.427, f32[4096,1024]{1,0} %multiply.3179)
  %custom-call.3181 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3180), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3182 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3183 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2500, f32[4096,1024]{1,0} %broadcast.3182)
  %add.3184 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p113.366, f32[4096,1024]{1,0} %multiply.3183)
  %custom-call.3185 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3184), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3186 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3187 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2440, f32[1024,4096]{1,0} %broadcast.3186)
  %add.3188 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p83.305, f32[1024,4096]{1,0} %multiply.3187)
  %custom-call.3189 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3188), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3190 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3191 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2380, f32[1024]{0} %broadcast.3190)
  %add.3192 = f32[1024]{0} add(f32[1024]{0} %p53.244, f32[1024]{0} %multiply.3191)
  %broadcast.3193 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3194 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2320, f32[1024]{0} %broadcast.3193)
  %add.3195 = f32[1024]{0} add(f32[1024]{0} %p23.183, f32[1024]{0} %multiply.3194)
  %broadcast.3196 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3197 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2802, f32[1024,1024]{1,0} %broadcast.3196)
  %add.3198 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p262.670, f32[1024,1024]{1,0} %multiply.3197)
  %custom-call.3199 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3198), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3200 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3201 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2742, f32[512,1024]{1,0} %broadcast.3200)
  %add.3202 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p232.609, f32[512,1024]{1,0} %multiply.3201)
  %custom-call.3203 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3202), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3204 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3205 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2682, f32[512,1024]{1,0} %broadcast.3204)
  %add.3206 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p202.548, f32[512,1024]{1,0} %multiply.3205)
  %custom-call.3207 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3206), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3208 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3209 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2622, f32[1024,1024]{1,0} %broadcast.3208)
  %add.3210 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p172.487, f32[1024,1024]{1,0} %multiply.3209)
  %custom-call.3211 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3210), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3212 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3213 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2562, f32[4096,1024]{1,0} %broadcast.3212)
  %add.3214 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p142.426, f32[4096,1024]{1,0} %multiply.3213)
  %custom-call.3215 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3214), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3216 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3217 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2502, f32[4096,1024]{1,0} %broadcast.3216)
  %add.3218 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p112.365, f32[4096,1024]{1,0} %multiply.3217)
  %custom-call.3219 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3218), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3220 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3221 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2442, f32[1024,4096]{1,0} %broadcast.3220)
  %add.3222 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p82.304, f32[1024,4096]{1,0} %multiply.3221)
  %custom-call.3223 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3222), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3224 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3225 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2382, f32[1024]{0} %broadcast.3224)
  %add.3226 = f32[1024]{0} add(f32[1024]{0} %p52.243, f32[1024]{0} %multiply.3225)
  %broadcast.3227 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3228 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2322, f32[1024]{0} %broadcast.3227)
  %add.3229 = f32[1024]{0} add(f32[1024]{0} %p22.182, f32[1024]{0} %multiply.3228)
  %broadcast.3230 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3231 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2804, f32[1024,1024]{1,0} %broadcast.3230)
  %add.3232 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p261.669, f32[1024,1024]{1,0} %multiply.3231)
  %custom-call.3233 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3232), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3234 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3235 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2744, f32[512,1024]{1,0} %broadcast.3234)
  %add.3236 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p231.608, f32[512,1024]{1,0} %multiply.3235)
  %custom-call.3237 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3236), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3238 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3239 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2684, f32[512,1024]{1,0} %broadcast.3238)
  %add.3240 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p201.547, f32[512,1024]{1,0} %multiply.3239)
  %custom-call.3241 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3240), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3242 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3243 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2624, f32[1024,1024]{1,0} %broadcast.3242)
  %add.3244 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p171.486, f32[1024,1024]{1,0} %multiply.3243)
  %custom-call.3245 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3244), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3246 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3247 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2564, f32[4096,1024]{1,0} %broadcast.3246)
  %add.3248 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p141.425, f32[4096,1024]{1,0} %multiply.3247)
  %custom-call.3249 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3248), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3250 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3251 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2504, f32[4096,1024]{1,0} %broadcast.3250)
  %add.3252 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p111.364, f32[4096,1024]{1,0} %multiply.3251)
  %custom-call.3253 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3252), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3254 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3255 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2444, f32[1024,4096]{1,0} %broadcast.3254)
  %add.3256 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p81.303, f32[1024,4096]{1,0} %multiply.3255)
  %custom-call.3257 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3256), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3258 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3259 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2384, f32[1024]{0} %broadcast.3258)
  %add.3260 = f32[1024]{0} add(f32[1024]{0} %p51.242, f32[1024]{0} %multiply.3259)
  %broadcast.3261 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3262 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2324, f32[1024]{0} %broadcast.3261)
  %add.3263 = f32[1024]{0} add(f32[1024]{0} %p21.181, f32[1024]{0} %multiply.3262)
  %broadcast.3264 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3265 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2806, f32[1024,1024]{1,0} %broadcast.3264)
  %add.3266 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p260.668, f32[1024,1024]{1,0} %multiply.3265)
  %custom-call.3267 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3266), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3268 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3269 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2746, f32[512,1024]{1,0} %broadcast.3268)
  %add.3270 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p230.607, f32[512,1024]{1,0} %multiply.3269)
  %custom-call.3271 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3270), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3272 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3273 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2686, f32[512,1024]{1,0} %broadcast.3272)
  %add.3274 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p200.546, f32[512,1024]{1,0} %multiply.3273)
  %custom-call.3275 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3274), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3276 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3277 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2626, f32[1024,1024]{1,0} %broadcast.3276)
  %add.3278 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p170.485, f32[1024,1024]{1,0} %multiply.3277)
  %custom-call.3279 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3278), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3280 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3281 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2566, f32[4096,1024]{1,0} %broadcast.3280)
  %add.3282 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p140.424, f32[4096,1024]{1,0} %multiply.3281)
  %custom-call.3283 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3282), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3284 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3285 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2506, f32[4096,1024]{1,0} %broadcast.3284)
  %add.3286 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p110.363, f32[4096,1024]{1,0} %multiply.3285)
  %custom-call.3287 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3286), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3288 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3289 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2446, f32[1024,4096]{1,0} %broadcast.3288)
  %add.3290 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p80.302, f32[1024,4096]{1,0} %multiply.3289)
  %custom-call.3291 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3290), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3292 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3293 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2386, f32[1024]{0} %broadcast.3292)
  %add.3294 = f32[1024]{0} add(f32[1024]{0} %p50.241, f32[1024]{0} %multiply.3293)
  %broadcast.3295 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3296 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2326, f32[1024]{0} %broadcast.3295)
  %add.3297 = f32[1024]{0} add(f32[1024]{0} %p20.180, f32[1024]{0} %multiply.3296)
  %broadcast.3298 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3299 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2808, f32[1024,1024]{1,0} %broadcast.3298)
  %add.3300 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p259.667, f32[1024,1024]{1,0} %multiply.3299)
  %custom-call.3301 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3300), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3302 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3303 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2748, f32[512,1024]{1,0} %broadcast.3302)
  %add.3304 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p229.606, f32[512,1024]{1,0} %multiply.3303)
  %custom-call.3305 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3304), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3306 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3307 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2688, f32[512,1024]{1,0} %broadcast.3306)
  %add.3308 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p199.545, f32[512,1024]{1,0} %multiply.3307)
  %custom-call.3309 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3308), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3310 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3311 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2628, f32[1024,1024]{1,0} %broadcast.3310)
  %add.3312 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p169.484, f32[1024,1024]{1,0} %multiply.3311)
  %custom-call.3313 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3312), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3314 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3315 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2568, f32[4096,1024]{1,0} %broadcast.3314)
  %add.3316 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p139.423, f32[4096,1024]{1,0} %multiply.3315)
  %custom-call.3317 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3316), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3318 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3319 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2508, f32[4096,1024]{1,0} %broadcast.3318)
  %add.3320 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p109.362, f32[4096,1024]{1,0} %multiply.3319)
  %custom-call.3321 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3320), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3322 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3323 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2448, f32[1024,4096]{1,0} %broadcast.3322)
  %add.3324 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p79.301, f32[1024,4096]{1,0} %multiply.3323)
  %custom-call.3325 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3324), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3326 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3327 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2388, f32[1024]{0} %broadcast.3326)
  %add.3328 = f32[1024]{0} add(f32[1024]{0} %p49.240, f32[1024]{0} %multiply.3327)
  %broadcast.3329 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3330 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2328, f32[1024]{0} %broadcast.3329)
  %add.3331 = f32[1024]{0} add(f32[1024]{0} %p19.179, f32[1024]{0} %multiply.3330)
  %broadcast.3332 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3333 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2810, f32[1024,1024]{1,0} %broadcast.3332)
  %add.3334 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p258.666, f32[1024,1024]{1,0} %multiply.3333)
  %custom-call.3335 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3334), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3336 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3337 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2750, f32[512,1024]{1,0} %broadcast.3336)
  %add.3338 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p228.605, f32[512,1024]{1,0} %multiply.3337)
  %custom-call.3339 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3338), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3340 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3341 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2690, f32[512,1024]{1,0} %broadcast.3340)
  %add.3342 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p198.544, f32[512,1024]{1,0} %multiply.3341)
  %custom-call.3343 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3342), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3344 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3345 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2630, f32[1024,1024]{1,0} %broadcast.3344)
  %add.3346 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p168.483, f32[1024,1024]{1,0} %multiply.3345)
  %custom-call.3347 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3346), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3348 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3349 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2570, f32[4096,1024]{1,0} %broadcast.3348)
  %add.3350 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p138.422, f32[4096,1024]{1,0} %multiply.3349)
  %custom-call.3351 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3350), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3352 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3353 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2510, f32[4096,1024]{1,0} %broadcast.3352)
  %add.3354 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p108.361, f32[4096,1024]{1,0} %multiply.3353)
  %custom-call.3355 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3354), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3356 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3357 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2450, f32[1024,4096]{1,0} %broadcast.3356)
  %add.3358 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p78.300, f32[1024,4096]{1,0} %multiply.3357)
  %custom-call.3359 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3358), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3360 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3361 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2390, f32[1024]{0} %broadcast.3360)
  %add.3362 = f32[1024]{0} add(f32[1024]{0} %p48.239, f32[1024]{0} %multiply.3361)
  %broadcast.3363 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3364 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2330, f32[1024]{0} %broadcast.3363)
  %add.3365 = f32[1024]{0} add(f32[1024]{0} %p18.178, f32[1024]{0} %multiply.3364)
  %broadcast.3366 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3367 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2812, f32[1024,1024]{1,0} %broadcast.3366)
  %add.3368 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p257.665, f32[1024,1024]{1,0} %multiply.3367)
  %custom-call.3369 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3368), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3370 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3371 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2752, f32[512,1024]{1,0} %broadcast.3370)
  %add.3372 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p227.604, f32[512,1024]{1,0} %multiply.3371)
  %custom-call.3373 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3372), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3374 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3375 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2692, f32[512,1024]{1,0} %broadcast.3374)
  %add.3376 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p197.543, f32[512,1024]{1,0} %multiply.3375)
  %custom-call.3377 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3376), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3378 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3379 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2632, f32[1024,1024]{1,0} %broadcast.3378)
  %add.3380 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p167.482, f32[1024,1024]{1,0} %multiply.3379)
  %custom-call.3381 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3380), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3382 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3383 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2572, f32[4096,1024]{1,0} %broadcast.3382)
  %add.3384 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p137.421, f32[4096,1024]{1,0} %multiply.3383)
  %custom-call.3385 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3384), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3386 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3387 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2512, f32[4096,1024]{1,0} %broadcast.3386)
  %add.3388 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p107.360, f32[4096,1024]{1,0} %multiply.3387)
  %custom-call.3389 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3388), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3390 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3391 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2452, f32[1024,4096]{1,0} %broadcast.3390)
  %add.3392 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p77.299, f32[1024,4096]{1,0} %multiply.3391)
  %custom-call.3393 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3392), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3394 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3395 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2392, f32[1024]{0} %broadcast.3394)
  %add.3396 = f32[1024]{0} add(f32[1024]{0} %p47.238, f32[1024]{0} %multiply.3395)
  %broadcast.3397 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3398 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2332, f32[1024]{0} %broadcast.3397)
  %add.3399 = f32[1024]{0} add(f32[1024]{0} %p17.177, f32[1024]{0} %multiply.3398)
  %broadcast.3400 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3401 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2814, f32[1024,1024]{1,0} %broadcast.3400)
  %add.3402 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p256.664, f32[1024,1024]{1,0} %multiply.3401)
  %custom-call.3403 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3402), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3404 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3405 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2754, f32[512,1024]{1,0} %broadcast.3404)
  %add.3406 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p226.603, f32[512,1024]{1,0} %multiply.3405)
  %custom-call.3407 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3406), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3408 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3409 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2694, f32[512,1024]{1,0} %broadcast.3408)
  %add.3410 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p196.542, f32[512,1024]{1,0} %multiply.3409)
  %custom-call.3411 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3410), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3412 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3413 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2634, f32[1024,1024]{1,0} %broadcast.3412)
  %add.3414 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p166.481, f32[1024,1024]{1,0} %multiply.3413)
  %custom-call.3415 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3414), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3416 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3417 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2574, f32[4096,1024]{1,0} %broadcast.3416)
  %add.3418 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p136.420, f32[4096,1024]{1,0} %multiply.3417)
  %custom-call.3419 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3418), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3420 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3421 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2514, f32[4096,1024]{1,0} %broadcast.3420)
  %add.3422 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p106.359, f32[4096,1024]{1,0} %multiply.3421)
  %custom-call.3423 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3422), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3424 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3425 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2454, f32[1024,4096]{1,0} %broadcast.3424)
  %add.3426 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p76.298, f32[1024,4096]{1,0} %multiply.3425)
  %custom-call.3427 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3426), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3428 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3429 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2394, f32[1024]{0} %broadcast.3428)
  %add.3430 = f32[1024]{0} add(f32[1024]{0} %p46.237, f32[1024]{0} %multiply.3429)
  %broadcast.3431 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3432 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2334, f32[1024]{0} %broadcast.3431)
  %add.3433 = f32[1024]{0} add(f32[1024]{0} %p16.176, f32[1024]{0} %multiply.3432)
  %broadcast.3434 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3435 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2816, f32[1024,1024]{1,0} %broadcast.3434)
  %add.3436 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p255.663, f32[1024,1024]{1,0} %multiply.3435)
  %custom-call.3437 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3436), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3438 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3439 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2756, f32[512,1024]{1,0} %broadcast.3438)
  %add.3440 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p225.602, f32[512,1024]{1,0} %multiply.3439)
  %custom-call.3441 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3440), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3442 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3443 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2696, f32[512,1024]{1,0} %broadcast.3442)
  %add.3444 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p195.541, f32[512,1024]{1,0} %multiply.3443)
  %custom-call.3445 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3444), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3446 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3447 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2636, f32[1024,1024]{1,0} %broadcast.3446)
  %add.3448 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p165.480, f32[1024,1024]{1,0} %multiply.3447)
  %custom-call.3449 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3448), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3450 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3451 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2576, f32[4096,1024]{1,0} %broadcast.3450)
  %add.3452 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p135.419, f32[4096,1024]{1,0} %multiply.3451)
  %custom-call.3453 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3452), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3454 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3455 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2516, f32[4096,1024]{1,0} %broadcast.3454)
  %add.3456 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p105.358, f32[4096,1024]{1,0} %multiply.3455)
  %custom-call.3457 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3456), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3458 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3459 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2456, f32[1024,4096]{1,0} %broadcast.3458)
  %add.3460 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p75.297, f32[1024,4096]{1,0} %multiply.3459)
  %custom-call.3461 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3460), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3462 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3463 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2396, f32[1024]{0} %broadcast.3462)
  %add.3464 = f32[1024]{0} add(f32[1024]{0} %p45.236, f32[1024]{0} %multiply.3463)
  %broadcast.3465 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3466 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2336, f32[1024]{0} %broadcast.3465)
  %add.3467 = f32[1024]{0} add(f32[1024]{0} %p15.175, f32[1024]{0} %multiply.3466)
  %broadcast.3468 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3469 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2818, f32[1024,1024]{1,0} %broadcast.3468)
  %add.3470 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p254.662, f32[1024,1024]{1,0} %multiply.3469)
  %custom-call.3471 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3470), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3472 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3473 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2758, f32[512,1024]{1,0} %broadcast.3472)
  %add.3474 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p224.601, f32[512,1024]{1,0} %multiply.3473)
  %custom-call.3475 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3474), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3476 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3477 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2698, f32[512,1024]{1,0} %broadcast.3476)
  %add.3478 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p194.540, f32[512,1024]{1,0} %multiply.3477)
  %custom-call.3479 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3478), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3480 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3481 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2638, f32[1024,1024]{1,0} %broadcast.3480)
  %add.3482 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p164.479, f32[1024,1024]{1,0} %multiply.3481)
  %custom-call.3483 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3482), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3484 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3485 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2578, f32[4096,1024]{1,0} %broadcast.3484)
  %add.3486 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p134.418, f32[4096,1024]{1,0} %multiply.3485)
  %custom-call.3487 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3486), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3488 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3489 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2518, f32[4096,1024]{1,0} %broadcast.3488)
  %add.3490 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p104.357, f32[4096,1024]{1,0} %multiply.3489)
  %custom-call.3491 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3490), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3492 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3493 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2458, f32[1024,4096]{1,0} %broadcast.3492)
  %add.3494 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p74.296, f32[1024,4096]{1,0} %multiply.3493)
  %custom-call.3495 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3494), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3496 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3497 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2398, f32[1024]{0} %broadcast.3496)
  %add.3498 = f32[1024]{0} add(f32[1024]{0} %p44.235, f32[1024]{0} %multiply.3497)
  %broadcast.3499 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3500 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2338, f32[1024]{0} %broadcast.3499)
  %add.3501 = f32[1024]{0} add(f32[1024]{0} %p14.174, f32[1024]{0} %multiply.3500)
  %broadcast.3502 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3503 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2820, f32[1024,1024]{1,0} %broadcast.3502)
  %add.3504 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p253.661, f32[1024,1024]{1,0} %multiply.3503)
  %custom-call.3505 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3504), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3506 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3507 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2760, f32[512,1024]{1,0} %broadcast.3506)
  %add.3508 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p223.600, f32[512,1024]{1,0} %multiply.3507)
  %custom-call.3509 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3508), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3510 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3511 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2700, f32[512,1024]{1,0} %broadcast.3510)
  %add.3512 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p193.539, f32[512,1024]{1,0} %multiply.3511)
  %custom-call.3513 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3512), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3514 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3515 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2640, f32[1024,1024]{1,0} %broadcast.3514)
  %add.3516 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p163.478, f32[1024,1024]{1,0} %multiply.3515)
  %custom-call.3517 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3516), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3518 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3519 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2580, f32[4096,1024]{1,0} %broadcast.3518)
  %add.3520 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p133.417, f32[4096,1024]{1,0} %multiply.3519)
  %custom-call.3521 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3520), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3522 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3523 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2520, f32[4096,1024]{1,0} %broadcast.3522)
  %add.3524 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p103.356, f32[4096,1024]{1,0} %multiply.3523)
  %custom-call.3525 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3524), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3526 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3527 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2460, f32[1024,4096]{1,0} %broadcast.3526)
  %add.3528 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p73.295, f32[1024,4096]{1,0} %multiply.3527)
  %custom-call.3529 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3528), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3530 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3531 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2400, f32[1024]{0} %broadcast.3530)
  %add.3532 = f32[1024]{0} add(f32[1024]{0} %p43.234, f32[1024]{0} %multiply.3531)
  %broadcast.3533 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3534 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2340, f32[1024]{0} %broadcast.3533)
  %add.3535 = f32[1024]{0} add(f32[1024]{0} %p13.173, f32[1024]{0} %multiply.3534)
  %broadcast.3536 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3537 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2822, f32[1024,1024]{1,0} %broadcast.3536)
  %add.3538 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p252.660, f32[1024,1024]{1,0} %multiply.3537)
  %custom-call.3539 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3538), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3540 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3541 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2762, f32[512,1024]{1,0} %broadcast.3540)
  %add.3542 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p222.599, f32[512,1024]{1,0} %multiply.3541)
  %custom-call.3543 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3542), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3544 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3545 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2702, f32[512,1024]{1,0} %broadcast.3544)
  %add.3546 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p192.538, f32[512,1024]{1,0} %multiply.3545)
  %custom-call.3547 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3546), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3548 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3549 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2642, f32[1024,1024]{1,0} %broadcast.3548)
  %add.3550 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p162.477, f32[1024,1024]{1,0} %multiply.3549)
  %custom-call.3551 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3550), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3552 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3553 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2582, f32[4096,1024]{1,0} %broadcast.3552)
  %add.3554 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p132.416, f32[4096,1024]{1,0} %multiply.3553)
  %custom-call.3555 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3554), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3556 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3557 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2522, f32[4096,1024]{1,0} %broadcast.3556)
  %add.3558 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p102.355, f32[4096,1024]{1,0} %multiply.3557)
  %custom-call.3559 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3558), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3560 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3561 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2462, f32[1024,4096]{1,0} %broadcast.3560)
  %add.3562 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p72.294, f32[1024,4096]{1,0} %multiply.3561)
  %custom-call.3563 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3562), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3564 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3565 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2402, f32[1024]{0} %broadcast.3564)
  %add.3566 = f32[1024]{0} add(f32[1024]{0} %p42.233, f32[1024]{0} %multiply.3565)
  %broadcast.3567 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3568 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2342, f32[1024]{0} %broadcast.3567)
  %add.3569 = f32[1024]{0} add(f32[1024]{0} %p12.172, f32[1024]{0} %multiply.3568)
  %broadcast.3570 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3571 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2824, f32[1024,1024]{1,0} %broadcast.3570)
  %add.3572 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p251.659, f32[1024,1024]{1,0} %multiply.3571)
  %custom-call.3573 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3572), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3574 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3575 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2764, f32[512,1024]{1,0} %broadcast.3574)
  %add.3576 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p221.598, f32[512,1024]{1,0} %multiply.3575)
  %custom-call.3577 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3576), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3578 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3579 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2704, f32[512,1024]{1,0} %broadcast.3578)
  %add.3580 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p191.537, f32[512,1024]{1,0} %multiply.3579)
  %custom-call.3581 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3580), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3582 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3583 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2644, f32[1024,1024]{1,0} %broadcast.3582)
  %add.3584 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p161.476, f32[1024,1024]{1,0} %multiply.3583)
  %custom-call.3585 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3584), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3586 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3587 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2584, f32[4096,1024]{1,0} %broadcast.3586)
  %add.3588 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p131.415, f32[4096,1024]{1,0} %multiply.3587)
  %custom-call.3589 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3588), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3590 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3591 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2524, f32[4096,1024]{1,0} %broadcast.3590)
  %add.3592 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p101.354, f32[4096,1024]{1,0} %multiply.3591)
  %custom-call.3593 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3592), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3594 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3595 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2464, f32[1024,4096]{1,0} %broadcast.3594)
  %add.3596 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p71.293, f32[1024,4096]{1,0} %multiply.3595)
  %custom-call.3597 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3596), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3598 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3599 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2404, f32[1024]{0} %broadcast.3598)
  %add.3600 = f32[1024]{0} add(f32[1024]{0} %p41.232, f32[1024]{0} %multiply.3599)
  %broadcast.3601 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3602 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2344, f32[1024]{0} %broadcast.3601)
  %add.3603 = f32[1024]{0} add(f32[1024]{0} %p11.171, f32[1024]{0} %multiply.3602)
  %broadcast.3604 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3605 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2826, f32[1024,1024]{1,0} %broadcast.3604)
  %add.3606 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p250.658, f32[1024,1024]{1,0} %multiply.3605)
  %custom-call.3607 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3606), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3608 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3609 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2766, f32[512,1024]{1,0} %broadcast.3608)
  %add.3610 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p220.597, f32[512,1024]{1,0} %multiply.3609)
  %custom-call.3611 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3610), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3612 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3613 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2706, f32[512,1024]{1,0} %broadcast.3612)
  %add.3614 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p190.536, f32[512,1024]{1,0} %multiply.3613)
  %custom-call.3615 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3614), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3616 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3617 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2646, f32[1024,1024]{1,0} %broadcast.3616)
  %add.3618 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p160.475, f32[1024,1024]{1,0} %multiply.3617)
  %custom-call.3619 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3618), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3620 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3621 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2586, f32[4096,1024]{1,0} %broadcast.3620)
  %add.3622 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p130.414, f32[4096,1024]{1,0} %multiply.3621)
  %custom-call.3623 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3622), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3624 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3625 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2526, f32[4096,1024]{1,0} %broadcast.3624)
  %add.3626 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p100.353, f32[4096,1024]{1,0} %multiply.3625)
  %custom-call.3627 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3626), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3628 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3629 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2466, f32[1024,4096]{1,0} %broadcast.3628)
  %add.3630 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p70.292, f32[1024,4096]{1,0} %multiply.3629)
  %custom-call.3631 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3630), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3632 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3633 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2406, f32[1024]{0} %broadcast.3632)
  %add.3634 = f32[1024]{0} add(f32[1024]{0} %p40.231, f32[1024]{0} %multiply.3633)
  %broadcast.3635 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3636 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2346, f32[1024]{0} %broadcast.3635)
  %add.3637 = f32[1024]{0} add(f32[1024]{0} %p10.170, f32[1024]{0} %multiply.3636)
  %broadcast.3638 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3639 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2828, f32[1024,1024]{1,0} %broadcast.3638)
  %add.3640 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p249.657, f32[1024,1024]{1,0} %multiply.3639)
  %custom-call.3641 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3640), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3642 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3643 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2768, f32[512,1024]{1,0} %broadcast.3642)
  %add.3644 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p219.596, f32[512,1024]{1,0} %multiply.3643)
  %custom-call.3645 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3644), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3646 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3647 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2708, f32[512,1024]{1,0} %broadcast.3646)
  %add.3648 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p189.535, f32[512,1024]{1,0} %multiply.3647)
  %custom-call.3649 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3648), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3650 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3651 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2648, f32[1024,1024]{1,0} %broadcast.3650)
  %add.3652 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p159.474, f32[1024,1024]{1,0} %multiply.3651)
  %custom-call.3653 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3652), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3654 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3655 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2588, f32[4096,1024]{1,0} %broadcast.3654)
  %add.3656 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p129.413, f32[4096,1024]{1,0} %multiply.3655)
  %custom-call.3657 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3656), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3658 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3659 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2528, f32[4096,1024]{1,0} %broadcast.3658)
  %add.3660 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p99.352, f32[4096,1024]{1,0} %multiply.3659)
  %custom-call.3661 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3660), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3662 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3663 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2468, f32[1024,4096]{1,0} %broadcast.3662)
  %add.3664 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p69.291, f32[1024,4096]{1,0} %multiply.3663)
  %custom-call.3665 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3664), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3666 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3667 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2408, f32[1024]{0} %broadcast.3666)
  %add.3668 = f32[1024]{0} add(f32[1024]{0} %p39.230, f32[1024]{0} %multiply.3667)
  %broadcast.3669 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3670 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2348, f32[1024]{0} %broadcast.3669)
  %add.3671 = f32[1024]{0} add(f32[1024]{0} %p9.169, f32[1024]{0} %multiply.3670)
  %broadcast.3672 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3673 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2830, f32[1024,1024]{1,0} %broadcast.3672)
  %add.3674 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p248.656, f32[1024,1024]{1,0} %multiply.3673)
  %custom-call.3675 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3674), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3676 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3677 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2770, f32[512,1024]{1,0} %broadcast.3676)
  %add.3678 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p218.595, f32[512,1024]{1,0} %multiply.3677)
  %custom-call.3679 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3678), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3680 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3681 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2710, f32[512,1024]{1,0} %broadcast.3680)
  %add.3682 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p188.534, f32[512,1024]{1,0} %multiply.3681)
  %custom-call.3683 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3682), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3684 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3685 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2650, f32[1024,1024]{1,0} %broadcast.3684)
  %add.3686 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p158.473, f32[1024,1024]{1,0} %multiply.3685)
  %custom-call.3687 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3686), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3688 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3689 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2590, f32[4096,1024]{1,0} %broadcast.3688)
  %add.3690 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p128.412, f32[4096,1024]{1,0} %multiply.3689)
  %custom-call.3691 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3690), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3692 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3693 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2530, f32[4096,1024]{1,0} %broadcast.3692)
  %add.3694 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p98.351, f32[4096,1024]{1,0} %multiply.3693)
  %custom-call.3695 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3694), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3696 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3697 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2470, f32[1024,4096]{1,0} %broadcast.3696)
  %add.3698 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p68.290, f32[1024,4096]{1,0} %multiply.3697)
  %custom-call.3699 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3698), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3700 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3701 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2410, f32[1024]{0} %broadcast.3700)
  %add.3702 = f32[1024]{0} add(f32[1024]{0} %p38.229, f32[1024]{0} %multiply.3701)
  %broadcast.3703 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3704 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2350, f32[1024]{0} %broadcast.3703)
  %add.3705 = f32[1024]{0} add(f32[1024]{0} %p8.168, f32[1024]{0} %multiply.3704)
  %broadcast.3706 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3707 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2832, f32[1024,1024]{1,0} %broadcast.3706)
  %add.3708 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p247.655, f32[1024,1024]{1,0} %multiply.3707)
  %custom-call.3709 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3708), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3710 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3711 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2772, f32[512,1024]{1,0} %broadcast.3710)
  %add.3712 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p217.594, f32[512,1024]{1,0} %multiply.3711)
  %custom-call.3713 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3712), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3714 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3715 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2712, f32[512,1024]{1,0} %broadcast.3714)
  %add.3716 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p187.533, f32[512,1024]{1,0} %multiply.3715)
  %custom-call.3717 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3716), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3718 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3719 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2652, f32[1024,1024]{1,0} %broadcast.3718)
  %add.3720 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p157.472, f32[1024,1024]{1,0} %multiply.3719)
  %custom-call.3721 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3720), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3722 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3723 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2592, f32[4096,1024]{1,0} %broadcast.3722)
  %add.3724 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p127.411, f32[4096,1024]{1,0} %multiply.3723)
  %custom-call.3725 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3724), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3726 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3727 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2532, f32[4096,1024]{1,0} %broadcast.3726)
  %add.3728 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p97.350, f32[4096,1024]{1,0} %multiply.3727)
  %custom-call.3729 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3728), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3730 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3731 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2472, f32[1024,4096]{1,0} %broadcast.3730)
  %add.3732 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p67.289, f32[1024,4096]{1,0} %multiply.3731)
  %custom-call.3733 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3732), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3734 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3735 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2412, f32[1024]{0} %broadcast.3734)
  %add.3736 = f32[1024]{0} add(f32[1024]{0} %p37.228, f32[1024]{0} %multiply.3735)
  %broadcast.3737 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3738 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2352, f32[1024]{0} %broadcast.3737)
  %add.3739 = f32[1024]{0} add(f32[1024]{0} %p7.167, f32[1024]{0} %multiply.3738)
  %broadcast.3740 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3741 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2834, f32[1024,1024]{1,0} %broadcast.3740)
  %add.3742 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p246.654, f32[1024,1024]{1,0} %multiply.3741)
  %custom-call.3743 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3742), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3744 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3745 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2774, f32[512,1024]{1,0} %broadcast.3744)
  %add.3746 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p216.593, f32[512,1024]{1,0} %multiply.3745)
  %custom-call.3747 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3746), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3748 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3749 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2714, f32[512,1024]{1,0} %broadcast.3748)
  %add.3750 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p186.532, f32[512,1024]{1,0} %multiply.3749)
  %custom-call.3751 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3750), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3752 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3753 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2654, f32[1024,1024]{1,0} %broadcast.3752)
  %add.3754 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p156.471, f32[1024,1024]{1,0} %multiply.3753)
  %custom-call.3755 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3754), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3756 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3757 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2594, f32[4096,1024]{1,0} %broadcast.3756)
  %add.3758 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p126.410, f32[4096,1024]{1,0} %multiply.3757)
  %custom-call.3759 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3758), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3760 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3761 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2534, f32[4096,1024]{1,0} %broadcast.3760)
  %add.3762 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p96.349, f32[4096,1024]{1,0} %multiply.3761)
  %custom-call.3763 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3762), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3764 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3765 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2474, f32[1024,4096]{1,0} %broadcast.3764)
  %add.3766 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p66.288, f32[1024,4096]{1,0} %multiply.3765)
  %custom-call.3767 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3766), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3768 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3769 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2414, f32[1024]{0} %broadcast.3768)
  %add.3770 = f32[1024]{0} add(f32[1024]{0} %p36.227, f32[1024]{0} %multiply.3769)
  %broadcast.3771 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3772 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2354, f32[1024]{0} %broadcast.3771)
  %add.3773 = f32[1024]{0} add(f32[1024]{0} %p6.166, f32[1024]{0} %multiply.3772)
  %broadcast.3774 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3775 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2836, f32[1024,1024]{1,0} %broadcast.3774)
  %add.3776 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p245.653, f32[1024,1024]{1,0} %multiply.3775)
  %custom-call.3777 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3776), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3778 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3779 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2776, f32[512,1024]{1,0} %broadcast.3778)
  %add.3780 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p215.592, f32[512,1024]{1,0} %multiply.3779)
  %custom-call.3781 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3780), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3782 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3783 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2716, f32[512,1024]{1,0} %broadcast.3782)
  %add.3784 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p185.531, f32[512,1024]{1,0} %multiply.3783)
  %custom-call.3785 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3784), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3786 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3787 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2656, f32[1024,1024]{1,0} %broadcast.3786)
  %add.3788 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p155.470, f32[1024,1024]{1,0} %multiply.3787)
  %custom-call.3789 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3788), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3790 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3791 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2596, f32[4096,1024]{1,0} %broadcast.3790)
  %add.3792 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p125.409, f32[4096,1024]{1,0} %multiply.3791)
  %custom-call.3793 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3792), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3794 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3795 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2536, f32[4096,1024]{1,0} %broadcast.3794)
  %add.3796 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p95.348, f32[4096,1024]{1,0} %multiply.3795)
  %custom-call.3797 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3796), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3798 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3799 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2476, f32[1024,4096]{1,0} %broadcast.3798)
  %add.3800 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p65.287, f32[1024,4096]{1,0} %multiply.3799)
  %custom-call.3801 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3800), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3802 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3803 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2416, f32[1024]{0} %broadcast.3802)
  %add.3804 = f32[1024]{0} add(f32[1024]{0} %p35.226, f32[1024]{0} %multiply.3803)
  %broadcast.3805 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3806 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2356, f32[1024]{0} %broadcast.3805)
  %add.3807 = f32[1024]{0} add(f32[1024]{0} %p5.165, f32[1024]{0} %multiply.3806)
  %broadcast.3808 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3809 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2838, f32[1024,1024]{1,0} %broadcast.3808)
  %add.3810 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p244.652, f32[1024,1024]{1,0} %multiply.3809)
  %custom-call.3811 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3810), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3812 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3813 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2778, f32[512,1024]{1,0} %broadcast.3812)
  %add.3814 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p214.591, f32[512,1024]{1,0} %multiply.3813)
  %custom-call.3815 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3814), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3816 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3817 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2718, f32[512,1024]{1,0} %broadcast.3816)
  %add.3818 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p184.530, f32[512,1024]{1,0} %multiply.3817)
  %custom-call.3819 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3818), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3820 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3821 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2658, f32[1024,1024]{1,0} %broadcast.3820)
  %add.3822 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p154.469, f32[1024,1024]{1,0} %multiply.3821)
  %custom-call.3823 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3822), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3824 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3825 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2598, f32[4096,1024]{1,0} %broadcast.3824)
  %add.3826 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p124.408, f32[4096,1024]{1,0} %multiply.3825)
  %custom-call.3827 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3826), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3828 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3829 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2538, f32[4096,1024]{1,0} %broadcast.3828)
  %add.3830 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p94.347, f32[4096,1024]{1,0} %multiply.3829)
  %custom-call.3831 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3830), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3832 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3833 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2478, f32[1024,4096]{1,0} %broadcast.3832)
  %add.3834 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p64.286, f32[1024,4096]{1,0} %multiply.3833)
  %custom-call.3835 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3834), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3836 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3837 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2418, f32[1024]{0} %broadcast.3836)
  %add.3838 = f32[1024]{0} add(f32[1024]{0} %p34.225, f32[1024]{0} %multiply.3837)
  %broadcast.3839 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3840 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2358, f32[1024]{0} %broadcast.3839)
  %add.3841 = f32[1024]{0} add(f32[1024]{0} %p4.164, f32[1024]{0} %multiply.3840)
  %broadcast.3842 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3843 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2840, f32[1024,1024]{1,0} %broadcast.3842)
  %add.3844 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p243.651, f32[1024,1024]{1,0} %multiply.3843)
  %custom-call.3845 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3844), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3846 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3847 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2780, f32[512,1024]{1,0} %broadcast.3846)
  %add.3848 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p213.590, f32[512,1024]{1,0} %multiply.3847)
  %custom-call.3849 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3848), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3850 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3851 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2720, f32[512,1024]{1,0} %broadcast.3850)
  %add.3852 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p183.529, f32[512,1024]{1,0} %multiply.3851)
  %custom-call.3853 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3852), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3854 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3855 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2660, f32[1024,1024]{1,0} %broadcast.3854)
  %add.3856 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p153.468, f32[1024,1024]{1,0} %multiply.3855)
  %custom-call.3857 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3856), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3858 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3859 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2600, f32[4096,1024]{1,0} %broadcast.3858)
  %add.3860 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p123.407, f32[4096,1024]{1,0} %multiply.3859)
  %custom-call.3861 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3860), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3862 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3863 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2540, f32[4096,1024]{1,0} %broadcast.3862)
  %add.3864 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p93.346, f32[4096,1024]{1,0} %multiply.3863)
  %custom-call.3865 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3864), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3866 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3867 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2480, f32[1024,4096]{1,0} %broadcast.3866)
  %add.3868 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p63.285, f32[1024,4096]{1,0} %multiply.3867)
  %custom-call.3869 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3868), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3870 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3871 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2420, f32[1024]{0} %broadcast.3870)
  %add.3872 = f32[1024]{0} add(f32[1024]{0} %p33.224, f32[1024]{0} %multiply.3871)
  %broadcast.3873 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3874 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2360, f32[1024]{0} %broadcast.3873)
  %add.3875 = f32[1024]{0} add(f32[1024]{0} %p3.163, f32[1024]{0} %multiply.3874)
  %broadcast.3876 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3877 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2842, f32[1024,1024]{1,0} %broadcast.3876)
  %add.3878 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p242.650, f32[1024,1024]{1,0} %multiply.3877)
  %custom-call.3879 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3878), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3880 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3881 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2782, f32[512,1024]{1,0} %broadcast.3880)
  %add.3882 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p212.589, f32[512,1024]{1,0} %multiply.3881)
  %custom-call.3883 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3882), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3884 = f32[512,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3885 = f32[512,1024]{1,0} multiply(f32[512,1024]{1,0} %reshape.2722, f32[512,1024]{1,0} %broadcast.3884)
  %add.3886 = f32[512,1024]{1,0} add(f32[512,1024]{1,0} %p182.528, f32[512,1024]{1,0} %multiply.3885)
  %custom-call.3887 = f32[512,1024]{1,0} custom-call(f32[512,1024]{1,0} %add.3886), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3888 = f32[1024,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3889 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %reshape.2662, f32[1024,1024]{1,0} %broadcast.3888)
  %add.3890 = f32[1024,1024]{1,0} add(f32[1024,1024]{1,0} %p152.467, f32[1024,1024]{1,0} %multiply.3889)
  %custom-call.3891 = f32[1024,1024]{1,0} custom-call(f32[1024,1024]{1,0} %add.3890), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3892 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3893 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2602, f32[4096,1024]{1,0} %broadcast.3892)
  %add.3894 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p122.406, f32[4096,1024]{1,0} %multiply.3893)
  %custom-call.3895 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3894), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3896 = f32[4096,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3897 = f32[4096,1024]{1,0} multiply(f32[4096,1024]{1,0} %reshape.2542, f32[4096,1024]{1,0} %broadcast.3896)
  %add.3898 = f32[4096,1024]{1,0} add(f32[4096,1024]{1,0} %p92.345, f32[4096,1024]{1,0} %multiply.3897)
  %custom-call.3899 = f32[4096,1024]{1,0} custom-call(f32[4096,1024]{1,0} %add.3898), custom_call_target="Sharding", sharding={devices=[4,2]0,4,1,5,2,6,3,7}
  %broadcast.3900 = f32[1024,4096]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3901 = f32[1024,4096]{1,0} multiply(f32[1024,4096]{1,0} %reshape.2482, f32[1024,4096]{1,0} %broadcast.3900)
  %add.3902 = f32[1024,4096]{1,0} add(f32[1024,4096]{1,0} %p62.284, f32[1024,4096]{1,0} %multiply.3901)
  %custom-call.3903 = f32[1024,4096]{1,0} custom-call(f32[1024,4096]{1,0} %add.3902), custom_call_target="Sharding", sharding={devices=[2,4]0,1,2,3,4,5,6,7}
  %broadcast.3904 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3905 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2422, f32[1024]{0} %broadcast.3904)
  %add.3906 = f32[1024]{0} add(f32[1024]{0} %p32.223, f32[1024]{0} %multiply.3905)
  %broadcast.3907 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3908 = f32[1024]{0} multiply(f32[1024]{0} %reshape.2362, f32[1024]{0} %broadcast.3907)
  %add.3909 = f32[1024]{0} add(f32[1024]{0} %p2.162, f32[1024]{0} %multiply.3908)
  %broadcast.3910 = f32[1024]{0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3911 = f32[1024]{0} multiply(f32[1024]{0} %reshape.1423, f32[1024]{0} %broadcast.3910)
  %add.3912 = f32[1024]{0} add(f32[1024]{0} %p274.1402, f32[1024]{0} %multiply.3911)
  %broadcast.3913 = f32[8192,1024]{1,0} broadcast(f32[] %p280.2883), dimensions={}
  %multiply.3914 = f32[8192,1024]{1,0} multiply(f32[8192,1024]{0,1} %transpose.1408, f32[8192,1024]{1,0} %broadcast.3913)
  %add.3915 = f32[8192,1024]{1,0} add(f32[8192,1024]{1,0} %p275.1409, f32[8192,1024]{1,0} %multiply.3914)
  %custom-call.3916 = f32[8192,1024]{1,0} custom-call(f32[8192,1024]{1,0} %add.3915), custom_call_target="Sharding", sharding={devices=[8,1]0,4,1,5,2,6,3,7}
  ROOT %tuple.3917 = (f32[1024,8192]{1,0}, f32[8192,1024]{0,1}, f32[1,1,1024]{2,1,0}, f32[1024]{0}, f32[30,1024,1024]{2,1,0}, /*index=5*/f32[30,512,1024]{2,1,0}, f32[30,512,1024]{2,1,0}, f32[30,1024,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, f32[30,4096,1024]{2,1,0}, /*index=10*/f32[30,1024,4096]{2,1,0}, f32[30,1024]{1,0}, f32[30,1024]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=15*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=20*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=25*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=30*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=35*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=40*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=45*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=50*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=55*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=60*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=65*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, /*index=70*/f32[1024]{0}, f32[1024]{0}, f32[1024]{0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=75*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=80*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=85*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=90*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=95*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, /*index=100*/f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[1024,4096]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=105*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=110*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=115*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=120*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=125*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=130*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=135*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=140*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=145*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=150*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=155*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=160*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=165*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=170*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=175*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=180*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=185*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=190*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=195*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=200*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=205*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=210*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=215*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=220*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=225*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=230*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=235*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=240*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=245*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=250*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=255*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=260*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=265*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=270*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=275*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, /*index=280*/f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[1024,1024]{1,0}, f32[8192,1024]{1,0}, f32[8192,1024]{1,0}, /*index=285*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=290*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=295*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=300*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=305*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=310*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=315*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=320*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=325*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=330*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=335*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=340*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=345*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=350*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=355*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=360*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=365*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=370*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=375*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=380*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=385*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=390*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=395*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=400*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=405*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=410*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=415*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=420*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=425*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=430*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=435*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=440*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=445*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=450*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=455*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=460*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=465*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=470*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=475*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=480*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=485*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=490*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=495*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=500*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=505*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=510*/f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, /*index=515*/f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, /*index=520*/f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, /*index=525*/f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, /*index=530*/f32[512,1024]{1,0}, f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, /*index=535*/f32[1024]{0}, f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, /*index=540*/f32[1024,1024]{1,0}, f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, /*index=545*/f32[1024]{0}, f32[1024,1024]{1,0}, f32[512,1024]{1,0}, f32[512,1024]{1,0}, f32[1024,1024]{1,0}, /*index=550*/f32[4096,1024]{1,0}, f32[4096,1024]{1,0}, f32[1024,4096]{1,0}, f32[1024]{0}, f32[1024]{0}, /*index=555*/f32[1024]{0}, f32[8192,1024]{1,0}) tuple(f32[1024,8192]{1,0} %dot.1407, f32[8192,1024]{0,1} %transpose.1408, f32[1,1,1024]{2,1,0} %reshape.1422, f32[1024]{0} %reshape.1423, f32[30,1024,1024]{2,1,0} %get-tuple-element.2290, /*index=5*/f32[30,512,1024]{2,1,0} %get-tuple-element.2291, f32[30,512,1024]{2,1,0} %get-tuple-element.2292, f32[30,1024,1024]{2,1,0} %get-tuple-element.2293, f32[30,4096,1024]{2,1,0} %get-tuple-element.2294, f32[30,4096,1024]{2,1,0} %get-tuple-element.2295, /*index=10*/f32[30,1024,4096]{2,1,0} %get-tuple-element.2296, f32[30,1024]{1,0} %get-tuple-element.2297, f32[30,1024]{1,0} %get-tuple-element.2298, f32[1024]{0} %reshape.2304, f32[1024]{0} %reshape.2306, /*index=15*/f32[1024]{0} %reshape.2308, f32[1024]{0} %reshape.2310, f32[1024]{0} %reshape.2312, f32[1024]{0} %reshape.2314, f32[1024]{0} %reshape.2316, /*index=20*/f32[1024]{0} %reshape.2318, f32[1024]{0} %reshape.2320, f32[1024]{0} %reshape.2322, f32[1024]{0} %reshape.2324, f32[1024]{0} %reshape.2326, /*index=25*/f32[1024]{0} %reshape.2328, f32[1024]{0} %reshape.2330, f32[1024]{0} %reshape.2332, f32[1024]{0} %reshape.2334, f32[1024]{0} %reshape.2336, /*index=30*/f32[1024]{0} %reshape.2338, f32[1024]{0} %reshape.2340, f32[1024]{0} %reshape.2342, f32[1024]{0} %reshape.2344, f32[1024]{0} %reshape.2346, /*index=35*/f32[1024]{0} %reshape.2348, f32[1024]{0} %reshape.2350, f32[1024]{0} %reshape.2352, f32[1024]{0} %reshape.2354, f32[1024]{0} %reshape.2356, /*index=40*/f32[1024]{0} %reshape.2358, f32[1024]{0} %reshape.2360, f32[1024]{0} %reshape.2362, f32[1024]{0} %reshape.2364, f32[1024]{0} %reshape.2366, /*index=45*/f32[1024]{0} %reshape.2368, f32[1024]{0} %reshape.2370, f32[1024]{0} %reshape.2372, f32[1024]{0} %reshape.2374, f32[1024]{0} %reshape.2376, /*index=50*/f32[1024]{0} %reshape.2378, f32[1024]{0} %reshape.2380, f32[1024]{0} %reshape.2382, f32[1024]{0} %reshape.2384, f32[1024]{0} %reshape.2386, /*index=55*/f32[1024]{0} %reshape.2388, f32[1024]{0} %reshape.2390, f32[1024]{0} %reshape.2392, f32[1024]{0} %reshape.2394, f32[1024]{0} %reshape.2396, /*index=60*/f32[1024]{0} %reshape.2398, f32[1024]{0} %reshape.2400, f32[1024]{0} %reshape.2402, f32[1024]{0} %reshape.2404, f32[1024]{0} %reshape.2406, /*index=65*/f32[1024]{0} %reshape.2408, f32[1024]{0} %reshape.2410, f32[1024]{0} %reshape.2412, f32[1024]{0} %reshape.2414, f32[1024]{0} %reshape.2416, /*index=70*/f32[1024]{0} %reshape.2418, f32[1024]{0} %reshape.2420, f32[1024]{0} %reshape.2422, f32[1024,4096]{1,0} %reshape.2424, f32[1024,4096]{1,0} %reshape.2426, /*index=75*/f32[1024,4096]{1,0} %reshape.2428, f32[1024,4096]{1,0} %reshape.2430, f32[1024,4096]{1,0} %reshape.2432, f32[1024,4096]{1,0} %reshape.2434, f32[1024,4096]{1,0} %reshape.2436, /*index=80*/f32[1024,4096]{1,0} %reshape.2438, f32[1024,4096]{1,0} %reshape.2440, f32[1024,4096]{1,0} %reshape.2442, f32[1024,4096]{1,0} %reshape.2444, f32[1024,4096]{1,0} %reshape.2446, /*index=85*/f32[1024,4096]{1,0} %reshape.2448, f32[1024,4096]{1,0} %reshape.2450, f32[1024,4096]{1,0} %reshape.2452, f32[1024,4096]{1,0} %reshape.2454, f32[1024,4096]{1,0} %reshape.2456, /*index=90*/f32[1024,4096]{1,0} %reshape.2458, f32[1024,4096]{1,0} %reshape.2460, f32[1024,4096]{1,0} %reshape.2462, f32[1024,4096]{1,0} %reshape.2464, f32[1024,4096]{1,0} %reshape.2466, /*index=95*/f32[1024,4096]{1,0} %reshape.2468, f32[1024,4096]{1,0} %reshape.2470, f32[1024,4096]{1,0} %reshape.2472, f32[1024,4096]{1,0} %reshape.2474, f32[1024,4096]{1,0} %reshape.2476, /*index=100*/f32[1024,4096]{1,0} %reshape.2478, f32[1024,4096]{1,0} %reshape.2480, f32[1024,4096]{1,0} %reshape.2482, f32[4096,1024]{1,0} %reshape.2484, f32[4096,1024]{1,0} %reshape.2486, /*index=105*/f32[4096,1024]{1,0} %reshape.2488, f32[4096,1024]{1,0} %reshape.2490, f32[4096,1024]{1,0} %reshape.2492, f32[4096,1024]{1,0} %reshape.2494, f32[4096,1024]{1,0} %reshape.2496, /*index=110*/f32[4096,1024]{1,0} %reshape.2498, f32[4096,1024]{1,0} %reshape.2500, f32[4096,1024]{1,0} %reshape.2502, f32[4096,1024]{1,0} %reshape.2504, f32[4096,1024]{1,0} %reshape.2506, /*index=115*/f32[4096,1024]{1,0} %reshape.2508, f32[4096,1024]{1,0} %reshape.2510, f32[4096,1024]{1,0} %reshape.2512, f32[4096,1024]{1,0} %reshape.2514, f32[4096,1024]{1,0} %reshape.2516, /*index=120*/f32[4096,1024]{1,0} %reshape.2518, f32[4096,1024]{1,0} %reshape.2520, f32[4096,1024]{1,0} %reshape.2522, f32[4096,1024]{1,0} %reshape.2524, f32[4096,1024]{1,0} %reshape.2526, /*index=125*/f32[4096,1024]{1,0} %reshape.2528, f32[4096,1024]{1,0} %reshape.2530, f32[4096,1024]{1,0} %reshape.2532, f32[4096,1024]{1,0} %reshape.2534, f32[4096,1024]{1,0} %reshape.2536, /*index=130*/f32[4096,1024]{1,0} %reshape.2538, f32[4096,1024]{1,0} %reshape.2540, f32[4096,1024]{1,0} %reshape.2542, f32[4096,1024]{1,0} %reshape.2544, f32[4096,1024]{1,0} %reshape.2546, /*index=135*/f32[4096,1024]{1,0} %reshape.2548, f32[4096,1024]{1,0} %reshape.2550, f32[4096,1024]{1,0} %reshape.2552, f32[4096,1024]{1,0} %reshape.2554, f32[4096,1024]{1,0} %reshape.2556, /*index=140*/f32[4096,1024]{1,0} %reshape.2558, f32[4096,1024]{1,0} %reshape.2560, f32[4096,1024]{1,0} %reshape.2562, f32[4096,1024]{1,0} %reshape.2564, f32[4096,1024]{1,0} %reshape.2566, /*index=145*/f32[4096,1024]{1,0} %reshape.2568, f32[4096,1024]{1,0} %reshape.2570, f32[4096,1024]{1,0} %reshape.2572, f32[4096,1024]{1,0} %reshape.2574, f32[4096,1024]{1,0} %reshape.2576, /*index=150*/f32[4096,1024]{1,0} %reshape.2578, f32[4096,1024]{1,0} %reshape.2580, f32[4096,1024]{1,0} %reshape.2582, f32[4096,1024]{1,0} %reshape.2584, f32[4096,1024]{1,0} %reshape.2586, /*index=155*/f32[4096,1024]{1,0} %reshape.2588, f32[4096,1024]{1,0} %reshape.2590, f32[4096,1024]{1,0} %reshape.2592, f32[4096,1024]{1,0} %reshape.2594, f32[4096,1024]{1,0} %reshape.2596, /*index=160*/f32[4096,1024]{1,0} %reshape.2598, f32[4096,1024]{1,0} %reshape.2600, f32[4096,1024]{1,0} %reshape.2602, f32[1024,1024]{1,0} %reshape.2604, f32[1024,1024]{1,0} %reshape.2606, /*index=165*/f32[1024,1024]{1,0} %reshape.2608, f32[1024,1024]{1,0} %reshape.2610, f32[1024,1024]{1,0} %reshape.2612, f32[1024,1024]{1,0} %reshape.2614, f32[1024,1024]{1,0} %reshape.2616, /*index=170*/f32[1024,1024]{1,0} %reshape.2618, f32[1024,1024]{1,0} %reshape.2620, f32[1024,1024]{1,0} %reshape.2622, f32[1024,1024]{1,0} %reshape.2624, f32[1024,1024]{1,0} %reshape.2626, /*index=175*/f32[1024,1024]{1,0} %reshape.2628, f32[1024,1024]{1,0} %reshape.2630, f32[1024,1024]{1,0} %reshape.2632, f32[1024,1024]{1,0} %reshape.2634, f32[1024,1024]{1,0} %reshape.2636, /*index=180*/f32[1024,1024]{1,0} %reshape.2638, f32[1024,1024]{1,0} %reshape.2640, f32[1024,1024]{1,0} %reshape.2642, f32[1024,1024]{1,0} %reshape.2644, f32[1024,1024]{1,0} %reshape.2646, /*index=185*/f32[1024,1024]{1,0} %reshape.2648, f32[1024,1024]{1,0} %reshape.2650, f32[1024,1024]{1,0} %reshape.2652, f32[1024,1024]{1,0} %reshape.2654, f32[1024,1024]{1,0} %reshape.2656, /*index=190*/f32[1024,1024]{1,0} %reshape.2658, f32[1024,1024]{1,0} %reshape.2660, f32[1024,1024]{1,0} %reshape.2662, f32[512,1024]{1,0} %reshape.2664, f32[512,1024]{1,0} %reshape.2666, /*index=195*/f32[512,1024]{1,0} %reshape.2668, f32[512,1024]{1,0} %reshape.2670, f32[512,1024]{1,0} %reshape.2672, f32[512,1024]{1,0} %reshape.2674, f32[512,1024]{1,0} %reshape.2676, /*index=200*/f32[512,1024]{1,0} %reshape.2678, f32[512,1024]{1,0} %reshape.2680, f32[512,1024]{1,0} %reshape.2682, f32[512,1024]{1,0} %reshape.2684, f32[512,1024]{1,0} %reshape.2686, /*index=205*/f32[512,1024]{1,0} %reshape.2688, f32[512,1024]{1,0} %reshape.2690, f32[512,1024]{1,0} %reshape.2692, f32[512,1024]{1,0} %reshape.2694, f32[512,1024]{1,0} %reshape.2696, /*index=210*/f32[512,1024]{1,0} %reshape.2698, f32[512,1024]{1,0} %reshape.2700, f32[512,1024]{1,0} %reshape.2702, f32[512,1024]{1,0} %reshape.2704, f32[512,1024]{1,0} %reshape.2706, /*index=215*/f32[512,1024]{1,0} %reshape.2708, f32[512,1024]{1,0} %reshape.2710, f32[512,1024]{1,0} %reshape.2712, f32[512,1024]{1,0} %reshape.2714, f32[512,1024]{1,0} %reshape.2716, /*index=220*/f32[512,1024]{1,0} %reshape.2718, f32[512,1024]{1,0} %reshape.2720, f32[512,1024]{1,0} %reshape.2722, f32[512,1024]{1,0} %reshape.2724, f32[512,1024]{1,0} %reshape.2726, /*index=225*/f32[512,1024]{1,0} %reshape.2728, f32[512,1024]{1,0} %reshape.2730, f32[512,1024]{1,0} %reshape.2732, f32[512,1024]{1,0} %reshape.2734, f32[512,1024]{1,0} %reshape.2736, /*index=230*/f32[512,1024]{1,0} %reshape.2738, f32[512,1024]{1,0} %reshape.2740, f32[512,1024]{1,0} %reshape.2742, f32[512,1024]{1,0} %reshape.2744, f32[512,1024]{1,0} %reshape.2746, /*index=235*/f32[512,1024]{1,0} %reshape.2748, f32[512,1024]{1,0} %reshape.2750, f32[512,1024]{1,0} %reshape.2752, f32[512,1024]{1,0} %reshape.2754, f32[512,1024]{1,0} %reshape.2756, /*index=240*/f32[512,1024]{1,0} %reshape.2758, f32[512,1024]{1,0} %reshape.2760, f32[512,1024]{1,0} %reshape.2762, f32[512,1024]{1,0} %reshape.2764, f32[512,1024]{1,0} %reshape.2766, /*index=245*/f32[512,1024]{1,0} %reshape.2768, f32[512,1024]{1,0} %reshape.2770, f32[512,1024]{1,0} %reshape.2772, f32[512,1024]{1,0} %reshape.2774, f32[512,1024]{1,0} %reshape.2776, /*index=250*/f32[512,1024]{1,0} %reshape.2778, f32[512,1024]{1,0} %reshape.2780, f32[512,1024]{1,0} %reshape.2782, f32[1024,1024]{1,0} %reshape.2784, f32[1024,1024]{1,0} %reshape.2786, /*index=255*/f32[1024,1024]{1,0} %reshape.2788, f32[1024,1024]{1,0} %reshape.2790, f32[1024,1024]{1,0} %reshape.2792, f32[1024,1024]{1,0} %reshape.2794, f32[1024,1024]{1,0} %reshape.2796, /*index=260*/f32[1024,1024]{1,0} %reshape.2798, f32[1024,1024]{1,0} %reshape.2800, f32[1024,1024]{1,0} %reshape.2802, f32[1024,1024]{1,0} %reshape.2804, f32[1024,1024]{1,0} %reshape.2806, /*index=265*/f32[1024,1024]{1,0} %reshape.2808, f32[1024,1024]{1,0} %reshape.2810, f32[1024,1024]{1,0} %reshape.2812, f32[1024,1024]{1,0} %reshape.2814, f32[1024,1024]{1,0} %reshape.2816, /*index=270*/f32[1024,1024]{1,0} %reshape.2818, f32[1024,1024]{1,0} %reshape.2820, f32[1024,1024]{1,0} %reshape.2822, f32[1024,1024]{1,0} %reshape.2824, f32[1024,1024]{1,0} %reshape.2826, /*index=275*/f32[1024,1024]{1,0} %reshape.2828, f32[1024,1024]{1,0} %reshape.2830, f32[1024,1024]{1,0} %reshape.2832, f32[1024,1024]{1,0} %reshape.2834, f32[1024,1024]{1,0} %reshape.2836, /*index=280*/f32[1024,1024]{1,0} %reshape.2838, f32[1024,1024]{1,0} %reshape.2840, f32[1024,1024]{1,0} %reshape.2842, f32[8192,1024]{1,0} %transpose.2882, f32[8192,1024]{1,0} %custom-call.2887, /*index=285*/f32[1024,1024]{1,0} %custom-call.2891, f32[512,1024]{1,0} %custom-call.2895, f32[512,1024]{1,0} %custom-call.2899, f32[1024,1024]{1,0} %custom-call.2903, f32[4096,1024]{1,0} %custom-call.2907, /*index=290*/f32[4096,1024]{1,0} %custom-call.2911, f32[1024,4096]{1,0} %custom-call.2915, f32[1024]{0} %custom-call.2919, f32[1024]{0} %custom-call.2923, f32[1024,1024]{1,0} %custom-call.2927, /*index=295*/f32[512,1024]{1,0} %custom-call.2931, f32[512,1024]{1,0} %custom-call.2935, f32[1024,1024]{1,0} %custom-call.2939, f32[4096,1024]{1,0} %custom-call.2943, f32[4096,1024]{1,0} %custom-call.2947, /*index=300*/f32[1024,4096]{1,0} %custom-call.2951, f32[1024]{0} %add.2954, f32[1024]{0} %add.2957, f32[1024,1024]{1,0} %custom-call.2961, f32[512,1024]{1,0} %custom-call.2965, /*index=305*/f32[512,1024]{1,0} %custom-call.2969, f32[1024,1024]{1,0} %custom-call.2973, f32[4096,1024]{1,0} %custom-call.2977, f32[4096,1024]{1,0} %custom-call.2981, f32[1024,4096]{1,0} %custom-call.2985, /*index=310*/f32[1024]{0} %add.2988, f32[1024]{0} %add.2991, f32[1024,1024]{1,0} %custom-call.2995, f32[512,1024]{1,0} %custom-call.2999, f32[512,1024]{1,0} %custom-call.3003, /*index=315*/f32[1024,1024]{1,0} %custom-call.3007, f32[4096,1024]{1,0} %custom-call.3011, f32[4096,1024]{1,0} %custom-call.3015, f32[1024,4096]{1,0} %custom-call.3019, f32[1024]{0} %add.3022, /*index=320*/f32[1024]{0} %add.3025, f32[1024,1024]{1,0} %custom-call.3029, f32[512,1024]{1,0} %custom-call.3033, f32[512,1024]{1,0} %custom-call.3037, f32[1024,1024]{1,0} %custom-call.3041, /*index=325*/f32[4096,1024]{1,0} %custom-call.3045, f32[4096,1024]{1,0} %custom-call.3049, f32[1024,4096]{1,0} %custom-call.3053, f32[1024]{0} %add.3056, f32[1024]{0} %add.3059, /*index=330*/f32[1024,1024]{1,0} %custom-call.3063, f32[512,1024]{1,0} %custom-call.3067, f32[512,1024]{1,0} %custom-call.3071, f32[1024,1024]{1,0} %custom-call.3075, f32[4096,1024]{1,0} %custom-call.3079, /*index=335*/f32[4096,1024]{1,0} %custom-call.3083, f32[1024,4096]{1,0} %custom-call.3087, f32[1024]{0} %add.3090, f32[1024]{0} %add.3093, f32[1024,1024]{1,0} %custom-call.3097, /*index=340*/f32[512,1024]{1,0} %custom-call.3101, f32[512,1024]{1,0} %custom-call.3105, f32[1024,1024]{1,0} %custom-call.3109, f32[4096,1024]{1,0} %custom-call.3113, f32[4096,1024]{1,0} %custom-call.3117, /*index=345*/f32[1024,4096]{1,0} %custom-call.3121, f32[1024]{0} %add.3124, f32[1024]{0} %add.3127, f32[1024,1024]{1,0} %custom-call.3131, f32[512,1024]{1,0} %custom-call.3135, /*index=350*/f32[512,1024]{1,0} %custom-call.3139, f32[1024,1024]{1,0} %custom-call.3143, f32[4096,1024]{1,0} %custom-call.3147, f32[4096,1024]{1,0} %custom-call.3151, f32[1024,4096]{1,0} %custom-call.3155, /*index=355*/f32[1024]{0} %add.3158, f32[1024]{0} %add.3161, f32[1024,1024]{1,0} %custom-call.3165, f32[512,1024]{1,0} %custom-call.3169, f32[512,1024]{1,0} %custom-call.3173, /*index=360*/f32[1024,1024]{1,0} %custom-call.3177, f32[4096,1024]{1,0} %custom-call.3181, f32[4096,1024]{1,0} %custom-call.3185, f32[1024,4096]{1,0} %custom-call.3189, f32[1024]{0} %add.3192, /*index=365*/f32[1024]{0} %add.3195, f32[1024,1024]{1,0} %custom-call.3199, f32[512,1024]{1,0} %custom-call.3203, f32[512,1024]{1,0} %custom-call.3207, f32[1024,1024]{1,0} %custom-call.3211, /*index=370*/f32[4096,1024]{1,0} %custom-call.3215, f32[4096,1024]{1,0} %custom-call.3219, f32[1024,4096]{1,0} %custom-call.3223, f32[1024]{0} %add.3226, f32[1024]{0} %add.3229, /*index=375*/f32[1024,1024]{1,0} %custom-call.3233, f32[512,1024]{1,0} %custom-call.3237, f32[512,1024]{1,0} %custom-call.3241, f32[1024,1024]{1,0} %custom-call.3245, f32[4096,1024]{1,0} %custom-call.3249, /*index=380*/f32[4096,1024]{1,0} %custom-call.3253, f32[1024,4096]{1,0} %custom-call.3257, f32[1024]{0} %add.3260, f32[1024]{0} %add.3263, f32[1024,1024]{1,0} %custom-call.3267, /*index=385*/f32[512,1024]{1,0} %custom-call.3271, f32[512,1024]{1,0} %custom-call.3275, f32[1024,1024]{1,0} %custom-call.3279, f32[4096,1024]{1,0} %custom-call.3283, f32[4096,1024]{1,0} %custom-call.3287, /*index=390*/f32[1024,4096]{1,0} %custom-call.3291, f32[1024]{0} %add.3294, f32[1024]{0} %add.3297, f32[1024,1024]{1,0} %custom-call.3301, f32[512,1024]{1,0} %custom-call.3305, /*index=395*/f32[512,1024]{1,0} %custom-call.3309, f32[1024,1024]{1,0} %custom-call.3313, f32[4096,1024]{1,0} %custom-call.3317, f32[4096,1024]{1,0} %custom-call.3321, f32[1024,4096]{1,0} %custom-call.3325, /*index=400*/f32[1024]{0} %add.3328, f32[1024]{0} %add.3331, f32[1024,1024]{1,0} %custom-call.3335, f32[512,1024]{1,0} %custom-call.3339, f32[512,1024]{1,0} %custom-call.3343, /*index=405*/f32[1024,1024]{1,0} %custom-call.3347, f32[4096,1024]{1,0} %custom-call.3351, f32[4096,1024]{1,0} %custom-call.3355, f32[1024,4096]{1,0} %custom-call.3359, f32[1024]{0} %add.3362, /*index=410*/f32[1024]{0} %add.3365, f32[1024,1024]{1,0} %custom-call.3369, f32[512,1024]{1,0} %custom-call.3373, f32[512,1024]{1,0} %custom-call.3377, f32[1024,1024]{1,0} %custom-call.3381, /*index=415*/f32[4096,1024]{1,0} %custom-call.3385, f32[4096,1024]{1,0} %custom-call.3389, f32[1024,4096]{1,0} %custom-call.3393, f32[1024]{0} %add.3396, f32[1024]{0} %add.3399, /*index=420*/f32[1024,1024]{1,0} %custom-call.3403, f32[512,1024]{1,0} %custom-call.3407, f32[512,1024]{1,0} %custom-call.3411, f32[1024,1024]{1,0} %custom-call.3415, f32[4096,1024]{1,0} %custom-call.3419, /*index=425*/f32[4096,1024]{1,0} %custom-call.3423, f32[1024,4096]{1,0} %custom-call.3427, f32[1024]{0} %add.3430, f32[1024]{0} %add.3433, f32[1024,1024]{1,0} %custom-call.3437, /*index=430*/f32[512,1024]{1,0} %custom-call.3441, f32[512,1024]{1,0} %custom-call.3445, f32[1024,1024]{1,0} %custom-call.3449, f32[4096,1024]{1,0} %custom-call.3453, f32[4096,1024]{1,0} %custom-call.3457, /*index=435*/f32[1024,4096]{1,0} %custom-call.3461, f32[1024]{0} %add.3464, f32[1024]{0} %add.3467, f32[1024,1024]{1,0} %custom-call.3471, f32[512,1024]{1,0} %custom-call.3475, /*index=440*/f32[512,1024]{1,0} %custom-call.3479, f32[1024,1024]{1,0} %custom-call.3483, f32[4096,1024]{1,0} %custom-call.3487, f32[4096,1024]{1,0} %custom-call.3491, f32[1024,4096]{1,0} %custom-call.3495, /*index=445*/f32[1024]{0} %add.3498, f32[1024]{0} %add.3501, f32[1024,1024]{1,0} %custom-call.3505, f32[512,1024]{1,0} %custom-call.3509, f32[512,1024]{1,0} %custom-call.3513, /*index=450*/f32[1024,1024]{1,0} %custom-call.3517, f32[4096,1024]{1,0} %custom-call.3521, f32[4096,1024]{1,0} %custom-call.3525, f32[1024,4096]{1,0} %custom-call.3529, f32[1024]{0} %add.3532, /*index=455*/f32[1024]{0} %add.3535, f32[1024,1024]{1,0} %custom-call.3539, f32[512,1024]{1,0} %custom-call.3543, f32[512,1024]{1,0} %custom-call.3547, f32[1024,1024]{1,0} %custom-call.3551, /*index=460*/f32[4096,1024]{1,0} %custom-call.3555, f32[4096,1024]{1,0} %custom-call.3559, f32[1024,4096]{1,0} %custom-call.3563, f32[1024]{0} %add.3566, f32[1024]{0} %add.3569, /*index=465*/f32[1024,1024]{1,0} %custom-call.3573, f32[512,1024]{1,0} %custom-call.3577, f32[512,1024]{1,0} %custom-call.3581, f32[1024,1024]{1,0} %custom-call.3585, f32[4096,1024]{1,0} %custom-call.3589, /*index=470*/f32[4096,1024]{1,0} %custom-call.3593, f32[1024,4096]{1,0} %custom-call.3597, f32[1024]{0} %add.3600, f32[1024]{0} %add.3603, f32[1024,1024]{1,0} %custom-call.3607, /*index=475*/f32[512,1024]{1,0} %custom-call.3611, f32[512,1024]{1,0} %custom-call.3615, f32[1024,1024]{1,0} %custom-call.3619, f32[4096,1024]{1,0} %custom-call.3623, f32[4096,1024]{1,0} %custom-call.3627, /*index=480*/f32[1024,4096]{1,0} %custom-call.3631, f32[1024]{0} %add.3634, f32[1024]{0} %add.3637, f32[1024,1024]{1,0} %custom-call.3641, f32[512,1024]{1,0} %custom-call.3645, /*index=485*/f32[512,1024]{1,0} %custom-call.3649, f32[1024,1024]{1,0} %custom-call.3653, f32[4096,1024]{1,0} %custom-call.3657, f32[4096,1024]{1,0} %custom-call.3661, f32[1024,4096]{1,0} %custom-call.3665, /*index=490*/f32[1024]{0} %add.3668, f32[1024]{0} %add.3671, f32[1024,1024]{1,0} %custom-call.3675, f32[512,1024]{1,0} %custom-call.3679, f32[512,1024]{1,0} %custom-call.3683, /*index=495*/f32[1024,1024]{1,0} %custom-call.3687, f32[4096,1024]{1,0} %custom-call.3691, f32[4096,1024]{1,0} %custom-call.3695, f32[1024,4096]{1,0} %custom-call.3699, f32[1024]{0} %add.3702, /*index=500*/f32[1024]{0} %add.3705, f32[1024,1024]{1,0} %custom-call.3709, f32[512,1024]{1,0} %custom-call.3713, f32[512,1024]{1,0} %custom-call.3717, f32[1024,1024]{1,0} %custom-call.3721, /*index=505*/f32[4096,1024]{1,0} %custom-call.3725, f32[4096,1024]{1,0} %custom-call.3729, f32[1024,4096]{1,0} %custom-call.3733, f32[1024]{0} %add.3736, f32[1024]{0} %add.3739, /*index=510*/f32[1024,1024]{1,0} %custom-call.3743, f32[512,1024]{1,0} %custom-call.3747, f32[512,1024]{1,0} %custom-call.3751, f32[1024,1024]{1,0} %custom-call.3755, f32[4096,1024]{1,0} %custom-call.3759, /*index=515*/f32[4096,1024]{1,0} %custom-call.3763, f32[1024,4096]{1,0} %custom-call.3767, f32[1024]{0} %add.3770, f32[1024]{0} %add.3773, f32[1024,1024]{1,0} %custom-call.3777, /*index=520*/f32[512,1024]{1,0} %custom-call.3781, f32[512,1024]{1,0} %custom-call.3785, f32[1024,1024]{1,0} %custom-call.3789, f32[4096,1024]{1,0} %custom-call.3793, f32[4096,1024]{1,0} %custom-call.3797, /*index=525*/f32[1024,4096]{1,0} %custom-call.3801, f32[1024]{0} %add.3804, f32[1024]{0} %add.3807, f32[1024,1024]{1,0} %custom-call.3811, f32[512,1024]{1,0} %custom-call.3815, /*index=530*/f32[512,1024]{1,0} %custom-call.3819, f32[1024,1024]{1,0} %custom-call.3823, f32[4096,1024]{1,0} %custom-call.3827, f32[4096,1024]{1,0} %custom-call.3831, f32[1024,4096]{1,0} %custom-call.3835, /*index=535*/f32[1024]{0} %add.3838, f32[1024]{0} %add.3841, f32[1024,1024]{1,0} %custom-call.3845, f32[512,1024]{1,0} %custom-call.3849, f32[512,1024]{1,0} %custom-call.3853, /*index=540*/f32[1024,1024]{1,0} %custom-call.3857, f32[4096,1024]{1,0} %custom-call.3861, f32[4096,1024]{1,0} %custom-call.3865, f32[1024,4096]{1,0} %custom-call.3869, f32[1024]{0} %add.3872, /*index=545*/f32[1024]{0} %add.3875, f32[1024,1024]{1,0} %custom-call.3879, f32[512,1024]{1,0} %custom-call.3883, f32[512,1024]{1,0} %custom-call.3887, f32[1024,1024]{1,0} %custom-call.3891, /*index=550*/f32[4096,1024]{1,0} %custom-call.3895, f32[4096,1024]{1,0} %custom-call.3899, f32[1024,4096]{1,0} %custom-call.3903, f32[1024]{0} %add.3906, f32[1024]{0} %add.3909, /*index=555*/f32[1024]{0} %add.3912, f32[8192,1024]{1,0} %custom-call.3916)
}


Graph Hash: 91c52b808baec5f46238f45078843e4a

## END_GRAPH


#OUTPUT_SHARDING_BEGIN

f32[1024,8192] {devices=[1,8]0,4,1,5,2,6,3,7}
f32[8192,1024] {devices=[8,1]0,4,1,5,2,6,3,7}
f32[1,1,1024] {devices=[1,1,4,2]0,4,1,5,2,6,3,7 last_tile_dim_replicate}
f32[1024] {devices=[4,2]0,4,1,5,2,6,3,7 last_tile_dim_replicate}
f32[30,1024,1024] {devices=[1,4,2]0,4,1,5,2,6,3,7}
f32[30,512,1024] {devices=[1,4,2]0,4,1,5,2,6,3,7}
f32[30,512,1024] {devices=[1,4,2]0,4,1,5,2,6,3,7}
f32[30,1024,1024] {devices=[1,2,4]0,1,2,3,4,5,6,7}
f32[30,4096,1024] {devices=[1,4,2]0,4,1,5,2,6,3,7}
f32[30,4096,1024] {devices=[1,4,2]0,4,1,5,2,6,3,7}
f32[30,1024,4096] {devices=[1,2,4]0,1,2,3,4,5,6,7}
f32[30,1024] {devices=[1,2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[30,1024] {devices=[1,2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[8192,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[8192,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {replicated}
f32[1024] {replicated}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[512,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,1024] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[4096,1024] {devices=[4,2]0,4,1,5,2,6,3,7}
f32[1024,4096] {devices=[2,4]0,1,2,3,4,5,6,7}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[2,4]0,1,2,3,4,5,6,7 last_tile_dim_replicate}
f32[1024] {devices=[4,2]0,4,1,5,2,6,3,7 last_tile_dim_replicate}
f32[8192,1024] {devices=[8,1]0,4,1,5,2,6,3,7}

#OUTPUT_SHARDING_END

