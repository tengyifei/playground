HloModule jit_ordered_wrapper, entry_computation_layout={(f32[100]{0})->f32[100]{0}}

integer_pow.13 {
  constant.15 = f32[] constant(1)
  broadcast.16 = f32[100]{0} broadcast(constant.15), dimensions={}
  Arg_0.14 = f32[100]{0} parameter(0)
  multiply.17 = f32[100]{0} multiply(Arg_0.14, Arg_0.14)
  ROOT divide.18 = f32[100]{0} divide(broadcast.16, multiply.17)
}

region_0.20 {
  Arg_0.21 = f32[] parameter(0)
  Arg_1.22 = f32[] parameter(1)
  ROOT add.23 = f32[] add(Arg_0.21, Arg_1.22)
}

ENTRY main.35 {
  constant.5 = f32[] constant(1)
  constant.2 = f32[] constant(1)
  broadcast.3 = f32[100]{0} broadcast(constant.2), dimensions={}
  Arg_0.1 = f32[100]{0} parameter(0)
  constant.6 = f32[] constant(-2)
  broadcast.7 = f32[100]{0} broadcast(constant.6), dimensions={}
  multiply.8 = f32[100]{0} multiply(Arg_0.1, broadcast.7)
  exponential.9 = f32[100]{0} exponential(multiply.8)
  subtract.10 = f32[100]{0} subtract(broadcast.3, exponential.9)
  add.11 = f32[100]{0} add(exponential.9, broadcast.3)
  divide.12 = f32[100]{0} divide(subtract.10, add.11)
  constant.4 = f32[] constant(0)
  reduce.24 = f32[] reduce(divide.12, constant.4), dimensions={0}, to_apply=region_0.20
  divide.25 = f32[] divide(constant.5, reduce.24)
  broadcast.26 = f32[100]{0} broadcast(divide.25), dimensions={}
  call.19 = f32[100]{0} call(add.11), to_apply=integer_pow.13
  multiply.27 = f32[100]{0} multiply(broadcast.26, call.19)
  multiply.28 = f32[100]{0} multiply(multiply.27, subtract.10)
  negate.29 = f32[100]{0} negate(multiply.28)
  divide.30 = f32[100]{0} divide(broadcast.26, add.11)
  negate.31 = f32[100]{0} negate(divide.30)
  add.32 = f32[100]{0} add(negate.29, negate.31)
  multiply.33 = f32[100]{0} multiply(add.32, exponential.9)
  ROOT multiply.34 = f32[100]{0} multiply(multiply.33, broadcast.7)
}

